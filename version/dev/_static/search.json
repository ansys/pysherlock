[{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.layer.Layer.export_all_test_fixtures.html#export_all_test_fixtures","title":"export_all_test_fixtures","text":"export_all_test_fixtures\n\n\n\nLayer.export_all_test_fixtures(project, cca_name, export_file, units='DEFAULT')\n\nExport the test fixture properties for a CCA.\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nexport_file: str\n\nFull path for the CSV file to export the text fixtures list to.\n\nunits: str, optional\n\nUnits to use when exporting the test fixtures.\nThe default is DEFAULT.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n>>>     \"ODB++ Tutorial.tgz\",\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     project=\"Tutorial Project\",\n>>>     cca_name=\"Card\",\n>>> )\n>>> sherlock.layer.export_all_test_fixtures(\n>>>     \"Tutorial Project\",\n>>>     \"Card\",\n>>>     \"TestFixturesExport.csv\",\n>>>     \"DEFAULT\"\n>>> )\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.model_dump_json.html#model_dump_json","title":"model_dump_json","text":"model_dump_json\n\n\n\nUpdateICTFixturesRequest.model_dump_json(*, indent=None, include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump_json](../concepts/serialization.md#modelmodel_dump_json)\n\nGenerates a JSON representation of the model using Pydantic’s to_json method.\n\nParameters\n\nindent (int | None) – Indentation to use in the JSON output. If None is passed, the output will be compact.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to include in the JSON output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to exclude from the JSON output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to serialize using field aliases.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\nstr\n\nReturns\n\nA JSON string representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.from_orm.html#from_orm","title":"from_orm","text":"from_orm\n\n\n\nclassmethod CopperGerberFile.from_orm(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/parts.html#parts","title":"Parts","text":"Parts\n\n\n\nModule containing all parts management capabilities.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.model_post_init.html#model_post_init","title":"model_post_init","text":"model_post_init\n\n\n\nUpdateTestPointsRequest.model_post_init(context, /)\n\nOverride this method to perform additional initialization after __init__ and model_construct.\nThis is useful if you want to do some validation that requires the entire model to be initialized.\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.model_dump_json.html#model_dump_json","title":"model_dump_json","text":"model_dump_json\n\n\n\nCopperGerberFile.model_dump_json(*, indent=None, include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump_json](../concepts/serialization.md#modelmodel_dump_json)\n\nGenerates a JSON representation of the model using Pydantic’s to_json method.\n\nParameters\n\nindent (int | None) – Indentation to use in the JSON output. If None is passed, the output will be compact.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to include in the JSON output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to exclude from the JSON output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to serialize using field aliases.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\nstr\n\nReturns\n\nA JSON string representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.parse_obj.html#parse_obj","title":"parse_obj","text":"parse_obj\n\n\n\nclassmethod UpdatePottingRegionRequest.parse_obj(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.location_units.html#location_units","title":"location_units","text":"location_units\n\n\n\nCsvExcelOutlineFile.location_units: str\n\nUnits for location values\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.model_construct.html#model_construct","title":"model_construct","text":"model_construct\n\n\n\nclassmethod PottingRegionDeleteData.model_construct(_fields_set=None, **values)\n\nCreates a new instance of the Model class with validated data.\n\nCreates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n\nmodel_construct() generally respects the model_config.extra setting on the provided model.\nThat is, if model_config.extra == ‘allow’, then all extra passed values are added to the model instance’s __dict__\nand __pydantic_extra__ fields. If model_config.extra == ‘ignore’ (the default), then all extra passed values are ignored.\nBecause no validation is performed with a call to model_construct(), having model_config.extra == ‘forbid’ does not result in\nan error if extra values are passed, but they will be ignored.\n\nParameters\n\n_fields_set (set[str] | None) – A set of field names that were originally explicitly set during instantiation. If provided,\nthis is directly used for the [model_fields_set][pydantic.BaseModel.model_fields_set] attribute.\nOtherwise, the field names from the values argument will be used.\n\nvalues (Any) – Trusted or pre-validated data dictionary.\n\nReturn type\n\nSelf\n\nReturns\n\nA new instance of the Model class with validated data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.model_copy.html#model_copy","title":"model_copy","text":"model_copy\n\n\n\nICTFixtureProperties.model_copy(*, update=None, deep=False)\n\n!!! abstract “Usage Documentation”\n\n[model_copy](../concepts/serialization.md#model_copy)\n\nReturns a copy of the model.\n\n!!! note\n\nThe underlying instance’s [__dict__][object.__dict__] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property]).\n\nParameters\n\nupdate (Mapping[str, Any] | None) – Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\n\ndeep (bool) – Set to True to make a deep copy of the model.\n\nReturn type\n\nSelf\n\nReturns\n\nNew model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.width.html#width","title":"width","text":"width\n\n\n\nRectangularShape.width: float\n\nfloat\n\nType\n\nWidth\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelFile.reference_id_column.html#reference_id_column","title":"reference_id_column","text":"reference_id_column\n\n\n\nCsvExcelFile.reference_id_column\n\nreference_id_column\n\nType\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.parse_file.html#parse_file","title":"parse_file","text":"parse_file\n\n\n\nclassmethod PottingRegion.parse_file(path, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.model_fields_set.html#model_fields_set","title":"model_fields_set","text":"model_fields_set\n\n\n\nproperty UpdatePottingRegionRequest.model_fields_set: set[str]\n\nReturns the set of fields that have been explicitly set on this model instance.\n\nReturns\n\nA set of strings representing the fields that have been set,\n\ni.e. that were not filled from defaults.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.schema.html#schema","title":"schema","text":"schema\n\n\n\nclassmethod GerberOutlineFile.schema(by_alias=True, ref_template='#/$defs/{model}')\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.model_dump_json.html#model_dump_json","title":"model_dump_json","text":"model_dump_json\n\n\n\nGetICTFixturesPropertiesRequest.model_dump_json(*, indent=None, include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump_json](../concepts/serialization.md#modelmodel_dump_json)\n\nGenerates a JSON representation of the model using Pydantic’s to_json method.\n\nParameters\n\nindent (int | None) – Indentation to use in the JSON output. If None is passed, the output will be compact.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to include in the JSON output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to exclude from the JSON output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to serialize using field aliases.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\nstr\n\nReturns\n\nA JSON string representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.model_copy.html#model_copy","title":"model_copy","text":"model_copy\n\n\n\nUpdateICTFixturesRequest.model_copy(*, update=None, deep=False)\n\n!!! abstract “Usage Documentation”\n\n[model_copy](../concepts/serialization.md#model_copy)\n\nReturns a copy of the model.\n\n!!! note\n\nThe underlying instance’s [__dict__][object.__dict__] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property]).\n\nParameters\n\nupdate (Mapping[str, Any] | None) – Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\n\ndeep (bool) – Set to True to make a deep copy of the model.\n\nReturn type\n\nSelf\n\nReturns\n\nNew model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Contribute","href":"contributing.html#contribute","title":"Contribute","text":"Contribute\n\nOverall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar with\nthis guide before attempting to contribute to PySherlock.\n\nThe following contribution information is specific to PySherlock."},{"objectID":"Contribute","href":"contributing.html#post-issues","title":"Contribute > Post issues","text":"Post issues\n\nUse the PySherlock Issues\npage to submit questions, report bugs, and request new features. When possible, you\nshould use these issue templates:\n\nBug report template\n\nFeature request template\n\nIf your issue does not fit into these categories, create your own issue.\n\nTo reach the PyAnsys team, email pyansys.core@ansys.com."},{"objectID":"Contribute","href":"contributing.html#view-documentation","title":"Contribute > View documentation","text":"View documentation\n\nDocumentation for the latest stable release of PySherlock is hosted at\nPySherlock Documentation.\n\nIn the upper right corner of the documentation’s title bar, there is an option\nfor switching from viewing the documentation for the latest stable release to\nviewing the documentation for the development version or previously released versions."},{"objectID":"Contribute","href":"contributing.html#code-style","title":"Contribute > Code style","text":"Code style\n\nPySherlock follows the PEP8 standard as outlined in the PyAnsys Development Guide and implements style checking using\npre-commit.\n\nTo ensure your code meets minimum code styling standards, run:\n\nYou can also install this as a pre-commit hook by running:\n\nThis way, it’s not possible for you to push code that fails the style checks. For example:"},{"objectID":"Contribute","href":"contributing.html#install-the-package","title":"Contribute > Install the package","text":"Install the package\n\nPySherlock has three installation modes: user, developer, and offline."},{"objectID":"Contribute","href":"contributing.html#install-in-user-mode","title":"Contribute > Install in user mode","text":"Install in user mode\n\nBefore installing PySherlock in user mode, use this command to make sure that\nyou have the latest version of pip:\n\nThen, use this command to install PySherlock:"},{"objectID":"Contribute","href":"contributing.html#install-in-developer-mode","title":"Contribute > Install in developer mode","text":"Install in developer mode\n\nTo install PySherlock in developer mode, run these commands:\n\nThen run this command:\n\nDetails\n\nInstalling PySherlock in developer mode allows you to modify the source\nand enhance it.\n\nBefore contributing to the project, see the PyAnsys Developer’s\nguide. You must follow these steps:\n\nStart by cloning this repository:\n\nCreate a fresh-clean Python environment and activate it:\n\nIf you require additional information on virtual environments, see the\nofficial Python venv topic.\n\nTo make sure you have the latest version of pip,\nrun this command:\n\nInstall the project in editable mode by running the following commands:"},{"objectID":"Contribute","href":"contributing.html#install-in-offline-mode","title":"Contribute > Install in offline mode","text":"Install in offline mode\n\nIf you lack an internet connection on your installation machine (or you do not have access to the\nprivate Ansys PyPI packages repository), you should install PySherlock by downloading the wheelhouse\narchive from the Releases Page for your\ncorresponding machine architecture.\n\nEach wheelhouse archive contains all the Python wheels necessary to install PySherlock from scratch on Windows,\nLinux, and MacOS from Python 3.10 to 3.13. You can install this on an isolated system with a fresh Python\ninstallation or on a virtual environment.\n\nFor example, on Linux with Python 3.10, unzip the wheelhouse archive and install it with:\n\nIf you’re on Windows with Python 3.10, unzip to a wheelhouse directory and install using the preceding command.\n\nConsider installing using a virtual environment."},{"objectID":"Contribute","href":"contributing.html#testing","title":"Contribute > Testing","text":"Testing\n\nThis project takes advantage of tox. This tool automates common\ndevelopment tasks (similar to Makefile), but it is oriented towards Python\ndevelopment."},{"objectID":"Contribute","href":"contributing.html#using-tox","title":"Contribute > Using tox","text":"Using tox\n\nWhile Makefile has rules, tox has environments. In fact, tox creates its\nown virtual environment so that anything being tested is isolated from the project\nto guarantee the project’s integrity.\n\nThe following environments commands are provided:\n\ntox -e style: Checks for coding style quality.\n\ntox -e py: Checks for unit tests.\n\ntox -e py-coverage: Checks for unit testing and code coverage.\n\ntox -e doc: Checks for successfully building the documentation."},{"objectID":"Contribute","href":"contributing.html#raw-testing","title":"Contribute > Raw testing","text":"Raw testing\n\nPySherlock also makes use of PyTest,\nwhich can be easily run by using this command to install the tests target:\n\nOnce the dependencies are installed in your project, you can simply execute the\nfollowing command to run the PySherlock tests:"},{"objectID":"Contribute","href":"contributing.html#documentation","title":"Contribute > Documentation","text":"Documentation\n\nFor building documentation, you can run the usual rules provided in the\nSphinx Makefile, such as:\n\nHowever, the recommended way of checking documentation integrity is to use\ntox:"},{"objectID":"Contribute","href":"contributing.html#distributing","title":"Contribute > Distributing","text":"Distributing\n\nIf you would like to create either source or wheel files, start by installing\nthe building requirements and then executing the build module with these commands:\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.model_computed_fields.html#model_computed_fields","title":"model_computed_fields","text":"model_computed_fields\n\n\n\nPottingRegionDeleteData.model_computed_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.length.html#length","title":"length","text":"length\n\n\n\nRectangularShape.length: float\n\nfloat\n\nType\n\nLength\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.update_forward_refs.html#update_forward_refs","title":"update_forward_refs","text":"update_forward_refs\n\n\n\nclassmethod OutlineFile.update_forward_refs(**localns)\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.model_post_init.html#model_post_init","title":"model_post_init","text":"model_post_init\n\n\n\nOutlineFile.model_post_init(context, /)\n\nOverride this method to perform additional initialization after __init__ and model_construct.\nThis is useful if you want to do some validation that requires the entire model to be initialized.\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.update_forward_refs.html#update_forward_refs","title":"update_forward_refs","text":"update_forward_refs\n\n\n\nclassmethod PolygonalShape.update_forward_refs(**localns)\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.model_construct.html#model_construct","title":"model_construct","text":"model_construct\n\n\n\nclassmethod PottingRegionCopyData.model_construct(_fields_set=None, **values)\n\nCreates a new instance of the Model class with validated data.\n\nCreates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n\nmodel_construct() generally respects the model_config.extra setting on the provided model.\nThat is, if model_config.extra == ‘allow’, then all extra passed values are added to the model instance’s __dict__\nand __pydantic_extra__ fields. If model_config.extra == ‘ignore’ (the default), then all extra passed values are ignored.\nBecause no validation is performed with a call to model_construct(), having model_config.extra == ‘forbid’ does not result in\nan error if extra values are passed, but they will be ignored.\n\nParameters\n\n_fields_set (set[str] | None) – A set of field names that were originally explicitly set during instantiation. If provided,\nthis is directly used for the [model_fields_set][pydantic.BaseModel.model_fields_set] attribute.\nOtherwise, the field names from the values argument will be used.\n\nvalues (Any) – Trusted or pre-validated data dictionary.\n\nReturn type\n\nSelf\n\nReturns\n\nA new instance of the Model class with validated data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.potting_region_id_to_update.html#potting_region_id_to_update","title":"potting_region_id_to_update","text":"potting_region_id_to_update\n\n\n\nPottingRegionUpdateData.potting_region_id_to_update: str\n\nID of the potting region to update.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.model_fields_set.html#model_fields_set","title":"model_fields_set","text":"model_fields_set\n\n\n\nproperty GerberOutlineFile.model_fields_set: set[str]\n\nReturns the set of fields that have been explicitly set on this model instance.\n\nReturns\n\nA set of strings representing the fields that have been set,\n\ni.e. that were not filled from defaults.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.model_computed_fields.html#model_computed_fields","title":"model_computed_fields","text":"model_computed_fields\n\n\n\nGetICTFixturesPropertiesRequest.model_computed_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.copy.html#copy","title":"copy","text":"copy\n\n\n\nPottingRegionCopyData.copy(*, include=None, exclude=None, update=None, deep=False)\n\nReturns a copy of the model.\n\n!!! warning “Deprecated”\n\nThis method is now deprecated; use model_copy instead.\n\nIf you need include or exclude, use:\n\n`python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n`\n\nParameters\n\ninclude – Optional set or mapping specifying which fields to include in the copied model.\n\nexclude – Optional set or mapping specifying which fields to exclude in the copied model.\n\nupdate – Optional dictionary of field-value pairs to override field values in the copied model.\n\ndeep – If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns\n\nA copy of the model with included, excluded and updated fields as specified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.html#ansyssherlockcoretypeslayer_typespottingregion","title":"ansys.sherlock.core.types.layer_types.PottingRegion","text":"ansys.sherlock.core.types.layer_types.PottingRegion\n\n\n\nclass ansys.sherlock.core.types.layer_types.PottingRegion(**data)\n\nContains the properties of a Potting Region add or update request.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.parse_obj.html#parse_obj","title":"parse_obj","text":"parse_obj\n\n\n\nclassmethod ICTFixtureProperties.parse_obj(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.model_dump.html#model_dump","title":"model_dump","text":"model_dump\n\n\n\nPottingRegionUpdateData.model_dump(*, mode='python', include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump](../concepts/serialization.md#modelmodel_dump)\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nParameters\n\nmode (Union[Literal['json', 'python'], str]) – The mode in which to_python should run.\nIf mode is ‘json’, the output will only contain JSON serializable types.\nIf mode is ‘python’, the output may contain non-JSON-serializable Python objects.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to include in the output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to exclude from the output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to use the field’s alias in the dictionary key if defined.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nA dictionary representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.model_json_schema.html#model_json_schema","title":"model_json_schema","text":"model_json_schema\n\n\n\nclassmethod UpdatePottingRegionRequest.model_json_schema(by_alias=True, ref_template='#/$defs/{model}', schema_generator=<class 'pydantic.json_schema.GenerateJsonSchema'>, mode='validation')\n\nGenerates a JSON schema for a model class.\n\nParameters\n\nby_alias (bool) – Whether to use attribute aliases or not.\n\nref_template (str) – The reference template.\n\nschema_generator (type[GenerateJsonSchema]) – To override the logic used to generate the JSON schema, as a subclass of\nGenerateJsonSchema with your desired modifications\n\nmode (Literal['validation', 'serialization']) – The mode in which to generate the schema.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nThe JSON schema for the given model class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.model_extra.html#model_extra","title":"model_extra","text":"model_extra\n\n\n\nproperty GerberOutlineFile.model_extra: dict[str, Any] | None\n\nGet extra fields set during validation.\n\nReturns\n\nA dictionary of extra fields, or None if config.extra is not set to “allow”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.LegendBounds.legend_x.html#legend_x","title":"legend_x","text":"legend_x\n\n\n\nLegendBounds.legend_x\n\nx coordinate of the upper left corner\n\nType\n\nfloat\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.common.Common.get_sherlock_info.html#get_sherlock_info","title":"get_sherlock_info","text":"get_sherlock_info\n\n\n\nCommon.get_sherlock_info()\n\nGet server Sherlock version.\n\nReturns\n\n:\n\n\n\nSherlockInfoResponse\n\nSherlock information containing\nreleaseVersion, defaultProjectDir and isSingleProjectMode flag\n\nReturn type\n\nstr\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> release_version = sherlock.common.get_sherlock_info().releaseVersion\n>>> default_dir = sherlock.common.get_sherlock_info().defaultProjectDir\n>>> is_single_project = sherlock.common.get_sherlock_info().isSingleProjectMode\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.layer.Layer.delete_modeling_region.html#delete_modeling_region","title":"delete_modeling_region","text":"delete_modeling_region\n\n\n\nLayer.delete_modeling_region(project, delete_regions)\n\nDelete one or more modeling regions for a specific project.\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ndelete_regions: list[dict[str, str]]\n\nModeling regions to delete. Each dictionary should contain:\n- “cca_name”: str, Name of the CCA.\n- “region_id”: str, Unique region ID of the modeling region to delete.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n>>>     \"ODB++ Tutorial.tgz\",\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     project=\"Test\",\n>>>     cca_name=\"Card\",\n>>> )\n>>> modeling_regions = [{\"cca_name\": \"Card\", \"region_id\": \"12345\"}]\n>>> sherlock.layer.delete_modeling_region(\"Test\", modeling_regions)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.validate.html#validate","title":"validate","text":"validate\n\n\n\nclassmethod CopyPottingRegionRequest.validate(value)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.model_fields.html#model_fields","title":"model_fields","text":"model_fields\n\n\n\nTestPointProperties.model_fields = {'center_x': FieldInfo(annotation=float, required=True), 'center_y': FieldInfo(annotation=float, required=True), 'id': FieldInfo(annotation=str, required=True), 'load_type': FieldInfo(annotation=int, required=True), 'load_units': FieldInfo(annotation=str, required=True), 'load_value': FieldInfo(annotation=float, required=True), 'radius': FieldInfo(annotation=float, required=True), 'side': FieldInfo(annotation=str, required=True), 'units': FieldInfo(annotation=str, required=True)}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelFile.numeric_format.html#numeric_format","title":"numeric_format","text":"numeric_format\n\n\n\nCsvExcelFile.numeric_format\n\nnumeric_format\n\nType\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.potting_units.html#potting_units","title":"potting_units","text":"potting_units\n\n\n\nPottingRegion.potting_units: str\n\nThe units to use for the potting region.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.parse_file.html#parse_file","title":"parse_file","text":"parse_file\n\n\n\nclassmethod CopyPottingRegionRequest.parse_file(path, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.model_config.html#model_config","title":"model_config","text":"model_config\n\n\n\nRectangularShape.model_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.model_json_schema.html#model_json_schema","title":"model_json_schema","text":"model_json_schema\n\n\n\nclassmethod UpdateTestPointsRequest.model_json_schema(by_alias=True, ref_template='#/$defs/{model}', schema_generator=<class 'pydantic.json_schema.GenerateJsonSchema'>, mode='validation')\n\nGenerates a JSON schema for a model class.\n\nParameters\n\nby_alias (bool) – Whether to use attribute aliases or not.\n\nref_template (str) – The reference template.\n\nschema_generator (type[GenerateJsonSchema]) – To override the logic used to generate the JSON schema, as a subclass of\nGenerateJsonSchema with your desired modifications\n\nmode (Literal['validation', 'serialization']) – The mode in which to generate the schema.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nThe JSON schema for the given model class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.from_orm.html#from_orm","title":"from_orm","text":"from_orm\n\n\n\nclassmethod ICTFixtureProperties.from_orm(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.json.html#json","title":"json","text":"json\n\n\n\nGetICTFixturesPropertiesRequest.json(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.model_parametrized_name.html#model_parametrized_name","title":"model_parametrized_name","text":"model_parametrized_name\n\n\n\nclassmethod PottingRegionCopyData.model_parametrized_name(params)\n\nCompute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nParameters\n\nparams (tuple[type[Any], ...]) – Tuple of types of the class. Given a generic class\nModel with 2 type variables and a concrete model Model[str, int],\nthe value (str, int) would be passed to params.\n\nReturn type\n\nstr\n\nReturns\n\nString representing the new class where params are passed to cls as type variables.\n\nRaises\n\nTypeError – Raised when trying to generate concrete names for non-generic models.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_odb_archive.html#import-odb-archive","title":"Import ODB++ Archive","text":"Import ODB++ Archive\n\nThis example demonstrates how to launch the Sherlock gRPC service, import an ODB++ archive,\nand handle common exceptions during the import process.\n\nDescription\nSherlock’s gRPC API enables automation of various workflows, including importing ODB++ archives.\nThis script demonstrates how to:\n- Connect to the Sherlock service.\n- Import an ODB++ archive.\n- Handle import errors gracefully."},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_odb_archive.html#connect-to-sherlock","title":"Import ODB++ Archive > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_odb_archive.html#delete-project","title":"Import ODB++ Archive > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_odb_archive.html#import-odb-archive","title":"Import ODB++ Archive","text":"Import ODB++ Archive\n\nImport an ODB++ archive provided with the Sherlock installation.\n\n\n\nDownload Jupyter notebook: import_odb_archive.ipynb\n\nDownload Python source code: import_odb_archive.py\n\nDownload zipped: import_odb_archive.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.model_validate_strings.html#model_validate_strings","title":"model_validate_strings","text":"model_validate_strings\n\n\n\nclassmethod CopperFile.model_validate_strings(obj, *, strict=None, context=None, by_alias=None, by_name=None)\n\nValidate the given object with string data against the Pydantic model.\n\nParameters\n\nobj (Any) – The object containing string data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.construct.html#construct","title":"construct","text":"construct\n\n\n\nclassmethod PottingRegionDeleteData.construct(_fields_set=None, **values)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.model_config.html#model_config","title":"model_config","text":"model_config\n\n\n\nSlotShape.model_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.project.Project.import_GDSII_file.html#import_gdsii_file","title":"import_GDSII_file","text":"import_GDSII_file\n\n\n\nProject.import_GDSII_file(request)\n\nImport a GDSII project file and any optional config files.\n\nAvailable Since: 2025R2\n\nParameters\n\nrequest\n\nImportGDSIIRequest\n\nContains the information needed to import the GDSII project file and any optional\nconfig files.\n\nReturns\n\n:\n\n\n\nReturnCode\n\nStatus of the GDSII file import.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.types.project_types import ImportGDSIIRequest\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> return_code = sherlock.project.import_GDSII_file(\n>>>     ImportGDSIIRequest(\n>>>         gdsii_file=\"path/to/design.gds\",\n>>>         technology_file=\"path/to/tech.xml\",\n>>>         layer_map_file=\"path/to/layer.map\",\n>>>         project=\"TestProject\",\n>>>         cca_name=\"TestCCA\",\n>>>         guess_part_properties=True,\n>>>         polyline_simplification_enabled=True,\n>>>         polyline_tolerance=0.01,\n>>>         polyline_tolerance_units=\"mm\",\n>>>     )\n>>> )\n>>> print(f\"Import result: {return_code}\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/02-importing/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 5 files from examplesgallery_examples02-importing:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_gallery_examples_02-importing_import_ipc_2581_archive.py (import_ipc_2581_archive.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_02-importing_import_odb_archive.py (import_odb_archive.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_02-importing_import_parts_list.py (import_parts_list.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_02-importing_import_project_zip_archive_single_mode.py (import_project_zip_archive_single_mode.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_02-importing_import_project_zip_file.py (import_project_zip_file.py)\n\n00:00.000\n\n0.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.load_type.html#load_type","title":"load_type","text":"load_type\n\n\n\nTestPointProperties.load_type: int\n\nLoad type\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.schema.html#schema","title":"schema","text":"schema\n\n\n\nclassmethod UpdatePottingRegionRequest.schema(by_alias=True, ref_template='#/$defs/{model}')\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.model_rebuild.html#model_rebuild","title":"model_rebuild","text":"model_rebuild\n\n\n\nclassmethod GerberOutlineFile.model_rebuild(*, force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace=None)\n\nTry to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nParameters\n\nforce (bool) – Whether to force the rebuilding of the model schema, defaults to False.\n\nraise_errors (bool) – Whether to raise errors, defaults to True.\n\n_parent_namespace_depth (int) – The depth level of the parent namespace, defaults to 2.\n\n_types_namespace (Mapping[str, Any] | None) – The types namespace, defaults to None.\n\nReturn type\n\nbool | None\n\nReturns\n\nReturns None if the schema is already “complete” and rebuilding was not required.\nIf rebuilding _was_ required, returns True if rebuilding was successful, otherwise False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.model_computed_fields.html#model_computed_fields","title":"model_computed_fields","text":"model_computed_fields\n\n\n\nDeletePottingRegionRequest.model_computed_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.rotation.html#rotation","title":"rotation","text":"rotation\n\n\n\nPolygonalShape.rotation: float\n\nfloat\n\nType\n\nRotation (in degrees)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.model_json_schema.html#model_json_schema","title":"model_json_schema","text":"model_json_schema\n\n\n\nclassmethod SlotShape.model_json_schema(by_alias=True, ref_template='#/$defs/{model}', schema_generator=<class 'pydantic.json_schema.GenerateJsonSchema'>, mode='validation')\n\nGenerates a JSON schema for a model class.\n\nParameters\n\nby_alias (bool) – Whether to use attribute aliases or not.\n\nref_template (str) – The reference template.\n\nschema_generator (type[GenerateJsonSchema]) – To override the logic used to generate the JSON schema, as a subclass of\nGenerateJsonSchema with your desired modifications\n\nmode (Literal['validation', 'serialization']) – The mode in which to generate the schema.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nThe JSON schema for the given model class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.model_dump.html#model_dump","title":"model_dump","text":"model_dump\n\n\n\nGerberOutlineFile.model_dump(*, mode='python', include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump](../concepts/serialization.md#modelmodel_dump)\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nParameters\n\nmode (Union[Literal['json', 'python'], str]) – The mode in which to_python should run.\nIf mode is ‘json’, the output will only contain JSON serializable types.\nIf mode is ‘python’, the output may contain non-JSON-serializable Python objects.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to include in the output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to exclude from the output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to use the field’s alias in the dictionary key if defined.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nA dictionary representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.analysis.Analysis.update_semiconductor_wearout_props.html#update_semiconductor_wearout_props","title":"update_semiconductor_wearout_props","text":"update_semiconductor_wearout_props\n\n\n\nAnalysis.update_semiconductor_wearout_props(request)\n\nUpdate properties for one or more Semiconductor Wearout Analysis.\n\nParameters\n\nrequest: UpdateSemiconductorWearoutAnalysisPropsRequest\n\nContains all the information needed to update the properties for one or more\nsemiconductor wearout analyses per project.\n\nReturns\n\n:\n\n\n\npython:list[SherlockCommonService_pb2.ReturnCode]\n\nReturn codes for each request.\n\nReturn type\n\nlist[ReturnCode]\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> from ansys.sherlock.core.types.analysis_types import (\n    SemiconductorWearoutAnalysis,\n    UpdateSemiconductorWearoutAnalysisPropsRequest,\n)\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_project_zip_archive(\n    project=\"Assembly Tutorial\",\n    category=\"category\",\n    archive_file=\\\n        \"C:\\\\Program Files\\\\ANSYS Inc\\\\v252\\\\sherlock\\\\tutorial\\\\Assembly Tutorial.zip\",\n)\n>>> update_request1 = SemiconductorWearoutAnalysis(\n    cca_name=\"Main Board\",\n    max_feature_size=1.5,\n    max_feature_size_units=\"mm\",\n    part_temp_rise=10.0,\n    part_temp_rise_units=\"C\",\n    part_temp_rise_min_enabled=True,\n    part_validation_enabled=False,\n)\n>>> update_request2 = SemiconductorWearoutAnalysis(\n    cca_name=\"Memory Card 1\",\n    max_feature_size=2.0,\n    max_feature_size_units=\"mm\",\n    part_temp_rise=15.0,\n    part_temp_rise_units=\"C\",\n    part_temp_rise_min_enabled=False,\n    part_validation_enabled=True,\n)\n>>> request = UpdateSemiconductorWearoutAnalysisPropsRequest(\n    project=\"Test\",\n    semiconductor_wearout_analysis_properties=[\n        update_request1,\n        update_request2\n    ]\n)\n>>> return_codes = sherlock.analysis.update_semiconductor_wearout_props(request)\n>>> for return_code in return_codes:\n        print(f\"Return code: value={return_code.value}, message={return_code.message}\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.parts.Parts.get_part_location.html#get_part_location","title":"get_part_location","text":"get_part_location\n\n\n\nParts.get_part_location(project, cca_name, ref_des, location_units)\n\nReturn the location properties for one or more part.\n\nAvailable Since: 2022R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nref_des: str\n\nComma separated list of reference designators of parts to retrieve locations for.\n\nlocation_units: str\n\nValid units for a part’s location.\n\nReturns\n\n:\n\n\n\npython:list[PartLocation]\n\nPartLocation for each part that corresponds to the reference designators.\n\nReturn type\n\nlist[PartLocation]\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> part_locations = sherlock.parts.get_part_location(\n    project=\"Test\",\n    cca_name=\"Card\",\n    ref_des=\"C1,C2\",\n    location_units=\"in\",\n)\n>>> print(f\"{part_locations}\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.parse_raw.html#parse_raw","title":"parse_raw","text":"parse_raw\n\n\n\nclassmethod PottingRegionUpdateData.parse_raw(b, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.ImageBounds.image_y.html#image_y","title":"image_y","text":"image_y\n\n\n\nImageBounds.image_y\n\ny coordinate of the upper left corner\n\nType\n\nfloat\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.ImageFile.board_bounds.html#board_bounds","title":"board_bounds","text":"board_bounds\n\n\n\nImageFile.board_bounds\n\nboard_bounds\n\nType\n\nBoardBounds\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.parts.Parts.get_parts_list_properties.html#get_parts_list_properties","title":"get_parts_list_properties","text":"get_parts_list_properties\n\n\n\nParts.get_parts_list_properties(request)\n\nReturn the properties for one or more parts in the parts list for the CCA.\n\nAvailable Since: 2025R2\n\nParameters\n\nrequest: GetPartsListPropertiesRequest\n\nContains the information needed to retrieve the properties of parts in the parts list.\n\nReturns\n\n:\n\n\n\npython:list[SherlockPartsService_pb2.GetPartsListPropertiesResponse]\n\nProperties for each part that corresponds to the reference designators.\n\nReturn type\n\nlist[GetPartsListPropertiesResponse]\n\nExamples\n\n>>> from ansys.sherlock.core.types.parts_types import (GetPartsListPropertiesRequest)\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n>>>    \"ODB++ Tutorial.tgz\",\n>>>    True,\n>>>    True,\n>>>    True,\n>>>    True,\n>>>    project=\"Test\",\n>>>    cca_name=\"Card\",\n>>> )\n>>> part_properties = sherlock.parts.get_parts_list_properties(\n>>>     GetPartsListPropertiesRequest(\n>>>         project=\"Test\",\n>>>         cca_name=\"Card\",\n>>>         reference_designators=[\"C1\",\"U9\"]\n>>>     )\n>>> )\n>>> print(f\"{part_properties}\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.ImageFile.legend_bounds.html#legend_bounds","title":"legend_bounds","text":"legend_bounds\n\n\n\nImageFile.legend_bounds\n\nlegend_bounds\n\nType\n\nLegendBounds\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.model_dump.html#model_dump","title":"model_dump","text":"model_dump\n\n\n\nUpdateICTFixturesRequest.model_dump(*, mode='python', include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump](../concepts/serialization.md#modelmodel_dump)\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nParameters\n\nmode (Union[Literal['json', 'python'], str]) – The mode in which to_python should run.\nIf mode is ‘json’, the output will only contain JSON serializable types.\nIf mode is ‘python’, the output may contain non-JSON-serializable Python objects.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to include in the output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to exclude from the output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to use the field’s alias in the dictionary key if defined.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nA dictionary representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.model_post_init.html#model_post_init","title":"model_post_init","text":"model_post_init\n\n\n\nPolygonalShape.model_post_init(context, /)\n\nOverride this method to perform additional initialization after __init__ and model_construct.\nThis is useful if you want to do some validation that requires the entire model to be initialized.\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.layer.Layer.list_layers.html#list_layers","title":"list_layers","text":"list_layers\n\n\n\nLayer.list_layers(project, cca_name)\n\nList all layers as seen in the Layer Viewer for a specific project CCA.\n\nParameters\n\nproject\n\npython:str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nReturns\n\n:\n\n\n\nlayer_infos: python:list[python:dict[python:str, python:list]]\n\nThe layers as seen in the Layer Viewer for the given project CCA.\nEach dictionary should contain:\n\n“layer_folder”: str, name of layer_folder enum.\n\n“layers”: list, list of names of layers under this folder\n\nReturn type\n\nlist\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n>>>     \"ODB++ Tutorial.tgz\",\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     project=\"Tutorial Project\",\n>>>     cca_name=\"Card\"\n>>> )\n>>> sherlock.layer.list_layers(\n>>>     project=\"Tutorial Project\",\n>>>     cca_name=\"Card\"\n>>> )\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.model_computed_fields.html#model_computed_fields","title":"model_computed_fields","text":"model_computed_fields\n\n\n\nPottingRegionUpdateData.model_computed_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.model_fields_set.html#model_fields_set","title":"model_fields_set","text":"model_fields_set\n\n\n\nproperty PottingRegionUpdateData.model_fields_set: set[str]\n\nReturns the set of fields that have been explicitly set on this model instance.\n\nReturns\n\nA set of strings representing the fields that have been set,\n\ni.e. that were not filled from defaults.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.parse_file.html#parse_file","title":"parse_file","text":"parse_file\n\n\n\nclassmethod UpdateTestPointsRequest.parse_file(path, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.schema.html#schema","title":"schema","text":"schema\n\n\n\nclassmethod GetTestPointPropertiesRequest.schema(by_alias=True, ref_template='#/$defs/{model}')\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/layer.html#layer","title":"Layer","text":"Layer\n\n\n\nModule containing all layer management capabilities.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.model_construct.html#model_construct","title":"model_construct","text":"model_construct\n\n\n\nclassmethod RectangularShape.model_construct(_fields_set=None, **values)\n\nCreates a new instance of the Model class with validated data.\n\nCreates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n\nmodel_construct() generally respects the model_config.extra setting on the provided model.\nThat is, if model_config.extra == ‘allow’, then all extra passed values are added to the model instance’s __dict__\nand __pydantic_extra__ fields. If model_config.extra == ‘ignore’ (the default), then all extra passed values are ignored.\nBecause no validation is performed with a call to model_construct(), having model_config.extra == ‘forbid’ does not result in\nan error if extra values are passed, but they will be ignored.\n\nParameters\n\n_fields_set (set[str] | None) – A set of field names that were originally explicitly set during instantiation. If provided,\nthis is directly used for the [model_fields_set][pydantic.BaseModel.model_fields_set] attribute.\nOtherwise, the field names from the values argument will be used.\n\nvalues (Any) – Trusted or pre-validated data dictionary.\n\nReturn type\n\nSelf\n\nReturns\n\nA new instance of the Model class with validated data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.str_validation.html#str_validation","title":"str_validation","text":"str_validation\n\n\n\nclassmethod UpdateTestPointsRequest.str_validation(value, info)\n\nValidate string fields listed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_parts_list.html#import-parts-list","title":"Import Parts List","text":"Import Parts List\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nand import parts lists."},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_parts_list.html#description","title":"Import Parts List > Description","text":"Description\n\nSherlock’s gRPC API allows users to automate workflows such as importing ODB++\narchives and parts lists.\nThis script demonstrates how to:\n- Connect to the Sherlock service.\n- Import a project.\n- Import parts lists with different settings.\n\nThese functionalities enable users to prepare projects with ECAD data and associated parts lists\nfor further analysis."},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_parts_list.html#connect-to-sherlock","title":"Import Parts List > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_parts_list.html#delete-project","title":"Import Parts List > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_parts_list.html#import-tutorial-project","title":"Import Parts List > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_parts_list.html#import-parts-list","title":"Import Parts List","text":"Import Parts List\n\nImport parts list for the “Test” project and “Card” CCA.\n\n\n\nDownload Jupyter notebook: import_parts_list.ipynb\n\nDownload Python source code: import_parts_list.py\n\nDownload zipped: import_parts_list.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.common.Common.check.html#check","title":"check","text":"check\n\n\n\nCommon.check()\n\nPerform a health check on the gRPC connection.\n\nReturns\n\n:\n\n\n\nbool\n\nWhether the Sherlock client is connected via gRPC.\n\nReturn type\n\nbool\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.copy.html#copy","title":"copy","text":"copy\n\n\n\nCopperGerberFile.copy(*, include=None, exclude=None, update=None, deep=False)\n\nReturns a copy of the model.\n\n!!! warning “Deprecated”\n\nThis method is now deprecated; use model_copy instead.\n\nIf you need include or exclude, use:\n\n`python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n`\n\nParameters\n\ninclude – Optional set or mapping specifying which fields to include in the copied model.\n\nexclude – Optional set or mapping specifying which fields to exclude in the copied model.\n\nupdate – Optional dictionary of field-value pairs to override field values in the copied model.\n\ndeep – If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns\n\nA copy of the model with included, excluded and updated fields as specified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.schema.html#schema","title":"schema","text":"schema\n\n\n\nclassmethod CopperGerberFile.schema(by_alias=True, ref_template='#/$defs/{model}')\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.json.html#json","title":"json","text":"json\n\n\n\nICTFixtureProperties.json(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.model_construct.html#model_construct","title":"model_construct","text":"model_construct\n\n\n\nclassmethod OutlineFile.model_construct(_fields_set=None, **values)\n\nCreates a new instance of the Model class with validated data.\n\nCreates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n\nmodel_construct() generally respects the model_config.extra setting on the provided model.\nThat is, if model_config.extra == ‘allow’, then all extra passed values are added to the model instance’s __dict__\nand __pydantic_extra__ fields. If model_config.extra == ‘ignore’ (the default), then all extra passed values are ignored.\nBecause no validation is performed with a call to model_construct(), having model_config.extra == ‘forbid’ does not result in\nan error if extra values are passed, but they will be ignored.\n\nParameters\n\n_fields_set (set[str] | None) – A set of field names that were originally explicitly set during instantiation. If provided,\nthis is directly used for the [model_fields_set][pydantic.BaseModel.model_fields_set] attribute.\nOtherwise, the field names from the values argument will be used.\n\nvalues (Any) – Trusted or pre-validated data dictionary.\n\nReturn type\n\nSelf\n\nReturns\n\nA new instance of the Model class with validated data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.model_fields.html#model_fields","title":"model_fields","text":"model_fields\n\n\n\nUpdatePottingRegionRequest.model_fields = {'project': FieldInfo(annotation=str, required=True), 'update_potting_regions': FieldInfo(annotation=list[PottingRegionUpdateData], required=True)}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.parts.Parts.update_parts_list.html#update_parts_list","title":"update_parts_list","text":"update_parts_list\n\n\n\nParts.update_parts_list(project, cca_name, part_library, matching_mode, duplication_mode)\n\nUpdate a parts list based on matching and duplication preferences.\n\nAvailable Since: 2021R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\npart_library: str\n\nName of the parts library.\n\nmatching_mode: str\n\nMatching mode for updates.\n\nduplication_mode: PartsListSearchDuplicationMode\n\nHow to handle duplication during the update.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> import SherlockCommonService_pb2\n>>> import SherlockPartsService_pb2\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n>>> \"ODB++ Tutorial.tgz\",\n>>> True,\n>>> True,\n>>> True,\n>>> True,\n>>> project=\"Test\",\n>>> cca_name=\"Card\",\n>>> )\n>>> sherlock.parts.update_parts_list(\n>>> \"Test\",\n>>> \"Card\",\n>>> \"Sherlock Part Library\",\n>>> SherlockCommonService_pb2.MatchingMode.Both,\n>>> SherlockPartsService_pb2.DuplicationMode.Error,\n>>> )\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.lifecycle.Lifecycle.add_thermal_profiles.html#add_thermal_profiles","title":"add_thermal_profiles","text":"add_thermal_profiles\n\n\n\nLifecycle.add_thermal_profiles(project, thermal_profiles)\n\nAdd thermal profiles to a life cycle phase.\n\nAvailable Since: 2023R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\nthermal_profiles: list[tuple[str, str, str, str, str, list[tuple[str, str, float, float]]]]\n\nThermal profiles consisting of these properties:\n\nphase_name: str\n\nName of the life cycle phase to add the thermal profile to.\n\nevent_name: str\n\nName of the thermal event.\n\nprofile_name: str\n\nName of the thermal profile.\n\ntime_units: str\n\nTime units. Options are \"ms\", \"sec\", \"min\", \"hr\",\n\"day\", and \"year\".\n\ntemp_units: str\n\nTemperature units. Options are \"C\", \"F\", and \"K\".\n\nthermal_profile_entries: list[tuple[str, str, float, float]]\n\nThermal profile entries consisting of these properties:\n\nstep: str\n\nName of the thermal step.\n\ntype: str\n\nType of the thermal step. Options are \"HOLD\" and \"RAMP\".\n\ntime: float\n\nDuration of the thermal step expressed in time units.\n\ntemperature: float\n\nTemperature of the step expressed in temperature units.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n)\n>>> sherlock.lifecycle.create_life_phase(\n    \"Test\",\n    \"Example\",\n    1.5,\n    \"year\",\n    4.0,\n    \"COUNT\",\n)\n>>> sherlock.lifecycle.add_thermal_event(\n    \"Test\",\n    \"Example\",\n    \"Event1\",\n    4.0,\n    \"PER YEAR\",\n    \"STORAGE\",\n)\n>>> sherlock.lifecycle.add_thermal_profiles(\n    \"Test\",\n    [(\n        \"Example\",\n        \"Event1\",\n        \"Profile1\",\n        \"sec\",\n        \"F\",\n        [\n            (\"Steady1\", \"HOLD\", 40, 40),\n            (\"Steady\", \"HOLD\", 20, 20),\n            (\"Back\", \"RAMP\", 20, 40),\n        ],\n    )]\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.cca_name.html#cca_name","title":"cca_name","text":"cca_name\n\n\n\nUpdateTestPointsRequest.cca_name: str\n\nName of the Sherlock CCA.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.parse_raw.html#parse_raw","title":"parse_raw","text":"parse_raw\n\n\n\nclassmethod CsvExcelOutlineFile.parse_raw(b, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.project.Project.add_project.html#add_project","title":"add_project","text":"add_project\n\n\n\nProject.add_project(project_name, project_category, project_description)\n\nAdd a sherlock project to sherlock.\n\nAvailable Since: 2024R1\n\nParameters\n\nproject_name: str\n\nName of the Sherlock project.\n\nproject_category: str\n\nCategory of the Sherlock project\n\nproject_description: str\n\nDescription of the Sherlock project\n\nReturns\n\n:\n\n\n\npython:int\n\n0 for success otherwise error\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> code = sherlock.project.add_project(\n    \"project name example\",\n    \"project category example\",\n    \"project description example\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.model_extra.html#model_extra","title":"model_extra","text":"model_extra\n\n\n\nproperty GetTestPointPropertiesRequest.model_extra: dict[str, Any] | None\n\nGet extra fields set during validation.\n\nReturns\n\nA dictionary of extra fields, or None if config.extra is not set to “allow”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.model_dump_json.html#model_dump_json","title":"model_dump_json","text":"model_dump_json\n\n\n\nUpdateTestPointsRequest.model_dump_json(*, indent=None, include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump_json](../concepts/serialization.md#modelmodel_dump_json)\n\nGenerates a JSON representation of the model using Pydantic’s to_json method.\n\nParameters\n\nindent (int | None) – Indentation to use in the JSON output. If None is passed, the output will be compact.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to include in the JSON output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to exclude from the JSON output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to serialize using field aliases.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\nstr\n\nReturns\n\nA JSON string representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"user_guide/index.html#user-guide","title":"User guide","text":"User guide\n\nThis section provides an overview of PySherlock and explains how to use it."},{"objectID":"Home","href":"user_guide/index.html#prerequisites","title":"User guide > Prerequisites","text":"Prerequisites\n\nFor installation instructions and information on launching Sherlock and the gRPC server,\nsee ref_getting_started. The Sherlock gRPC server must be running to use PySherlock."},{"objectID":"Home","href":"user_guide/index.html#pysherlock-services","title":"User guide > PySherlock services","text":"PySherlock services\n\nPySherlock methods are divided into modules that correspond to major Sherlock functional areas.\nFor descriptions of each module’s classes, methods, and functions, see ref_api_ref."},{"objectID":"Home","href":"user_guide/index.html#using-pysherlock","title":"User guide > Using PySherlock","text":"Using PySherlock\n\nAfter the Sherlock gRPC server is started, you can use PySherlock to perform Sherlock\nclient operations.\n\nSubsequent topics describe how to use PySherlock to automate the process depicted in this diagram:"},{"objectID":"Home","href":"user_guide/index.html#launch-sherlock","title":"User guide > Launch Sherlock","text":"Launch Sherlock\n\nUse the launch_sherlock()\nmethod to launch Sherlock and start the gRPC server on the default port:\n\nThis method returns the sherlock gRPC connection object, which is used to invoke\nthe APIs from their respective services."},{"objectID":"Home","href":"user_guide/index.html#import-odb-archive-file","title":"User guide > Import ODB++ archive file","text":"Import ODB++ archive file\n\nUse the import_odb_archive()\nmethod to import the ODB++ archive file (ODB++ Tutorial.tgz).\n\nThis code imports the archive file and creates a project named Tutorial with a CCA\nnamed Main Board:\n\nFor information on the project module and its methods, see ref_project_module."},{"objectID":"Home","href":"user_guide/index.html#update-parts-list","title":"User guide > Update parts list","text":"Update parts list\n\nUse the update_parts_list() method\nto update the parts list for the previously created CCA Main Board.\n\nThis code uses the Sherlock Part Library to update the parts list:\n\nFor information on the parts module and its methods, see ref_parts_module."},{"objectID":"Home","href":"user_guide/index.html#add-random-vibe-event","title":"User guide > Add random vibe event","text":"Add random vibe event\n\nUse the add_random_vibe_event()\nmethod to add a random vibe event:\n\nFor information on the lifecycle module and its methods, see ref_lifecycle_module."},{"objectID":"Home","href":"user_guide/index.html#add-random-vibe-profile","title":"User guide > Add random vibe profile","text":"Add random vibe profile\n\nUse the add_random_vibe_profiles()\nmethod to add a random vibe profile:\n\nFor information on the lifecycle module and its methods, see ref_lifecycle_module."},{"objectID":"Home","href":"user_guide/index.html#run-analysis","title":"User guide > Run analysis","text":"Run analysis\n\nUse the run_analysis() method\nto run a random vibe analysis:\n\nFor information on the analysis module and its methods, see ref_analysis_module."},{"objectID":"Home","href":"user_guide/index.html#generate-sherlock-report","title":"User guide > Generate Sherlock report","text":"Generate Sherlock report\n\nUse the generate_project_report()\nmethod to generate a Sherlock report for the project Tutorial and save it to a PDF file\nin C:\\Temp\\tutorial_project_report.pdf:\n\nFor information on the project module and its methods, see ref_project_module.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.schema.html#schema","title":"schema","text":"schema\n\n\n\nclassmethod PottingRegionCopyData.schema(by_alias=True, ref_template='#/$defs/{model}')\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.model_dump.html#model_dump","title":"model_dump","text":"model_dump\n\n\n\nCopperImageFile.model_dump(*, mode='python', include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump](../concepts/serialization.md#modelmodel_dump)\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nParameters\n\nmode (Union[Literal['json', 'python'], str]) – The mode in which to_python should run.\nIf mode is ‘json’, the output will only contain JSON serializable types.\nIf mode is ‘python’, the output may contain non-JSON-serializable Python objects.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to include in the output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to exclude from the output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to use the field’s alias in the dictionary key if defined.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nA dictionary representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/lifecycle_types.html#lifecycle-types","title":"LifeCycle Types","text":"LifeCycle Types\n\n\n\nModule containing types for the Lifecycle Service."},{"objectID":"Home","href":"api/lifecycle_types.html#constants","title":"LifeCycle Types > Constants","text":"Constants\n\n\n\nclass ansys.sherlock.core.types.lifecycle_types.ThermalSignalFileProperties(**data)\n\nProperties of a thermal signal file.\n\n\n\ncolumn_delimiter: str\n\nDelimiter used to separate columns in the file.\n\n\n\nheader_row_count: int\n\nNumber of rows before the column header in the file.\n\n\n\nmodel_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\nclassmethod non_negative_int_validation(value, info)\n\nValidate integer fields listed contain non-negative values.\n\n\n\nnumeric_format: str\n\nNumeric format for the values.\n\n\n\nclassmethod str_validation(value, info)\n\nValidate string fields listed.\n\n\n\ntemperature_column: str\n\nName of the column containing temperature values.\n\n\n\ntemperature_units: str\n\nUnits of the temperature values.\n\n\n\ntime_column: str\n\nName of the column containing time values.\n\n\n\ntime_units: str\n\nUnits of the time values.\n\n\n\nclass ansys.sherlock.core.types.lifecycle_types.ImportThermalSignalRequest(**data)\n\nRequest to import a thermal signal file.\n\n\n\nfile_name: str\n\nThe full path to the CSV thermal signal file to be imported.\n\n\n\ngenerated_cycles_label: str\n\nLabel used to define the name of all generated thermal events.\n\n\n\nload_range_percentage: float\n\nDefines the fraction of the range near peaks and valleys considered as a dwell region.\n\n\n\nmodel_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\nclassmethod non_negative_int_validation(value, info)\n\nValidate integer fields listed contain non-negative values.\n\n\n\nnumber_of_dwell_bins: int\n\nNumber of dwell bins for binning cycles, 0 for no dwell binning.\n\n\n\nnumber_of_mean_bins: int\n\nNumber of mean bins for binning cycles, 0 for no mean binning.\n\n\n\nnumber_of_range_bins: int\n\nNumber of range bins for binning cycles, 0 for no range binning.\n\n\n\nphase_name: str\n\nName of the phase in which the thermal signal is imported.\n\n\n\nproject: str\n\nSherlock project name in which the thermal signal is imported.\n\n\n\nclassmethod str_validation(value, info)\n\nValidate string fields listed.\n\n\n\ntemperature_range_filtering_limit: float\n\nMinimum cycle range to include in results, 0 for not filtering.\n\n\n\nthermal_signal_file_properties: ThermalSignalFileProperties\n\nProperties of the thermal signal file.\n\n\n\ntime_filtering_limit: float\n\nMaximum cycle time to include in results, default is 72 hours.\n\n\n\ntime_filtering_limit_units: str\n\nUnits of the time filtering limit.\n\n\n\ntime_removal: bool\n\nOption to indicate that time results with shorter half-cycle durations are removed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.model_fields.html#model_fields","title":"model_fields","text":"model_fields\n\n\n\nPottingRegionCopyData.model_fields = {'cca_name': FieldInfo(annotation=str, required=True), 'center_x': FieldInfo(annotation=float, required=True), 'center_y': FieldInfo(annotation=float, required=True), 'copy_potting_id': FieldInfo(annotation=str, required=True), 'potting_id': FieldInfo(annotation=str, required=True)}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.model_fields.html#model_fields","title":"model_fields","text":"model_fields\n\n\n\nGetICTFixturesPropertiesRequest.model_fields = {'cca_name': FieldInfo(annotation=str, required=True), 'ict_fixtures_ids': FieldInfo(annotation=Union[str, NoneType], required=False, default=None), 'project': FieldInfo(annotation=str, required=True)}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.copy.html#copy","title":"copy","text":"copy\n\n\n\nSlotShape.copy(*, include=None, exclude=None, update=None, deep=False)\n\nReturns a copy of the model.\n\n!!! warning “Deprecated”\n\nThis method is now deprecated; use model_copy instead.\n\nIf you need include or exclude, use:\n\n`python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n`\n\nParameters\n\ninclude – Optional set or mapping specifying which fields to include in the copied model.\n\nexclude – Optional set or mapping specifying which fields to exclude in the copied model.\n\nupdate – Optional dictionary of field-value pairs to override field values in the copied model.\n\ndeep – If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns\n\nA copy of the model with included, excluded and updated fields as specified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.model_dump_json.html#model_dump_json","title":"model_dump_json","text":"model_dump_json\n\n\n\nGerberOutlineFile.model_dump_json(*, indent=None, include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump_json](../concepts/serialization.md#modelmodel_dump_json)\n\nGenerates a JSON representation of the model using Pydantic’s to_json method.\n\nParameters\n\nindent (int | None) – Indentation to use in the JSON output. If None is passed, the output will be compact.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to include in the JSON output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to exclude from the JSON output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to serialize using field aliases.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\nstr\n\nReturns\n\nA JSON string representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.model_fields_set.html#model_fields_set","title":"model_fields_set","text":"model_fields_set\n\n\n\nproperty RectangularShape.model_fields_set: set[str]\n\nReturns the set of fields that have been explicitly set on this model instance.\n\nReturns\n\nA set of strings representing the fields that have been set,\n\ni.e. that were not filled from defaults.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.x_location_column.html#x_location_column","title":"x_location_column","text":"x_location_column\n\n\n\nCsvExcelOutlineFile.x_location_column: str\n\nX location column name\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.model_validate_strings.html#model_validate_strings","title":"model_validate_strings","text":"model_validate_strings\n\n\n\nclassmethod RectangularShape.model_validate_strings(obj, *, strict=None, context=None, by_alias=None, by_name=None)\n\nValidate the given object with string data against the Pydantic model.\n\nParameters\n\nobj (Any) – The object containing string data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.file_type.html#file_type","title":"file_type","text":"file_type\n\n\n\nCopperFile.file_type: Optional[int]\n\nThe format/type of the copper file (e.g., Gerber, ODB++, IPC2581).\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.launcher.launch.html#launch","title":"launch","text":"launch\n\n\n\nansys.sherlock.core.launcher.launch(host='127.0.0.1', port=9090, single_project_path='', sherlock_command_args='', year=None, release_number=None)\n\nLaunch Sherlock using the specified host and port for the gRPC connection.\n\nAvailable Since: 2025R2\n\nParameters\n\nhost: str, optional\n\nIP address to start gRPC on.\nThe default is \"127.0.0.1\", which is the IP address for the local host.\n\nport: int, optional\n\nPort number for the connection.\n\nsingle_project_path\n\npython:str, optional\n\nPath to the Sherlock project if invoking Sherlock in the single-project mode.\n\nsherlock_command_args\n\npython:str, optional\n\nAdditional command arguments for launching Sherlock.\n\nyear: int, optional\n\n4-digit year of the Sherlock release to launch. If not provided,\nthe latest installed version of Sherlock will be launched.\n\nrelease_number: int, optional\n\nRelease number of Sherlock to launch. If not provided,\nthe latest installed version of Sherlock will be launched.\n\nReturns\n\n:\n\n\n\npython:str\n\nPath to the Sherlock installation directory.\n\nReturn type\n\nstr\n\nExamples\n\n>>> from ansys.sherlock.core import launcher\n>>> project = \"C:\\\\Default Projects Directory\\\\ODB++ Tutorial\"\n>>> ansys_install_path = launcher.launch(\n>>>     port=9092, single_project_path=project, year=2024, release_number=2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.model_config.html#model_config","title":"model_config","text":"model_config\n\n\n\nPottingRegionUpdateData.model_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.model_validate_strings.html#model_validate_strings","title":"model_validate_strings","text":"model_validate_strings\n\n\n\nclassmethod CopyPottingRegionRequest.model_validate_strings(obj, *, strict=None, context=None, by_alias=None, by_name=None)\n\nValidate the given object with string data against the Pydantic model.\n\nParameters\n\nobj (Any) – The object containing string data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.model_post_init.html#model_post_init","title":"model_post_init","text":"model_post_init\n\n\n\nDeletePottingRegionRequest.model_post_init(context, /)\n\nOverride this method to perform additional initialization after __init__ and model_construct.\nThis is useful if you want to do some validation that requires the entire model to be initialized.\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.model_dump_json.html#model_dump_json","title":"model_dump_json","text":"model_dump_json\n\n\n\nCsvExcelOutlineFile.model_dump_json(*, indent=None, include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump_json](../concepts/serialization.md#modelmodel_dump_json)\n\nGenerates a JSON representation of the model using Pydantic’s to_json method.\n\nParameters\n\nindent (int | None) – Indentation to use in the JSON output. If None is passed, the output will be compact.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to include in the JSON output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to exclude from the JSON output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to serialize using field aliases.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\nstr\n\nReturns\n\nA JSON string representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.parse_obj.html#parse_obj","title":"parse_obj","text":"parse_obj\n\n\n\nclassmethod OutlineFile.parse_obj(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.model_construct.html#model_construct","title":"model_construct","text":"model_construct\n\n\n\nclassmethod PolygonalShape.model_construct(_fields_set=None, **values)\n\nCreates a new instance of the Model class with validated data.\n\nCreates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n\nmodel_construct() generally respects the model_config.extra setting on the provided model.\nThat is, if model_config.extra == ‘allow’, then all extra passed values are added to the model instance’s __dict__\nand __pydantic_extra__ fields. If model_config.extra == ‘ignore’ (the default), then all extra passed values are ignored.\nBecause no validation is performed with a call to model_construct(), having model_config.extra == ‘forbid’ does not result in\nan error if extra values are passed, but they will be ignored.\n\nParameters\n\n_fields_set (set[str] | None) – A set of field names that were originally explicitly set during instantiation. If provided,\nthis is directly used for the [model_fields_set][pydantic.BaseModel.model_fields_set] attribute.\nOtherwise, the field names from the values argument will be used.\n\nvalues (Any) – Trusted or pre-validated data dictionary.\n\nReturn type\n\nSelf\n\nReturns\n\nA new instance of the Model class with validated data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.layer.Layer.update_mount_points_by_file.html#update_mount_points_by_file","title":"update_mount_points_by_file","text":"update_mount_points_by_file\n\n\n\nLayer.update_mount_points_by_file(project, cca_name, file_path)\n\nUpdate mount point properties of a CCA from a CSV file.\n\nAvailable Since: 2023R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nfile_path: str\n\nPath for the CSV file with the mount point properties.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n>>>     \"ODB++ Tutorial.tgz\",\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     project=\"Test\",\n>>>     cca_name=\"Card\",\n>>> )\n>>> sherlock.layer.update_mount_points_by_file(\n>>>     \"Test\",\n>>>     \"Card\",\n>>>     \"MountPointImport.csv\"\n>>> )\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.model.Model.createExportTraceCopperLayerParams.html#createexporttracecopperlayerparams","title":"createExportTraceCopperLayerParams","text":"createExportTraceCopperLayerParams\n\n\n\nModel.createExportTraceCopperLayerParams(project_name, cca_name, output_file_path, copper_layer, overwrite=False, display_after=False, clear_FEA_database=False, use_FEA_model_ID=False, coord_units='mm', mesh_type=0, is_modeling_region_enabled=False, trace_output_type=0, element_order=1, max_mesh_size=1.0, max_mesh_size_units='mm', max_holes_per_trace=2, is_drill_hole_modeling_enabled=False, drill_hole_min_diameter=1.0, drill_hole_min_diameter_units='mm', drill_hole_max_edge_length=1.0, drill_hole_max_edge_length_units='mm')\n\nCreate a set of parameters to be used to export a single copper layer.\n\nCreates TraceModelExportParams object that can be added to an export trace model request.\nShould be used in conjunction with exportTraceModel method to export multiple trace layers\nall at once. See example below.\n\nParameters\n\nproject_name: str\n\nName of the Sherlock project containing trace layer to export.\n\ncca_name: str\n\nName of the CCA containing the trace layer to export.\n\noutput_file_path: str\n\nFile path including the file name and extension where the trace layer will be exported.\nValid file extensions: .py, .bdf, .apdl, .cdb, .wbjn, .stp, .step, .tcl, .stl\nNote: relative paths will be relative to sherlock install directory,\nnot the python script.\n\ncopper_layer: str\n\nName of the copper layer in the given CCA to export.\n\noverwrite: bool = False\n\nDetermines if sherlock should overwrite the output file if it exists.\n\ndisplay_after: bool = False\n\nDetermines if the output file should automatically display after export.\n\nclear_FEA_database: bool = False\n\nDetermines if sherlock should clear the database after export.\nApplicable file extensions: .apdl, and .cdb.\n\nuse_FEA_model_ID: bool = False\n\nDetermines if the FEA model id is used or not.\n\ncoord_units: str = “mm”\n\nUnits of the coordinate system. Applicable to .py .wbjn, .stp, .step.\n\nmesh_type: MeshType = MeshType.NONE\n\nOptions of difference trace meshing strategies\n\nis_modeling_region_enabled: bool = False\n\nDetermines if pre-defined modeling regions will be applied to the exported trace model.\n\ntrace_output_type: TraceOutputType = TraceOutputType.ALL_REGIONS\n\nOptions to select which trace regions to include in the 3D model.\n\nelement_order: ElementOrder = ElementOrder.LINEAR\n\nType of FEA element to be used when modeling each component.\n\nmax_mesh_size: float = 1.0\n\nIndicates the desired element sizes.\n\nmax_mesh_size_units: str = “mm”\n\nIndicates the units to be used with max_mesh_size.\n\nmax_holes_per_trace: int = 2\n\nMaximum number of holes allowed in a trace before partitioning it into multiple traces.\n\nis_drill_hole_modeling_enabled: bool = False\n\nDetermines if drill holes will be modeled or not.\n\ndrill_hole_min_diameter: float = 1.0\n\nAll drill holes with a diameter < this value will not be modeled.\n\ndrill_hole_min_diameter_units\n\npython:str = “mm”\n\nUnits associated with drill_hole_min_diameter.\n\ndrill_hole_max_edge_length: float = 1.0\n\nSpecifies the length of the line segments used to represent round drill holes.\n\ndrill_hole_max_edge_length_units: str = “mm”\n\nUnits associated with drill_hole_max_edge_length.\n\nReturns\n\n:\n\n\n\nTraceModelExportParams\n\nObject that holds the data for a single export trace request.\n\nReturn type\n\nTraceModelExportParams\n\nExamples\n\n>>> from ansys.sherlock.core import launcher\n>>> from ansys.sherlock.core.types.analysis_types import ElementOrder\n>>> from ansys.api.sherlock.v0 import SherlockModelService_pb2\n>>> sherlock = launcher.launch_sherlock()\n>>> copper_1_layer = sherlock.model.createExportTraceCopperLayerParams(\n        \"Tutorial Project\",\n        \"Main Board\",\n        \".\\\\outputfile_path.stp\",\n        \"copper-01.odb\",\n        False,\n        False,\n        False,\n        False,\n        \"mm\",\n        SherlockModelService_pb2.MeshType.NONE,\n        False,\n        SherlockModelService_pb2.TraceOutputType.ALL_REGIONS,\n        ElementOrder.LINEAR,\n        1.0,\n        \"mm\",\n        2,\n        False,\n        1.0,\n        \"mm\",\n        1.0\n    )\n>>> copper_2_layer = sherlock.model.createExportTraceCopperLayerParams(\n        \"Tutorial Project\",\n        \"Main Board\",\n        \".\\\\outputfile_path2.stp\",\n        \"copper-02.odb\",\n        False,\n        False,\n        False,\n        False,\n        \"mm\",\n        SherlockModelService_pb2.MeshType.NONE,\n        False,\n        SherlockModelService_pb2.TraceOutputType.ALL_REGIONS,\n        ElementOrder.LINEAR,\n        1.0,\n        \"mm\",\n        2,\n        False,\n        1.0,\n        \"mm\",\n        1.0\n    )\n>>> sherlock.model.exportTraceModel([copper_1_layer, copper_2_layer])\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.dict.html#dict","title":"dict","text":"dict\n\n\n\nSlotShape.dict(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False)\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_potting_region.html#add-and-update-potting-regions","title":"Add and Update Potting Regions","text":"Add and Update Potting Regions\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nadd potting regions, update existing potting regions, and properly close the connection."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_potting_region.html#description","title":"Add and Update Potting Regions > Description","text":"Description\n\nSherlock’s gRPC API allows users to automate workflows such as adding and updating potting\nregions for CCAs.\nThis script demonstrates how to:\n- Connect to the Sherlock service.\n- Import a project.\n- Add a potting region.\n- Update an existing potting region."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_potting_region.html#connect-to-sherlock","title":"Add and Update Potting Regions > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_potting_region.html#delete-project","title":"Add and Update Potting Regions > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_potting_region.html#import-tutorial-project","title":"Add and Update Potting Regions > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_potting_region.html#add-potting-region","title":"Add and Update Potting Regions > Add Potting Region","text":"Add Potting Region\n\nAdd a new potting region to a CCA."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_potting_region.html#update-potting-region","title":"Add and Update Potting Regions > Update Potting Region","text":"Update Potting Region\n\nUpdate an existing potting region.\n\n\n\nDownload Jupyter notebook: update_potting_region.ipynb\n\nDownload Python source code: update_potting_region.py\n\nDownload zipped: update_potting_region.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.model_construct.html#model_construct","title":"model_construct","text":"model_construct\n\n\n\nclassmethod ICTFixtureProperties.model_construct(_fields_set=None, **values)\n\nCreates a new instance of the Model class with validated data.\n\nCreates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n\nmodel_construct() generally respects the model_config.extra setting on the provided model.\nThat is, if model_config.extra == ‘allow’, then all extra passed values are added to the model instance’s __dict__\nand __pydantic_extra__ fields. If model_config.extra == ‘ignore’ (the default), then all extra passed values are ignored.\nBecause no validation is performed with a call to model_construct(), having model_config.extra == ‘forbid’ does not result in\nan error if extra values are passed, but they will be ignored.\n\nParameters\n\n_fields_set (set[str] | None) – A set of field names that were originally explicitly set during instantiation. If provided,\nthis is directly used for the [model_fields_set][pydantic.BaseModel.model_fields_set] attribute.\nOtherwise, the field names from the values argument will be used.\n\nvalues (Any) – Trusted or pre-validated data dictionary.\n\nReturn type\n\nSelf\n\nReturns\n\nA new instance of the Model class with validated data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/parts_types.html#parts-types","title":"Parts Types","text":"Parts Types\n\n\n\nModule containing types for the Parts Service."},{"objectID":"Home","href":"api/parts_types.html#constants","title":"Parts Types > Constants","text":"Constants\n\n\n\nclass ansys.sherlock.core.types.parts_types.AVLDescription\n\nConstants for AVLDescription in the Update Parts List from AVL request.\n\n\n\nASSIGN_APPROVED_DESCRIPTION = 0\n\nAssignApprovedDescription\n\n\n\nDO_NOT_CHANGE_DESCRIPTION = 1\n\nDoNotChangeDescription\n\n\n\nclass ansys.sherlock.core.types.parts_types.AVLPartNum\n\nConstants for AVLPartNum in the Update Parts List from AVL request.\n\n\n\nASSIGN_INTERNAL_PART_NUM = 0\n\nAssignInternalPartNum\n\n\n\nASSIGN_VENDOR_AND_PART_NUM = 1\n\nAssignVendorAndPartNum\n\n\n\nDO_NOT_CHANGE_VENDOR_OR_PART_NUM = 2\n\nDoNotChangeVendorOrPartNum\n\n\n\nclass ansys.sherlock.core.types.parts_types.PartsListSearchDuplicationMode\n\nConstants for Duplication Mode in Update Parts List and Update Parts from AVL request.\n\n\n\nERROR = 1\n\nError\n\n\n\nFIRST = 0\n\nFirst\n\n\n\nIGNORE = 2\n\nIgnore\n\n\n\nclass ansys.sherlock.core.types.parts_types.PartsListSearchMatchingMode\n\nDEPRECATED. Constants for Matching Mode in Update Parts List & Update Parts from AVL.\n\n\n\nBOTH = 0\n\nBoth\n\n\n\nPART = 1\n\nPart"},{"objectID":"Home","href":"api/parts_types.html#classes","title":"Parts Types > Classes","text":"Classes\n\n\n\nclass ansys.sherlock.core.types.parts_types.PartLocation(location)\n\nPart Location property values.\n\n\n\nboard_side\n\nBoard side - \"TOP\" or \"BOTTOM\"\n\n\n\nlocation_units\n\nUnits for location coordinates\n\n\n\nmirrored\n\nMirrored - True or False\n\n\n\nref_des\n\nReference designator\n\n\n\nrotation\n\nRotation (in degrees)\n\n\n\nx\n\nX coordinate\n\n\n\ny\n\nY coordinate\n\n\n\nclass ansys.sherlock.core.types.parts_types.GetPartsListPropertiesRequest(**data)\n\nRequest for getting properties of parts in the parts list of a CCA.\n\n\n\ncca_name: str\n\nName of the CCA with the parts.\n\n\n\nmodel_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\nproject: str\n\nName of the Sherlock project.\n\n\n\nreference_designators: Optional[List[str]]\n\nReference designators of the parts to retrieve properties for. Use None to get all parts.\n\n\n\nclassmethod str_validation(value, info)\n\nValidate string fields listed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.parse_raw.html#parse_raw","title":"parse_raw","text":"parse_raw\n\n\n\nclassmethod GetICTFixturesPropertiesRequest.parse_raw(b, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.parse_file.html#parse_file","title":"parse_file","text":"parse_file\n\n\n\nclassmethod CopperGerberFile.parse_file(path, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.layer.Layer.delete_potting_region.html#delete_potting_region","title":"delete_potting_region","text":"delete_potting_region\n\n\n\nLayer.delete_potting_region(request)\n\nDelete on or more potting regions in a specific project.\n\nAvailable Since: 2025R1\n\nParameters\n\nrequest: DeletePottingRegionRequest\n\nContains all the information needed to delete one or more potting regions per project.\n\nReturns\n\n:\n\n\n\npython:list[SherlockCommonService_pb2.ReturnCode]\n\nReturn codes for each request.\n\nReturn type\n\nlist[ReturnCode]\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> from ansys.sherlock.core.types.layer_types import DeletePottingRegionRequest\n>>> from ansys.sherlock.core.types.layer_types import PottingRegionDeleteData\n>>> sherlock = launch_sherlock()\n>>>\n>>> delete_request_example = DeletePottingRegionRequest(\n>>> project=project,\n>>> potting_region_delete_data=[\n>>>     PottingRegionDeleteData(\n>>>         cca_name=cca_name,\n>>>         potting_id=potting_id\n>>>     )\n>>> ]\n>>> )\n>>> responses_example = sherlock.layer.delete_potting_region(delete_request_example)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.construct.html#construct","title":"construct","text":"construct\n\n\n\nclassmethod ICTFixtureProperties.construct(_fields_set=None, **values)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.parts.Parts.export_parts_list.html#export_parts_list","title":"export_parts_list","text":"export_parts_list\n\n\n\nParts.export_parts_list(project, cca_name, export_file)\n\nExport a parts list for a CCA.\n\nAvailable Since: 2021R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nexport_file: str\n\nFull path for the CSV file to export the parts list to.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.parts.export_parts_list(\n    \"Test\",\n    \"Card\",\n    \"Parts List.csv\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.potting_id.html#potting_id","title":"potting_id","text":"potting_id\n\n\n\nPottingRegion.potting_id: str\n\nThe potting ID.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.LegendBounds.width.html#width","title":"width","text":"width\n\n\n\nLegendBounds.width\n\nwidth of the legend\n\nType\n\nfloat\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Computation times","href":"sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 43 files from all galleries:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_gallery_examples_00-setup_setup.py (..\\..\\examples\\00-setup\\setup.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_add_cca.py (..\\..\\examples\\01-project-configuration\\add_cca.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_add_harmonic_event.py (..\\..\\examples\\01-project-configuration\\add_harmonic_event.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_add_harmonic_profile.py (..\\..\\examples\\01-project-configuration\\add_harmonic_profile.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_add_modeling_region.py (..\\..\\examples\\01-project-configuration\\add_modeling_region.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_add_potting_region.py (..\\..\\examples\\01-project-configuration\\add_potting_region.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_laminate_layer.py (..\\..\\examples\\01-project-configuration\\update_laminate_layer.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_mount_points_by_file.py (..\\..\\examples\\01-project-configuration\\update_mount_points_by_file.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_part_location.py (..\\..\\examples\\01-project-configuration\\update_part_location.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_part_location_by_file.py (..\\..\\examples\\01-project-configuration\\update_part_location_by_file.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_part_modeling_properties.py (..\\..\\examples\\01-project-configuration\\update_part_modeling_properties.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_parts_list.py (..\\..\\examples\\01-project-configuration\\update_parts_list.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_parts_list_properties.py (..\\..\\examples\\01-project-configuration\\update_parts_list_properties.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_potting_region.py (..\\..\\examples\\01-project-configuration\\update_potting_region.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_thermal_maps.py (..\\..\\examples\\01-project-configuration\\update_thermal_maps.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_02-importing_import_ipc_2581_archive.py (..\\..\\examples\\02-importing\\import_ipc_2581_archive.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_02-importing_import_odb_archive.py (..\\..\\examples\\02-importing\\import_odb_archive.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_02-importing_import_parts_list.py (..\\..\\examples\\02-importing\\import_parts_list.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_02-importing_import_project_zip_archive_single_mode.py (..\\..\\examples\\02-importing\\import_project_zip_archive_single_mode.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_02-importing_import_project_zip_file.py (..\\..\\examples\\02-importing\\import_project_zip_file.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_03-exporting_export_aedb.py (..\\..\\examples\\03-exporting\\export_aedb.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_03-exporting_export_all_mount_points.py (..\\..\\examples\\03-exporting\\export_all_mount_points.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_03-exporting_export_all_test_fixtures.py (..\\..\\examples\\03-exporting\\export_all_test_fixtures.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_03-exporting_export_all_test_points.py (..\\..\\examples\\03-exporting\\export_all_test_points.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_03-exporting_export_fea_model.py (..\\..\\examples\\03-exporting\\export_fea_model.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_03-exporting_export_net_list.py (..\\..\\examples\\03-exporting\\export_net_list.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_03-exporting_export_part_list.py (..\\..\\examples\\03-exporting\\export_part_list.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_03-exporting_export_project.py (..\\..\\examples\\03-exporting\\export_project.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_03-exporting_export_trace_model.py (..\\..\\examples\\03-exporting\\export_trace_model.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_get_parts_list_analysis_props.py (..\\..\\examples\\04-analyses\\get_parts_list_analysis_props.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_get_random_vibe_inputs_fields.py (..\\..\\examples\\04-analyses\\get_random_vibe_inputs_fields.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_run_analysis.py (..\\..\\examples\\04-analyses\\run_analysis.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_run_harmonic_vibe_strain_map_analysis.py (..\\..\\examples\\04-analyses\\run_harmonic_vibe_strain_map_analysis.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_run_mechanical_shock_strain_map_analysis.py (..\\..\\examples\\04-analyses\\run_mechanical_shock_strain_map_analysis.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_run_random_vibe_strain_map_analysis.py (..\\..\\examples\\04-analyses\\run_random_vibe_strain_map_analysis.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_update_harmonic_vibe_properties.py (..\\..\\examples\\04-analyses\\update_harmonic_vibe_properties.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_update_ict_properties.py (..\\..\\examples\\04-analyses\\update_ict_properties.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_update_mechanical_shock_properties.py (..\\..\\examples\\04-analyses\\update_mechanical_shock_properties.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_update_part_validation_properties.py (..\\..\\examples\\04-analyses\\update_part_validation_properties.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_update_pcb_modeling_properties.py (..\\..\\examples\\04-analyses\\update_pcb_modeling_properties.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_update_random_vibe_properties.py (..\\..\\examples\\04-analyses\\update_random_vibe_properties.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_update_solder_fatigue_properties.py (..\\..\\examples\\04-analyses\\update_solder_fatigue_properties.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_99-teardown_teardown.py (..\\..\\examples\\99-teardown\\teardown.py)\n\n00:00.000\n\n0.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_project_zip_archive_single_mode.html#sherlock-project-import-in-single-mode","title":"Sherlock Project Import in Single Mode","text":"Sherlock Project Import in Single Mode\n\nThis example demonstrates how to launch the Sherlock gRPC service in single-project mode,\nimport a project, and handle common exceptions during the import process.\n\nDescription\nSherlock’s gRPC API enables automation of various workflows, including project management.\nThis script demonstrates how to:\n- Connect to the Sherlock service in single-project mode.\n- Import a sample project archive.\n- Handle import errors gracefully."},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_project_zip_archive_single_mode.html#launch-pysherlock-service-in-single-project-mode","title":"Sherlock Project Import in Single Mode > Launch PySherlock service in single-project mode","text":"Launch PySherlock service in single-project mode\n\nLaunch the Sherlock service using the specified project path and wait for initialization."},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_project_zip_archive_single_mode.html#import-sherlock-project-in-single-mode","title":"Sherlock Project Import in Single Mode > Import Sherlock Project in Single Mode","text":"Import Sherlock Project in Single Mode\n\nImport a tutorial project ZIP archive provided with the Sherlock installation."},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_project_zip_archive_single_mode.html#exit-sherlock","title":"Sherlock Project Import in Single Mode > Exit Sherlock","text":"Exit Sherlock\n\nExit the gRPC connection and shut down Sherlock.\n\n\n\nDownload Jupyter notebook: import_project_zip_archive_single_mode.ipynb\n\nDownload Python source code: import_project_zip_archive_single_mode.py\n\nDownload zipped: import_project_zip_archive_single_mode.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_part_location.html#update-part-locations","title":"Update Part Locations","text":"Update Part Locations\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nand update part locations."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_part_location.html#description","title":"Update Part Locations > Description","text":"Description\n\nSherlock’s gRPC API allows users to automate workflows such as updating part\nlocations for CCAs.\nThis script shows how to:\n- Connect to the Sherlock service.\n- Import a project.\n- Update part locations.\n\nThe updated part locations can be used for accurate placement validation and optimization."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_part_location.html#connect-to-sherlock","title":"Update Part Locations > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_part_location.html#delete-project","title":"Update Part Locations > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_part_location.html#import-tutorial-project","title":"Update Part Locations > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_part_location.html#update-part-locations","title":"Update Part Locations","text":"Update Part Locations\n\nUpdate the part locations for the “Card” of the “Test” project.\n\n\n\nDownload Jupyter notebook: update_part_location.ipynb\n\nDownload Python source code: update_part_location.py\n\nDownload zipped: update_part_location.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.html#ansyssherlockcoretypeslayer_typespottingregioncopydata","title":"ansys.sherlock.core.types.layer_types.PottingRegionCopyData","text":"ansys.sherlock.core.types.layer_types.PottingRegionCopyData\n\n\n\nclass ansys.sherlock.core.types.layer_types.PottingRegionCopyData(**data)\n\nData identifying which potting regions to copy.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.model_validate_strings.html#model_validate_strings","title":"model_validate_strings","text":"model_validate_strings\n\n\n\nclassmethod PolygonalShape.model_validate_strings(obj, *, strict=None, context=None, by_alias=None, by_name=None)\n\nValidate the given object with string data against the Pydantic model.\n\nParameters\n\nobj (Any) – The object containing string data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.schema_json.html#schema_json","title":"schema_json","text":"schema_json\n\n\n\nclassmethod OutlineFile.schema_json(*, by_alias=True, ref_template='#/$defs/{model}', **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.model_dump.html#model_dump","title":"model_dump","text":"model_dump\n\n\n\nPolygonalShape.model_dump(*, mode='python', include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump](../concepts/serialization.md#modelmodel_dump)\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nParameters\n\nmode (Union[Literal['json', 'python'], str]) – The mode in which to_python should run.\nIf mode is ‘json’, the output will only contain JSON serializable types.\nIf mode is ‘python’, the output may contain non-JSON-serializable Python objects.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to include in the output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to exclude from the output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to use the field’s alias in the dictionary key if defined.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nA dictionary representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.html#ansyssherlockcoretypeslayer_typescircularshape","title":"ansys.sherlock.core.types.layer_types.CircularShape","text":"ansys.sherlock.core.types.layer_types.CircularShape\n\n\n\nclass ansys.sherlock.core.types.layer_types.CircularShape(**data)\n\nContains the properties for a circular shape.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.from_orm.html#from_orm","title":"from_orm","text":"from_orm\n\n\n\nclassmethod UpdatePottingRegionRequest.from_orm(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.model_construct.html#model_construct","title":"model_construct","text":"model_construct\n\n\n\nclassmethod UpdateICTFixturesRequest.model_construct(_fields_set=None, **values)\n\nCreates a new instance of the Model class with validated data.\n\nCreates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n\nmodel_construct() generally respects the model_config.extra setting on the provided model.\nThat is, if model_config.extra == ‘allow’, then all extra passed values are added to the model instance’s __dict__\nand __pydantic_extra__ fields. If model_config.extra == ‘ignore’ (the default), then all extra passed values are ignored.\nBecause no validation is performed with a call to model_construct(), having model_config.extra == ‘forbid’ does not result in\nan error if extra values are passed, but they will be ignored.\n\nParameters\n\n_fields_set (set[str] | None) – A set of field names that were originally explicitly set during instantiation. If provided,\nthis is directly used for the [model_fields_set][pydantic.BaseModel.model_fields_set] attribute.\nOtherwise, the field names from the values argument will be used.\n\nvalues (Any) – Trusted or pre-validated data dictionary.\n\nReturn type\n\nSelf\n\nReturns\n\nA new instance of the Model class with validated data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.units.html#units","title":"units","text":"units\n\n\n\nTestPointProperties.units: str\n\nUnits\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.layer.Layer.update_potting_region.html#update_potting_region","title":"update_potting_region","text":"update_potting_region\n\n\n\nLayer.update_potting_region(request)\n\nUpdate one or more potting regions in a specific project.\n\nAvailable Since: 2025R1\n\nParameters\n\nrequest: UpdatePottingRegionRequest\n\nContains all the information needed to update one or more potting regions per project.\n\nReturns\n\n:\n\n\n\npython:list[SherlockCommonService_pb2.ReturnCode]\n\nReturn codes for each request.\n\nReturn type\n\nlist[ReturnCode]\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> from ansys.sherlock.core.types.layer_types import PolygonalShape\n>>> from ansys.sherlock.core.types.layer_types import PottingRegionUpdateData\n>>> from ansys.sherlock.core.types.layer_types import PottingRegion\n>>> sherlock = launch_sherlock()\n>>>\n>>> update1 = PottingRegionUpdateData(\n>>> potting_region_id_to_update=potting_id,\n>>> potting_region=PottingRegionData(\n>>>     cca_name=cca_name,\n>>>     potting_id=potting_id,\n>>>     potting_side=potting_side,\n>>>     potting_material=potting_material,\n>>>     potting_units=potting_units,\n>>>     potting_thickness=potting_thickness,\n>>>     potting_standoff=potting_standoff,\n>>>     shape=PolygonalShape(\n>>>         points=[(0, 1), (5, 1), (5, 5), (1, 5)],\n>>>         rotation=45.0\n>>>     )\n>>> )\n>>> )\n>>> update2 = PottingRegionUpdateData(\n>>> potting_region_id_to_update=potting_id,\n>>> potting_region=PottingRegionData(\n>>>     cca_name=cca_name,\n>>>     potting_id=potting_id,\n>>>     potting_side=potting_side,\n>>>     potting_material=potting_material,\n>>>     potting_units=potting_units,\n>>>     potting_thickness=potting_thickness,\n>>>     potting_standoff=potting_standoff,\n>>>     shape=PolygonalShape(\n>>>         points=[(0, 1), (5, 1), (5, 5), (1, 5)],\n>>>         rotation=0.0\n>>>     )\n>>> )\n>>> )\n>>> example_request = UpdatePottingRegionRequest(\n>>>     \"project_name\",\n>>>     [\n>>>         update1,\n>>>         update2\n>>>     ]\n>>> )\n>>> return_codes = sherlock.layer.update_potting_region(example_request)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.common.Common.html#ansyssherlockcorecommoncommon","title":"ansys.sherlock.core.common.Common","text":"ansys.sherlock.core.common.Common\n\n\n\nclass ansys.sherlock.core.common.Common(channel, server_version)\n\nContains methods from the Sherlock Common service.\n\nMethods\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.model_dump.html#model_dump","title":"model_dump","text":"model_dump\n\n\n\nICTFixtureProperties.model_dump(*, mode='python', include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump](../concepts/serialization.md#modelmodel_dump)\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nParameters\n\nmode (Union[Literal['json', 'python'], str]) – The mode in which to_python should run.\nIf mode is ‘json’, the output will only contain JSON serializable types.\nIf mode is ‘python’, the output may contain non-JSON-serializable Python objects.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to include in the output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to exclude from the output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to use the field’s alias in the dictionary key if defined.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nA dictionary representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.dict.html#dict","title":"dict","text":"dict\n\n\n\nGerberOutlineFile.dict(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False)\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.update_forward_refs.html#update_forward_refs","title":"update_forward_refs","text":"update_forward_refs\n\n\n\nclassmethod UpdatePottingRegionRequest.update_forward_refs(**localns)\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.model_validate_json.html#model_validate_json","title":"model_validate_json","text":"model_validate_json\n\n\n\nclassmethod PottingRegion.model_validate_json(json_data, *, strict=None, context=None, by_alias=None, by_name=None)\n\n!!! abstract “Usage Documentation”\n\n[JSON Parsing](../concepts/json.md#json-parsing)\n\nValidate the given JSON data against the Pydantic model.\n\nParameters\n\njson_data (str | bytes | bytearray) – The JSON data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\nRaises\n\nValidationError – If json_data is not a JSON string or the object could not be validated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.model_rebuild.html#model_rebuild","title":"model_rebuild","text":"model_rebuild\n\n\n\nclassmethod CopperImageFile.model_rebuild(*, force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace=None)\n\nTry to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nParameters\n\nforce (bool) – Whether to force the rebuilding of the model schema, defaults to False.\n\nraise_errors (bool) – Whether to raise errors, defaults to True.\n\n_parent_namespace_depth (int) – The depth level of the parent namespace, defaults to 2.\n\n_types_namespace (Mapping[str, Any] | None) – The types namespace, defaults to None.\n\nReturn type\n\nbool | None\n\nReturns\n\nReturns None if the schema is already “complete” and rebuilding was not required.\nIf rebuilding _was_ required, returns True if rebuilding was successful, otherwise False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.layer.Layer.html#ansyssherlockcorelayerlayer","title":"ansys.sherlock.core.layer.Layer","text":"ansys.sherlock.core.layer.Layer\n\n\n\nclass ansys.sherlock.core.layer.Layer(channel, server_version)\n\nModule containing all the layer management capabilities.\n\nMethods\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.parse_raw.html#parse_raw","title":"parse_raw","text":"parse_raw\n\n\n\nclassmethod RectangularShape.parse_raw(b, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_laminate_layer.html#update-laminate-layer-properties","title":"Update Laminate Layer Properties","text":"Update Laminate Layer Properties\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nand update laminate layer properties."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_laminate_layer.html#description","title":"Update Laminate Layer Properties > Description","text":"Description\n\nSherlock’s gRPC API allows users to automate workflows such as updating laminate layer\nproperties for printed circuit boards (PCBs).\nThis script demonstrates how to:\n\nConnect to the Sherlock service.\n\nImport a project.\n\nUpdate laminate layer properties.\n\nThe updated properties can be used for further design validation and optimization."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_laminate_layer.html#connect-to-sherlock","title":"Update Laminate Layer Properties > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_laminate_layer.html#delete-project","title":"Update Laminate Layer Properties > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_laminate_layer.html#import-tutorial-project","title":"Update Laminate Layer Properties > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_laminate_layer.html#update-laminate-layer-properties","title":"Update Laminate Layer Properties","text":"Update Laminate Layer Properties\n\nUpdate the laminate layer properties for the “Main Board” of the “Test” project.\n\n\n\nDownload Jupyter notebook: update_laminate_layer.ipynb\n\nDownload Python source code: update_laminate_layer.py\n\nDownload zipped: update_laminate_layer.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.points.html#points","title":"points","text":"points\n\n\n\nPolygonalShape.points: list[tuple[float, float]]\n\nlist[tuple[float, float]]\n\nType\n\nPoints (length two tuples of the form (x, y))\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/99-teardown/teardown.html#teardown","title":"Teardown","text":"Teardown\n\nThis restores the environment after running the examples."},{"objectID":"Home","href":"examples/gallery_examples/99-teardown/teardown.html#description","title":"Teardown > Description","text":"Description\n\nPerform the following steps to set up the environment:\n- Connect to Sherlock\n- Exit Sherlock\n- Delete temp files"},{"objectID":"Home","href":"examples/gallery_examples/99-teardown/teardown.html#exit-sherlock","title":"Teardown > Exit Sherlock","text":"Exit Sherlock\n\nExit the gRPC connection and shut down Sherlock."},{"objectID":"Home","href":"examples/gallery_examples/99-teardown/teardown.html#clean-temporary-directory","title":"Teardown > Clean temporary directory","text":"Clean temporary directory\n\nDelete the directory for storing temp files.\n\n\n\nDownload Jupyter notebook: teardown.ipynb\n\nDownload Python source code: teardown.py\n\nDownload zipped: teardown.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.validate.html#validate","title":"validate","text":"validate\n\n\n\nclassmethod PCBShape.validate(value)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.common.Common.get_solder_info.html#get_solder_info","title":"get_solder_info","text":"get_solder_info\n\n\n\nCommon.get_solder_info()\n\nGet solder data from Sherlock.\n\nReturns\n\n:\n\n\n\nSolderInfoResponse\n\nAll solder information stored in Sherlock for each solder.\n\nReturn type\n\nSolderInfoResponse\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> solder_data = sherlock.get_solder_info()\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.validate.html#validate","title":"validate","text":"validate\n\n\n\nclassmethod UpdateTestPointsRequest.validate(value)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_harmonic_event.html#add-harmonic-event-to-lifecycle-phase","title":"Add Harmonic Event to Lifecycle Phase","text":"Add Harmonic Event to Lifecycle Phase\n\nThis example demonstrates how to launch the Sherlock gRPC service, import a project,\ncreate a lifecycle phase, and add a harmonic event to the phase, then properly close the connection."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_harmonic_event.html#description","title":"Add Harmonic Event to Lifecycle Phase > Description","text":"Description\n\nSherlock’s gRPC API allows users to automate workflows such as creating lifecycle phases\nand adding harmonic events.\nThis script demonstrates how to:\n- Connect to the Sherlock service.\n- Import a project.\n- Create a lifecycle phase.\n- Add a harmonic event to the lifecycle phase.\n\nThe harmonic event can be used for thermal analysis and helps in simulating the effects\nof various conditions on the board."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_harmonic_event.html#connect-to-sherlock","title":"Add Harmonic Event to Lifecycle Phase > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_harmonic_event.html#delete-project","title":"Add Harmonic Event to Lifecycle Phase > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_harmonic_event.html#import-tutorial-project","title":"Add Harmonic Event to Lifecycle Phase > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_harmonic_event.html#create-lifecycle-phase","title":"Add Harmonic Event to Lifecycle Phase > Create Lifecycle Phase","text":"Create Lifecycle Phase\n\nCreate a new lifecycle phase called “Example” in the “Test” project."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_harmonic_event.html#add-harmonic-event-to-lifecycle-phase","title":"Add Harmonic Event to Lifecycle Phase","text":"Add Harmonic Event to Lifecycle Phase\n\nAdd a harmonic event to the “Example” lifecycle phase.\n\n\n\nDownload Jupyter notebook: add_harmonic_event.ipynb\n\nDownload Python source code: add_harmonic_event.py\n\nDownload zipped: add_harmonic_event.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.model_dump_json.html#model_dump_json","title":"model_dump_json","text":"model_dump_json\n\n\n\nCircularShape.model_dump_json(*, indent=None, include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump_json](../concepts/serialization.md#modelmodel_dump_json)\n\nGenerates a JSON representation of the model using Pydantic’s to_json method.\n\nParameters\n\nindent (int | None) – Indentation to use in the JSON output. If None is passed, the output will be compact.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to include in the JSON output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to exclude from the JSON output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to serialize using field aliases.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\nstr\n\nReturns\n\nA JSON string representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.parse_obj.html#parse_obj","title":"parse_obj","text":"parse_obj\n\n\n\nclassmethod CopperFile.parse_obj(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.model_validate_strings.html#model_validate_strings","title":"model_validate_strings","text":"model_validate_strings\n\n\n\nclassmethod SlotShape.model_validate_strings(obj, *, strict=None, context=None, by_alias=None, by_name=None)\n\nValidate the given object with string data against the Pydantic model.\n\nParameters\n\nobj (Any) – The object containing string data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.model_post_init.html#model_post_init","title":"model_post_init","text":"model_post_init\n\n\n\nUpdateICTFixturesRequest.model_post_init(context, /)\n\nOverride this method to perform additional initialization after __init__ and model_construct.\nThis is useful if you want to do some validation that requires the entire model to be initialized.\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.cca_name.html#cca_name","title":"cca_name","text":"cca_name\n\n\n\nUpdateICTFixturesRequest.cca_name: str\n\nName of the Sherlock CCA.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.analysis.Analysis.update_PTH_fatigue_props.html#update_pth_fatigue_props","title":"update_PTH_fatigue_props","text":"update_PTH_fatigue_props\n\n\n\nAnalysis.update_PTH_fatigue_props(request)\n\nUpdate properties for one or more Plated Through Hole (PTH) Fatigue Analyses.\n\nParameters\n\nrequest: UpdatePTHFatiguePropsRequest\n\nContains all the information needed to update the properties for one or more\nPTH fatigue analyses in a project.\n\nReturns\n\n:\n\n\n\npython:list[SherlockCommonService_pb2.ReturnCode]\n\nReturn codes for each update request.\n\nReturn type\n\nlist[ReturnCode]\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> from ansys.sherlock.core.types.analysis_types import (\n    PTHFatiguePropsAnalysis,\n    UpdatePTHFatiguePropsRequestAnalysisType,\n    UpdatePTHFatiguePropsRequest,\n)\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_project_zip_archive(\n    project=\"Assembly Tutorial\",\n    category=\"category\",\n    archive_file=\"C:\\\\Program Files\\\\ANSYS Inc\\\\v252\\\\sherlock\\\\tutorial\\\\\n        Assembly Tutorial.zip\",\n)\n>>> update_request1 = PTHFatiguePropsAnalysis(\n    cca_name=\"Main Board\",\n    qualification=UpdatePTHFatiguePropsRequestAnalysisType.SUPPLIER,\n    pth_quality_factor=\"Good\",\n    pth_wall_thickness=0.1,\n    pth_wall_thickness_units=\"mm\",\n    min_hole_size=0.5,\n    min_hole_size_units=\"mm\",\n    max_hole_size=1.0,\n    max_hole_size_units=\"mm\",\n)\n>>> update_request2 = PTHFatiguePropsAnalysis(\n    cca_name=\"Memory Card 1\",\n    qualification=UpdatePTHFatiguePropsRequestAnalysisType.PRODUCT,\n    pth_quality_factor=\"Good\",\n    pth_wall_thickness=0.2,\n    pth_wall_thickness_units=\"mil\",\n    min_hole_size=0.7,\n    min_hole_size_units=\"mil\",\n    max_hole_size=1.5,\n    max_hole_size_units=\"mil\",\n)\n>>> request = UpdatePTHFatiguePropsRequest(\n    project=\"Assembly Tutorial\",\n    pth_fatigue_analysis_properties=[\n        update_request1,\n        update_request2\n    ]\n)\n>>> return_codes = sherlock.analysis.update_PTH_fatigue_props(request)\n>>> for return_code in return_codes:\n    print(f\"Return code: value={return_code.value}, message={return_code.message}\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.html#ansyssherlockcoretypeslayer_typesgettestpointpropertiesrequest","title":"ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest","text":"ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest\n\n\n\nclass ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest(**data)\n\nReturn the properties for each test point given a comma-separated list of test point ids.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.potting_material.html#potting_material","title":"potting_material","text":"potting_material\n\n\n\nPottingRegion.potting_material: str\n\nThe potting material.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.model_fields_set.html#model_fields_set","title":"model_fields_set","text":"model_fields_set\n\n\n\nproperty UpdateICTFixturesRequest.model_fields_set: set[str]\n\nReturns the set of fields that have been explicitly set on this model instance.\n\nReturns\n\nA set of strings representing the fields that have been set,\n\ni.e. that were not filled from defaults.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.dict.html#dict","title":"dict","text":"dict\n\n\n\nDeletePottingRegionRequest.dict(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False)\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.chassis_material.html#chassis_material","title":"chassis_material","text":"chassis_material\n\n\n\nICTFixtureProperties.chassis_material: str\n\nChassis material\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.dict.html#dict","title":"dict","text":"dict\n\n\n\nRectangularShape.dict(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False)\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.model_parametrized_name.html#model_parametrized_name","title":"model_parametrized_name","text":"model_parametrized_name\n\n\n\nclassmethod CopperFile.model_parametrized_name(params)\n\nCompute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nParameters\n\nparams (tuple[type[Any], ...]) – Tuple of types of the class. Given a generic class\nModel with 2 type variables and a concrete model Model[str, int],\nthe value (str, int) would be passed to params.\n\nReturn type\n\nstr\n\nReturns\n\nString representing the new class where params are passed to cls as type variables.\n\nRaises\n\nTypeError – Raised when trying to generate concrete names for non-generic models.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.side.html#side","title":"side","text":"side\n\n\n\nICTFixtureProperties.side: str\n\nSide\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.str_validation.html#str_validation","title":"str_validation","text":"str_validation\n\n\n\nclassmethod UpdateICTFixturesRequest.str_validation(value, info)\n\nValidate string fields listed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.ImageFile.max_temperature_units.html#max_temperature_units","title":"max_temperature_units","text":"max_temperature_units\n\n\n\nImageFile.max_temperature_units\n\nmax_temperature_units\n\nType\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.model_copy.html#model_copy","title":"model_copy","text":"model_copy\n\n\n\nOutlineFile.model_copy(*, update=None, deep=False)\n\n!!! abstract “Usage Documentation”\n\n[model_copy](../concepts/serialization.md#model_copy)\n\nReturns a copy of the model.\n\n!!! note\n\nThe underlying instance’s [__dict__][object.__dict__] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property]).\n\nParameters\n\nupdate (Mapping[str, Any] | None) – Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\n\ndeep (bool) – Set to True to make a deep copy of the model.\n\nReturn type\n\nSelf\n\nReturns\n\nNew model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.model_rebuild.html#model_rebuild","title":"model_rebuild","text":"model_rebuild\n\n\n\nclassmethod OutlineFile.model_rebuild(*, force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace=None)\n\nTry to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nParameters\n\nforce (bool) – Whether to force the rebuilding of the model schema, defaults to False.\n\nraise_errors (bool) – Whether to raise errors, defaults to True.\n\n_parent_namespace_depth (int) – The depth level of the parent namespace, defaults to 2.\n\n_types_namespace (Mapping[str, Any] | None) – The types namespace, defaults to None.\n\nReturn type\n\nbool | None\n\nReturns\n\nReturns None if the schema is already “complete” and rebuilding was not required.\nIf rebuilding _was_ required, returns True if rebuilding was successful, otherwise False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.str_validation.html#str_validation","title":"str_validation","text":"str_validation\n\n\n\nclassmethod GetTestPointPropertiesRequest.str_validation(value, info)\n\nValidate string fields listed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.model_post_init.html#model_post_init","title":"model_post_init","text":"model_post_init\n\n\n\nTestPointProperties.model_post_init(context, /)\n\nOverride this method to perform additional initialization after __init__ and model_construct.\nThis is useful if you want to do some validation that requires the entire model to be initialized.\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.analysis.Analysis.update_part_modeling_props.html#update_part_modeling_props","title":"update_part_modeling_props","text":"update_part_modeling_props\n\n\n\nAnalysis.update_part_modeling_props(project, part_modeling_props)\n\nUpdate part modeling properties for a given project’s CCA.\n\nAvailable Since: 2024R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\npart_modeling_props: dict[str, bool | float | str]\n\nPart modeling properties for a CCA consisting of these properties:\n\ncca_name: str\n\nName of the CCA.\n\npart_enabled: bool\n\nWhether to enable part modeling. All other fields are ignored if disabled.\n\npart_min_size: float, optional\n\nMinimum part size.\n\npart_min_size_units: str, optional\n\nMinimum part size units.\n\npart_elem_order: str, optional\n\nPart element order.\nOptions are \"First Order (Linear)\", \"Second Order (Quadratic)\",\nor \"Solid Shell\".\n\npart_max_edge_length: float, optional\n\nPart max edge length.\n\npart_max_edge_length_units: str, optional\n\nPart max edge length units.\n\npart_max_vertical: float, optional\n\nPart max vertical.\n\npart_max_vertical_units: str, optional\n\nPart max vertical units.\n\npart_results_filtered: bool, optional\n\nWhether to enable filtered part results.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.analysis.update_part_modeling_props(\n    \"Test\",\n    {\n        \"cca_name\": \"Card\",\n        \"part_enabled\": True,\n        \"part_min_size\": 1,\n        \"part_min_size_units\": \"in\",\n        \"part_elem_order\": \"First Order (Linear)\",\n        \"part_max_edge_length\": 1,\n        \"part_max_edge_length_units\": \"in\",\n        \"part_max_vertical\": 1,\n        \"part_max_vertical_units\": \"in\",\n        \"part_results_filtered\": True\n    }\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.model_json_schema.html#model_json_schema","title":"model_json_schema","text":"model_json_schema\n\n\n\nclassmethod RectangularShape.model_json_schema(by_alias=True, ref_template='#/$defs/{model}', schema_generator=<class 'pydantic.json_schema.GenerateJsonSchema'>, mode='validation')\n\nGenerates a JSON schema for a model class.\n\nParameters\n\nby_alias (bool) – Whether to use attribute aliases or not.\n\nref_template (str) – The reference template.\n\nschema_generator (type[GenerateJsonSchema]) – To override the logic used to generate the JSON schema, as a subclass of\nGenerateJsonSchema with your desired modifications\n\nmode (Literal['validation', 'serialization']) – The mode in which to generate the schema.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nThe JSON schema for the given model class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.model_construct.html#model_construct","title":"model_construct","text":"model_construct\n\n\n\nclassmethod UpdateTestPointsRequest.model_construct(_fields_set=None, **values)\n\nCreates a new instance of the Model class with validated data.\n\nCreates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n\nmodel_construct() generally respects the model_config.extra setting on the provided model.\nThat is, if model_config.extra == ‘allow’, then all extra passed values are added to the model instance’s __dict__\nand __pydantic_extra__ fields. If model_config.extra == ‘ignore’ (the default), then all extra passed values are ignored.\nBecause no validation is performed with a call to model_construct(), having model_config.extra == ‘forbid’ does not result in\nan error if extra values are passed, but they will be ignored.\n\nParameters\n\n_fields_set (set[str] | None) – A set of field names that were originally explicitly set during instantiation. If provided,\nthis is directly used for the [model_fields_set][pydantic.BaseModel.model_fields_set] attribute.\nOtherwise, the field names from the values argument will be used.\n\nvalues (Any) – Trusted or pre-validated data dictionary.\n\nReturn type\n\nSelf\n\nReturns\n\nA new instance of the Model class with validated data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.model_fields.html#model_fields","title":"model_fields","text":"model_fields\n\n\n\nCopperGerberFile.model_fields = {'parse_decimal_first_enabled': FieldInfo(annotation=Union[bool, NoneType], required=False, default=False)}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.x.html#x","title":"x","text":"x\n\n\n\nICTFixtureProperties.x: str\n\nCenter X\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.model_computed_fields.html#model_computed_fields","title":"model_computed_fields","text":"model_computed_fields\n\n\n\nPottingRegion.model_computed_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.parse_obj.html#parse_obj","title":"parse_obj","text":"parse_obj\n\n\n\nclassmethod TestPointProperties.parse_obj(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.model_parametrized_name.html#model_parametrized_name","title":"model_parametrized_name","text":"model_parametrized_name\n\n\n\nclassmethod GerberOutlineFile.model_parametrized_name(params)\n\nCompute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nParameters\n\nparams (tuple[type[Any], ...]) – Tuple of types of the class. Given a generic class\nModel with 2 type variables and a concrete model Model[str, int],\nthe value (str, int) would be passed to params.\n\nReturn type\n\nstr\n\nReturns\n\nString representing the new class where params are passed to cls as type variables.\n\nRaises\n\nTypeError – Raised when trying to generate concrete names for non-generic models.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.parse_file.html#parse_file","title":"parse_file","text":"parse_file\n\n\n\nclassmethod PottingRegionDeleteData.parse_file(path, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.optional_str_validation.html#optional_str_validation","title":"optional_str_validation","text":"optional_str_validation\n\n\n\nclassmethod OutlineFile.optional_str_validation(value, info)\n\nAllow empty strings for file_comment.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.dict.html#dict","title":"dict","text":"dict\n\n\n\nOutlineFile.dict(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False)\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.json.html#json","title":"json","text":"json\n\n\n\nCopperImageFile.json(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.model_validate_strings.html#model_validate_strings","title":"model_validate_strings","text":"model_validate_strings\n\n\n\nclassmethod CopperImageFile.model_validate_strings(obj, *, strict=None, context=None, by_alias=None, by_name=None)\n\nValidate the given object with string data against the Pydantic model.\n\nParameters\n\nobj (Any) – The object containing string data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.width.html#width","title":"width","text":"width\n\n\n\nICTFixtureProperties.width: str\n\nWidth\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/layer_types.html#layer-types","title":"Layer Types","text":"Layer Types\n\nClasses used for the Layer API.\n\n\n\n\n\nModule containing types for the Layer Service.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.update_forward_refs.html#update_forward_refs","title":"update_forward_refs","text":"update_forward_refs\n\n\n\nclassmethod SlotShape.update_forward_refs(**localns)\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.model_parametrized_name.html#model_parametrized_name","title":"model_parametrized_name","text":"model_parametrized_name\n\n\n\nclassmethod CopperImageFile.model_parametrized_name(params)\n\nCompute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nParameters\n\nparams (tuple[type[Any], ...]) – Tuple of types of the class. Given a generic class\nModel with 2 type variables and a concrete model Model[str, int],\nthe value (str, int) would be passed to params.\n\nReturn type\n\nstr\n\nReturns\n\nString representing the new class where params are passed to cls as type variables.\n\nRaises\n\nTypeError – Raised when trying to generate concrete names for non-generic models.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.project.Project.import_project_zip_archive_single_mode.html#import_project_zip_archive_single_mode","title":"import_project_zip_archive_single_mode","text":"import_project_zip_archive_single_mode\n\n\n\nProject.import_project_zip_archive_single_mode(project, category, archive_file, destination_file_directory)\n\nImport a zipped project archive – single project mode.\n\nAvailable Since: 2024R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncategory: str\n\nSherlock project category.\n\narchive_file: str\n\nFull path to the .zip archive file containing the project data.\n\ndestination_file_directory: str\n\nDirectory in which the Sherlock project folder will be created.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_project_zip_archive_single_mode(\"Tutorial Project\",\n\"Demos\",\n\"Tutorial Project.zip\",\n\"New Tutorial Project\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.length.html#length","title":"length","text":"length\n\n\n\nSlotShape.length: float\n\nfloat\n\nType\n\nLength\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.potting_region.html#potting_region","title":"potting_region","text":"potting_region\n\n\n\nPottingRegionUpdateData.potting_region: PottingRegion\n\nPotting region data used to update the potting region.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.model.Model.html#ansyssherlockcoremodelmodel","title":"ansys.sherlock.core.model.Model","text":"ansys.sherlock.core.model.Model\n\n\n\nclass ansys.sherlock.core.model.Model(channel, server_version)\n\nContains all model generation capabilities.\n\nMethods\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.parse_raw.html#parse_raw","title":"parse_raw","text":"parse_raw\n\n\n\nclassmethod GetTestPointPropertiesRequest.parse_raw(b, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.model_dump.html#model_dump","title":"model_dump","text":"model_dump\n\n\n\nOutlineFile.model_dump(*, mode='python', include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump](../concepts/serialization.md#modelmodel_dump)\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nParameters\n\nmode (Union[Literal['json', 'python'], str]) – The mode in which to_python should run.\nIf mode is ‘json’, the output will only contain JSON serializable types.\nIf mode is ‘python’, the output may contain non-JSON-serializable Python objects.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to include in the output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to exclude from the output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to use the field’s alias in the dictionary key if defined.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nA dictionary representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.html#ansyssherlockcoretypeslayer_typestestpointproperties","title":"ansys.sherlock.core.types.layer_types.TestPointProperties","text":"ansys.sherlock.core.types.layer_types.TestPointProperties\n\n\n\nclass ansys.sherlock.core.types.layer_types.TestPointProperties(**data)\n\nContains the properties of a test point.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.model_validate.html#model_validate","title":"model_validate","text":"model_validate\n\n\n\nclassmethod CopyPottingRegionRequest.model_validate(obj, *, strict=None, from_attributes=None, context=None, by_alias=None, by_name=None)\n\nValidate a pydantic model instance.\n\nParameters\n\nobj (Any) – The object to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\nfrom_attributes (bool | None) – Whether to extract data from object attributes.\n\ncontext (Any | None) – Additional context to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nRaises\n\nValidationError – If the object could not be validated.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.model_extra.html#model_extra","title":"model_extra","text":"model_extra\n\n\n\nproperty PottingRegionDeleteData.model_extra: dict[str, Any] | None\n\nGet extra fields set during validation.\n\nReturns\n\nA dictionary of extra fields, or None if config.extra is not set to “allow”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.image_color.html#image_color","title":"image_color","text":"image_color\n\n\n\nCopperImageFile.image_color: Optional[str]\n\nOptional color description or label for the image (e.g., ‘black’, ‘white’).\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.lifecycle.Lifecycle.html#ansyssherlockcorelifecyclelifecycle","title":"ansys.sherlock.core.lifecycle.Lifecycle","text":"ansys.sherlock.core.lifecycle.Lifecycle\n\n\n\nclass ansys.sherlock.core.lifecycle.Lifecycle(channel, server_version)\n\nContains all life cycle management capabilities.\n\nMethods\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.stackup.Stackup.html#ansyssherlockcorestackupstackup","title":"ansys.sherlock.core.stackup.Stackup","text":"ansys.sherlock.core.stackup.Stackup\n\n\n\nclass ansys.sherlock.core.stackup.Stackup(channel, server_version)\n\nContains all stackup management capabilities.\n\nMethods\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_potting_region.html#add-potting-regions-for-pcb-analysis","title":"Add Potting Regions for PCB Analysis","text":"Add Potting Regions for PCB Analysis\n\nThis example demonstrates how to use the Sherlock gRPC service to:\n- Import a project.\n- Add potting regions to a PCB model.\n- Define potting shapes and properties."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_potting_region.html#description","title":"Add Potting Regions for PCB Analysis > Description","text":"Description\n\nThis script connects to the Sherlock gRPC service, imports a project,\nand creates potting regions."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_potting_region.html#connect-to-sherlock","title":"Add Potting Regions for PCB Analysis > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_potting_region.html#delete-project","title":"Add Potting Regions for PCB Analysis > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_potting_region.html#import-tutorial-project","title":"Add Potting Regions for PCB Analysis > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_potting_region.html#add-potting-region","title":"Add Potting Regions for PCB Analysis > Add Potting Region","text":"Add Potting Region\n\nDefine a polygonal shape and add it as a potting region to the PCB.\n\n\n\nDownload Jupyter notebook: add_potting_region.ipynb\n\nDownload Python source code: add_potting_region.py\n\nDownload zipped: add_potting_region.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.lifecycle.Lifecycle.save_shock_pulse_profile.html#save_shock_pulse_profile","title":"save_shock_pulse_profile","text":"save_shock_pulse_profile\n\n\n\nLifecycle.save_shock_pulse_profile(request)\n\nSave a shock pulse life cycle event profile to a .dat or .csv file.\n\nAvailable Since: 2026R1\n\nParameters\n\nrequest\n\nSaveShockPulseProfileRequest\n\nRequest object containing the information needed to save a shock pulse profile.\n\nReturns\n\n:\n\n\n\nSherlockCommonService_pb2.ReturnCode\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nReturnCode\n\nExamples\n\n>>> from ansys.sherlock.core.types.lifecycle_types import SaveShockPulseProfileRequest\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> response = sherlock.lifecycle.save_shock_pulse_profile(\n>>>     SaveShockPulseProfileRequest(\n>>>         project=\"MyProject\",\n>>>         phase_name=\"ShockPhase\",\n>>>         event_name=\"Pulse_200g\",\n>>>         file_path=\"/tmp/Pulse_200g.csv\",\n>>>     )\n>>> )\n>>> assert response.value == 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.model_copy.html#model_copy","title":"model_copy","text":"model_copy\n\n\n\nCircularShape.model_copy(*, update=None, deep=False)\n\n!!! abstract “Usage Documentation”\n\n[model_copy](../concepts/serialization.md#model_copy)\n\nReturns a copy of the model.\n\n!!! note\n\nThe underlying instance’s [__dict__][object.__dict__] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property]).\n\nParameters\n\nupdate (Mapping[str, Any] | None) – Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\n\ndeep (bool) – Set to True to make a deep copy of the model.\n\nReturn type\n\nSelf\n\nReturns\n\nNew model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.parse_file.html#parse_file","title":"parse_file","text":"parse_file\n\n\n\nclassmethod OutlineFile.parse_file(path, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.project.Project.update_thermal_maps.html#update_thermal_maps","title":"update_thermal_maps","text":"update_thermal_maps\n\n\n\nProject.update_thermal_maps(project, thermal_map_files)\n\nUpdate thermal map files to a Sherlock project.\n\nAvailable Since: 2024R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project to update thermal maps to.\n\nthermal_map_files: list\n\nList of thermal map files consisting of these properties:\n\nfile_name: str\n\nName of the thermal file to update.\n\nfile_type: ThermalMapsFileType\n\nThermal maps file type.\n\nfile_comment: str, optional\n\nComment to associate with the file.\n\nthermal_board_side: ThermalBoardSide\n\nThermal board side.\n\nfile_data: CsvExcelFile|IcepakFile|ImageFile\n\nThe properties of the thermal map file to update.\n\nthermal_profiles: List of str\n\nList of thermal profiles.\n\ncca_names: List of str, optional\n\nList of CCA names to provide thermal maps for. The default is None,\nin which case all CCAs in the project are returned.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> from ansys.sherlock.core.types.project_types import (\n    BoardBounds,\n    ImageBounds,\n    ImageFile,\n    LegendBounds,\n    LegendOrientation,\n    ThermalBoardSide,\n    ThermalMapsFileType,\n)\n>>> sherlock = launch_sherlock()\n>>> thermal_map_properties = ImageFile(board_bounds=BoardBounds([\n    (1.0, 2.0),\n    (3.0, 4.0),\n    (1.0, 2.0),\n    (1.0, 2.0)]),\n    coordinate_units=\"in\",\n    image_bounds=ImageBounds(0.0, 0.0, 10.0, 8.0),\n    legend_bounds=LegendBounds(1.0, 2.0, 4.0, 2.0),\n    legend_orientation=LegendOrientation.VERTICAL,\n    max_temperature=50.0,\n    max_temperature_units=\"C\",\n    min_temperature=20.0,\n    min_temperature_units=\"C\"\n)\n>>> files = [\n    {\n        \"file_name\": \"thermal_map_file.jpg\",\n        \"file_type\": ThermalMapsFileType.IMAGE,\n        \"file_comment\": \"Update thermal map\",\n        \"thermal_board_side\": ThermalBoardSide.TOP,\n        \"file_data\": thermal_map_properties,\n        \"thermal_profiles\": [\"Environmental/1 - Temp Cycle - Min\"],\n        \"cca_names\": [\"CCA1\", \"CCA2\"]\n    },\n]\n>>> sherlock.project.update_thermal_maps(\"Tutorial Project\", files)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.schema_json.html#schema_json","title":"schema_json","text":"schema_json\n\n\n\nclassmethod PottingRegion.schema_json(*, by_alias=True, ref_template='#/$defs/{model}', **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.schema.html#schema","title":"schema","text":"schema\n\n\n\nclassmethod PottingRegionDeleteData.schema(by_alias=True, ref_template='#/$defs/{model}')\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.model_validate_json.html#model_validate_json","title":"model_validate_json","text":"model_validate_json\n\n\n\nclassmethod CopperImageFile.model_validate_json(json_data, *, strict=None, context=None, by_alias=None, by_name=None)\n\n!!! abstract “Usage Documentation”\n\n[JSON Parsing](../concepts/json.md#json-parsing)\n\nValidate the given JSON data against the Pydantic model.\n\nParameters\n\njson_data (str | bytes | bytearray) – The JSON data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\nRaises\n\nValidationError – If json_data is not a JSON string or the object could not be validated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.model_dump_json.html#model_dump_json","title":"model_dump_json","text":"model_dump_json\n\n\n\nOutlineFile.model_dump_json(*, indent=None, include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump_json](../concepts/serialization.md#modelmodel_dump_json)\n\nGenerates a JSON representation of the model using Pydantic’s to_json method.\n\nParameters\n\nindent (int | None) – Indentation to use in the JSON output. If None is passed, the output will be compact.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to include in the JSON output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to exclude from the JSON output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to serialize using field aliases.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\nstr\n\nReturns\n\nA JSON string representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_part_location_by_file.html#update-part-locations-by-file","title":"Update Part Locations by File","text":"Update Part Locations by File\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nand update part locations using a CSV file."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_part_location_by_file.html#description","title":"Update Part Locations by File > Description","text":"Description\n\nSherlock’s gRPC API allows users to automate workflows such as updating part\nlocations for printed circuit boards (PCBs) using a CSV file.\nThis script demonstrates how to:\n- Connect to the Sherlock service.\n- Import a project.\n- Update part locations using a CSV file.\n\nThe updated part locations can ensure consistency across various PCB designs."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_part_location_by_file.html#connect-to-sherlock","title":"Update Part Locations by File > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_part_location_by_file.html#delete-project","title":"Update Part Locations by File > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_part_location_by_file.html#import-tutorial-project","title":"Update Part Locations by File > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_part_location_by_file.html#update-part-locations-by-file","title":"Update Part Locations by File","text":"Update Part Locations by File\n\nUpdate the part locations for the “Card” of the “Test” project using a CSV file.\n\n\n\nDownload Jupyter notebook: update_part_location_by_file.ipynb\n\nDownload Python source code: update_part_location_by_file.py\n\nDownload zipped: update_part_location_by_file.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.model_rebuild.html#model_rebuild","title":"model_rebuild","text":"model_rebuild\n\n\n\nclassmethod PottingRegionDeleteData.model_rebuild(*, force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace=None)\n\nTry to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nParameters\n\nforce (bool) – Whether to force the rebuilding of the model schema, defaults to False.\n\nraise_errors (bool) – Whether to raise errors, defaults to True.\n\n_parent_namespace_depth (int) – The depth level of the parent namespace, defaults to 2.\n\n_types_namespace (Mapping[str, Any] | None) – The types namespace, defaults to None.\n\nReturn type\n\nbool | None\n\nReturns\n\nReturns None if the schema is already “complete” and rebuilding was not required.\nIf rebuilding _was_ required, returns True if rebuilding was successful, otherwise False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.schema_json.html#schema_json","title":"schema_json","text":"schema_json\n\n\n\nclassmethod UpdateICTFixturesRequest.schema_json(*, by_alias=True, ref_template='#/$defs/{model}', **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.model_computed_fields.html#model_computed_fields","title":"model_computed_fields","text":"model_computed_fields\n\n\n\nCircularShape.model_computed_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.parse_raw.html#parse_raw","title":"parse_raw","text":"parse_raw\n\n\n\nclassmethod UpdateTestPointsRequest.parse_raw(b, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.model_json_schema.html#model_json_schema","title":"model_json_schema","text":"model_json_schema\n\n\n\nclassmethod OutlineFile.model_json_schema(by_alias=True, ref_template='#/$defs/{model}', schema_generator=<class 'pydantic.json_schema.GenerateJsonSchema'>, mode='validation')\n\nGenerates a JSON schema for a model class.\n\nParameters\n\nby_alias (bool) – Whether to use attribute aliases or not.\n\nref_template (str) – The reference template.\n\nschema_generator (type[GenerateJsonSchema]) – To override the logic used to generate the JSON schema, as a subclass of\nGenerateJsonSchema with your desired modifications\n\nmode (Literal['validation', 'serialization']) – The mode in which to generate the schema.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nThe JSON schema for the given model class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.analysis.Analysis.update_mechanical_shock_props.html#update_mechanical_shock_props","title":"update_mechanical_shock_props","text":"update_mechanical_shock_props\n\n\n\nAnalysis.update_mechanical_shock_props(project, mechanical_shock_properties)\n\nUpdate properties for a mechanical shock analysis.\n\nAvailable Since: 2024R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\nmechanical_shock_properties: list[dict[str, bool | float | int | str]]\n\nMechanical shock properties for a CCA consisting of these properties:\n\ncca_name: str\n\nName of the CCA.\n\nmodel_source: ModelSource, optional\n\nModel source. The default is None.\n\nshock_result_count\n\nint\n\nNumber of mechanical shock result layers to generate.\n\ncritical_shock_strain: float\n\nCritical shock strain. The default is None.\n\ncritical_shock_strain_units: str\n\nCritical shock strain units. The default is None.\nOptions are \"strain\", \"ε\", and \"µε\".\n\npart_validation_enabled: bool\n\nWhether to enable part validation. The default is None.\n\nrequire_material_assignment_enabled: bool\n\nWhether to require material assignment. The default is None.\n\nforce_model_rebuild: str\n\nHow to handle rebuilding of the model. The default is None.\nOptions are \"FORCE\" and \"AUTO\".\n\nnatural_freq_min: int\n\nMinimum frequency. The default is None.\n\nnatural_freq_min_units: str\n\nMinimum frequency units. The default is None.\nOptions are \"HZ\", \"KHZ\", \"MHZ\", and \"GHZ\".\n\nnatural_freq_max: int\n\nMaximum frequency. The default is None.\n\nnatural_freq_max_units: str\n\nMaximum frequency units. The default is None.\nOptions are \"HZ\", \"KHZ\", \"MHZ\", and \"GHZ\".\n\nanalysis_temp: float\n\nTemperature. The default is None.\n\nanalysis_temp_units: str\n\nTemperature units. The default is None.\nOptions are \"C\", \"F\", and \"K\".\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.analysis.update_mechanical_shock_props(\n    \"Test\",\n    [{\n        \"cca_name\": \"Card\",\n        \"model_source\": ModelSource.GENERATED,\n        \"shock_result_count\": 2,\n        \"critical_shock_strain\": 10,\n        \"critical_shock_strain_units\": \"strain\",\n        \"part_validation_enabled\": True,\n        \"require_material_assignment_enabled\": False,\n        \"force_model_rebuild\": \"AUTO\",\n        \"natural_freq_min\": 10,\n        \"natural_freq_min_units\": \"Hz\",\n        \"natural_freq_max\": 100,\n        \"natural_freq_max_units\": \"KHz\",\n        \"analysis_temp\": 20,\n        \"analysis_temp_units\": \"F\",\n    },\n    ]\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.parse_raw.html#parse_raw","title":"parse_raw","text":"parse_raw\n\n\n\nclassmethod PottingRegionDeleteData.parse_raw(b, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.model_validate.html#model_validate","title":"model_validate","text":"model_validate\n\n\n\nclassmethod PolygonalShape.model_validate(obj, *, strict=None, from_attributes=None, context=None, by_alias=None, by_name=None)\n\nValidate a pydantic model instance.\n\nParameters\n\nobj (Any) – The object to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\nfrom_attributes (bool | None) – Whether to extract data from object attributes.\n\ncontext (Any | None) – Additional context to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nRaises\n\nValidationError – If the object could not be validated.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.model_dump.html#model_dump","title":"model_dump","text":"model_dump\n\n\n\nPottingRegion.model_dump(*, mode='python', include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump](../concepts/serialization.md#modelmodel_dump)\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nParameters\n\nmode (Union[Literal['json', 'python'], str]) – The mode in which to_python should run.\nIf mode is ‘json’, the output will only contain JSON serializable types.\nIf mode is ‘python’, the output may contain non-JSON-serializable Python objects.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to include in the output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to exclude from the output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to use the field’s alias in the dictionary key if defined.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nA dictionary representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.model_copy.html#model_copy","title":"model_copy","text":"model_copy\n\n\n\nPolygonalShape.model_copy(*, update=None, deep=False)\n\n!!! abstract “Usage Documentation”\n\n[model_copy](../concepts/serialization.md#model_copy)\n\nReturns a copy of the model.\n\n!!! note\n\nThe underlying instance’s [__dict__][object.__dict__] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property]).\n\nParameters\n\nupdate (Mapping[str, Any] | None) – Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\n\ndeep (bool) – Set to True to make a deep copy of the model.\n\nReturn type\n\nSelf\n\nReturns\n\nNew model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.validate.html#validate","title":"validate","text":"validate\n\n\n\nclassmethod DeletePottingRegionRequest.validate(value)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.html#ansyssherlockcoretypesproject_typescopperimagefile","title":"ansys.sherlock.core.types.project_types.CopperImageFile","text":"ansys.sherlock.core.types.project_types.CopperImageFile\n\n\n\nclass ansys.sherlock.core.types.project_types.CopperImageFile(**data)\n\nProperties specific to an image-based copper file.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.from_orm.html#from_orm","title":"from_orm","text":"from_orm\n\n\n\nclassmethod CsvExcelOutlineFile.from_orm(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.model_validate_strings.html#model_validate_strings","title":"model_validate_strings","text":"model_validate_strings\n\n\n\nclassmethod UpdateTestPointsRequest.model_validate_strings(obj, *, strict=None, context=None, by_alias=None, by_name=None)\n\nValidate the given object with string data against the Pydantic model.\n\nParameters\n\nobj (Any) – The object containing string data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.schema.html#schema","title":"schema","text":"schema\n\n\n\nclassmethod UpdateICTFixturesRequest.schema(by_alias=True, ref_template='#/$defs/{model}')\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.copy.html#copy","title":"copy","text":"copy\n\n\n\nPCBShape.copy(*, include=None, exclude=None, update=None, deep=False)\n\nReturns a copy of the model.\n\n!!! warning “Deprecated”\n\nThis method is now deprecated; use model_copy instead.\n\nIf you need include or exclude, use:\n\n`python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n`\n\nParameters\n\ninclude – Optional set or mapping specifying which fields to include in the copied model.\n\nexclude – Optional set or mapping specifying which fields to exclude in the copied model.\n\nupdate – Optional dictionary of field-value pairs to override field values in the copied model.\n\ndeep – If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns\n\nA copy of the model with included, excluded and updated fields as specified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.validate.html#validate","title":"validate","text":"validate\n\n\n\nclassmethod CsvExcelOutlineFile.validate(value)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.schema_json.html#schema_json","title":"schema_json","text":"schema_json\n\n\n\nclassmethod PottingRegionCopyData.schema_json(*, by_alias=True, ref_template='#/$defs/{model}', **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.model_computed_fields.html#model_computed_fields","title":"model_computed_fields","text":"model_computed_fields\n\n\n\nTestPointProperties.model_computed_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.model_validate.html#model_validate","title":"model_validate","text":"model_validate\n\n\n\nclassmethod DeletePottingRegionRequest.model_validate(obj, *, strict=None, from_attributes=None, context=None, by_alias=None, by_name=None)\n\nValidate a pydantic model instance.\n\nParameters\n\nobj (Any) – The object to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\nfrom_attributes (bool | None) – Whether to extract data from object attributes.\n\ncontext (Any | None) – Additional context to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nRaises\n\nValidationError – If the object could not be validated.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.project.html#project","title":"project","text":"project\n\n\n\nGetTestPointPropertiesRequest.project: str\n\nName of the project.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.html#ansyssherlockcoretypeslayer_typescopypottingregionrequest","title":"ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest","text":"ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest\n\n\n\nclass ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest(**data)\n\nRequest to delete 1 or more potting regions.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.optional_str_validation.html#optional_str_validation","title":"optional_str_validation","text":"optional_str_validation\n\n\n\nclassmethod GetICTFixturesPropertiesRequest.optional_str_validation(value, info)\n\nAllow the ict_fixtures_ids to not be set, i.e., None.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 0 files from examplesgallery_examples:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nN/A\n\nN/A\n\nN/A\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.lifecycle.Lifecycle.add_thermal_event.html#add_thermal_event","title":"add_thermal_event","text":"add_thermal_event\n\n\n\nLifecycle.add_thermal_event(project, phase_name, event_name, num_of_cycles, cycle_type, cycle_state, description='')\n\nAdd a thermal event to a life cycle phase.\n\nAvailable Since: 2021R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\nphase_name: str\n\nName of the life cycle phase to add the thermal event to.\n\nevent_name: str\n\nName of the thermal event.\n\nnum_of_cycles: float\n\nNumber of cycles for the thermal event.\n\ncycle_type: str\n\nCycle type. Options are \"COUNT\", \"DUTY CYCLE\", \"PER YEAR\",\n\"PER DAY\", \"PER HOUR\", \"PER MIN\", and \"PER SEC\".\n\ncycle_state: str\n\nLife cycle state. Options are \"OPERATING\" and \"STORAGE\".\n\ndescription: str, optional\n\nDescription of the thermal event. The default is \"\".\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n)\n>>> sherlock.lifecycle.create_life_phase(\n    \"Test\",\n    \"Example\",\n    1.5,\n    \"year\",\n    4.0,\n    \"COUNT\",\n)\n>>> sherlock.lifecycle.add_thermal_event(\n    \"Test\",\n    \"Example\",\n    \"Event1\",\n    4.0,\n    \"PER YEAR\",\n    \"STORAGE\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.model_dump.html#model_dump","title":"model_dump","text":"model_dump\n\n\n\nPottingRegionDeleteData.model_dump(*, mode='python', include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump](../concepts/serialization.md#modelmodel_dump)\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nParameters\n\nmode (Union[Literal['json', 'python'], str]) – The mode in which to_python should run.\nIf mode is ‘json’, the output will only contain JSON serializable types.\nIf mode is ‘python’, the output may contain non-JSON-serializable Python objects.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to include in the output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to exclude from the output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to use the field’s alias in the dictionary key if defined.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nA dictionary representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.file_type.html#file_type","title":"file_type","text":"file_type\n\n\n\nOutlineFile.file_type: OutlineFileType\n\nThe type of outline file.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.analysis.Analysis.get_natural_frequency_input_fields.html#get_natural_frequency_input_fields","title":"get_natural_frequency_input_fields","text":"get_natural_frequency_input_fields\n\n\n\nAnalysis.get_natural_frequency_input_fields()\n\nGet natural frequency property fields based on the user configuration.\n\nAvailable Since: 2023R2\n\nReturns\n\n:\n\n\n\npython:list[python:str]\n\nMatural frequency property fields based on the user configuration.\n\nReturn type\n\nlist[str]\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n        \"ODB++ Tutorial.tgz\",\n        True,\n        True,\n        True,\n        True,\n        project=\"Test\",\n        cca_name=\"Card\",\n    )\n    >>> sherlock.analysis.get_natural_frequency_input_fields()\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.model_validate.html#model_validate","title":"model_validate","text":"model_validate\n\n\n\nclassmethod UpdateICTFixturesRequest.model_validate(obj, *, strict=None, from_attributes=None, context=None, by_alias=None, by_name=None)\n\nValidate a pydantic model instance.\n\nParameters\n\nobj (Any) – The object to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\nfrom_attributes (bool | None) – Whether to extract data from object attributes.\n\ncontext (Any | None) – Additional context to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nRaises\n\nValidationError – If the object could not be validated.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/lifecycle.html#lifecycle","title":"Lifecycle","text":"Lifecycle\n\n\n\nModule containing all life cycle management capabilities.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_all_mount_points.html#export-all-mount-points","title":"Export All Mount Points","text":"Export All Mount Points\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nand export all mount points for a CCA."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_all_mount_points.html#description","title":"Export All Mount Points > Description","text":"Description\n\nSherlock’s gRPC API allows users to automate various workflows, including exporting all\nmount points for a PCB.\nThis script demonstrates how to:\n- Connect to the Sherlock service.\n- Import a tutorial project.\n- Export all mount points to a CSV file.\n\nThe exported mount points can be used for further analysis or design purposes."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_all_mount_points.html#connect-to-sherlock","title":"Export All Mount Points > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_all_mount_points.html#delete-project","title":"Export All Mount Points > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_all_mount_points.html#import-tutorial-project","title":"Export All Mount Points > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_all_mount_points.html#export-all-mount-points","title":"Export All Mount Points","text":"Export All Mount Points\n\nExport all mount points for the “Main Board” to a CSV file.\n\n\n\nDownload Jupyter notebook: export_all_mount_points.ipynb\n\nDownload Python source code: export_all_mount_points.py\n\nDownload zipped: export_all_mount_points.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.model_parametrized_name.html#model_parametrized_name","title":"model_parametrized_name","text":"model_parametrized_name\n\n\n\nclassmethod PottingRegion.model_parametrized_name(params)\n\nCompute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nParameters\n\nparams (tuple[type[Any], ...]) – Tuple of types of the class. Given a generic class\nModel with 2 type variables and a concrete model Model[str, int],\nthe value (str, int) would be passed to params.\n\nReturn type\n\nstr\n\nReturns\n\nString representing the new class where params are passed to cls as type variables.\n\nRaises\n\nTypeError – Raised when trying to generate concrete names for non-generic models.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.cca.html#cca","title":"cca","text":"cca\n\n\n\nCopperFile.cca: List[str]\n\nList of CCA (circuit card assembly) names associated with this copper file.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.validate.html#validate","title":"validate","text":"validate\n\n\n\nclassmethod SlotShape.validate(value)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.json.html#json","title":"json","text":"json\n\n\n\nSlotShape.json(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.model_rebuild.html#model_rebuild","title":"model_rebuild","text":"model_rebuild\n\n\n\nclassmethod UpdateICTFixturesRequest.model_rebuild(*, force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace=None)\n\nTry to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nParameters\n\nforce (bool) – Whether to force the rebuilding of the model schema, defaults to False.\n\nraise_errors (bool) – Whether to raise errors, defaults to True.\n\n_parent_namespace_depth (int) – The depth level of the parent namespace, defaults to 2.\n\n_types_namespace (Mapping[str, Any] | None) – The types namespace, defaults to None.\n\nReturn type\n\nbool | None\n\nReturns\n\nReturns None if the schema is already “complete” and rebuilding was not required.\nIf rebuilding _was_ required, returns True if rebuilding was successful, otherwise False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.model_computed_fields.html#model_computed_fields","title":"model_computed_fields","text":"model_computed_fields\n\n\n\nICTFixtureProperties.model_computed_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.from_orm.html#from_orm","title":"from_orm","text":"from_orm\n\n\n\nclassmethod PottingRegionUpdateData.from_orm(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.parse_raw.html#parse_raw","title":"parse_raw","text":"parse_raw\n\n\n\nclassmethod UpdateICTFixturesRequest.parse_raw(b, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.model_post_init.html#model_post_init","title":"model_post_init","text":"model_post_init\n\n\n\nGerberOutlineFile.model_post_init(context, /)\n\nOverride this method to perform additional initialization after __init__ and model_construct.\nThis is useful if you want to do some validation that requires the entire model to be initialized.\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.schema_json.html#schema_json","title":"schema_json","text":"schema_json\n\n\n\nclassmethod UpdatePottingRegionRequest.schema_json(*, by_alias=True, ref_template='#/$defs/{model}', **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.units.html#units","title":"units","text":"units\n\n\n\nICTFixtureProperties.units: str\n\nUnits\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.project.Project.list_thermal_maps.html#list_thermal_maps","title":"list_thermal_maps","text":"list_thermal_maps\n\n\n\nProject.list_thermal_maps(project, cca_names=None)\n\nList the thermal map files and their type assigned to each CCA of given CCAs.\n\nAvailable Since: 2024R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_names: List of str, optional\n\nList of CCA names to provide thermal maps for. The default is None,\nin which case all CCAs in the project are returned.\n\nReturns\n\n:\n\n\n\npython:list\n\nAll thermal map files or thermal map files and their type for the specified CCAs.\n\nReturn type\n\nlist\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> thermal_maps = sherlock.project.list_thermal_maps(\n    \"AssemblyTutorial\",\n    [\"Main Board\",\"Power Module\"]\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.model_fields.html#model_fields","title":"model_fields","text":"model_fields\n\n\n\nSlotShape.model_fields = {'center_x': FieldInfo(annotation=float, required=True), 'center_y': FieldInfo(annotation=float, required=True), 'length': FieldInfo(annotation=float, required=True), 'node_count': FieldInfo(annotation=int, required=True), 'rotation': FieldInfo(annotation=float, required=True), 'width': FieldInfo(annotation=float, required=True)}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.str_validation.html#str_validation","title":"str_validation","text":"str_validation\n\n\n\nclassmethod PottingRegion.str_validation(value, info)\n\nValidate string fields listed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.model_post_init.html#model_post_init","title":"model_post_init","text":"model_post_init\n\n\n\nPottingRegionDeleteData.model_post_init(context, /)\n\nOverride this method to perform additional initialization after __init__ and model_construct.\nThis is useful if you want to do some validation that requires the entire model to be initialized.\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/project_types.html#project-types","title":"Project Types","text":"Project Types\n\nClasses used for the Project API.\n\n"},{"objectID":"Home","href":"api/project_types.html#constants","title":"Project Types > Constants","text":"Constants\n\n\n\nclass ansys.sherlock.core.types.project_types.LegendOrientation\n\nConstants for legend orientation in the update thermal maps request.\n\n\n\nHORIZONTAL = 0\n\nHorizontal\n\n\n\nVERTICAL = 1\n\nVertical\n\n\n\nclass ansys.sherlock.core.types.project_types.OutlineFileType(value, names=<not given>, *values, module=None, qualname=None, type=None, start=1, boundary=None)\n\nConstants for File Type in the Update Outline request.\n\n\n\nCSV_EXCEL = 1\n\nCSV Excel\n\n\n\nGERBER = 2\n\nGerber\n\n\n\nIPC2581 = 3\n\nIPC2581\n\n\n\nclass ansys.sherlock.core.types.project_types.StrainMapsFileType\n\nConstants for File Type in the Add Strain Maps request.\n\n\n\nCSV = 0\n\nCSV\n\n\n\nEXCEL = 1\n\nExcel\n\n\n\nIMAGE = 2\n\nImage\n\n\n\nclass ansys.sherlock.core.types.project_types.StrainMapLegendOrientation\n\nConstants for legend orientation in the add strain maps request.\n\n\n\nHORIZONTAL = 0\n\nHorizontal\n\n\n\nVERTICAL = 1\n\nVertical\n\n\n\nclass ansys.sherlock.core.types.project_types.ThermalBoardSide\n\nConstants for thermal board side in the update thermal maps request.\n\n\n\nBOTH = 1\n\nBoth\n\n\n\nBOTTOM = 0\n\nBottom\n\n\n\nTOP = 2\n\nTop\n\n\n\nclass ansys.sherlock.core.types.project_types.ThermalMapsFileType\n\nConstants for File Type in the Update Thermal Maps request.\n\n\n\nCSV = 0\n\nCSV\n\n\n\nEXCEL = 1\n\nExcel\n\n\n\nIMAGE = 2\n\nImage\n\n\n\nTMAP = 3\n\nIcepak Thermal Map (.TMAP)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.analysis.Analysis.get_parts_list_validation_analysis_props.html#get_parts_list_validation_analysis_props","title":"get_parts_list_validation_analysis_props","text":"get_parts_list_validation_analysis_props\n\n\n\nAnalysis.get_parts_list_validation_analysis_props(project, cca_name)\n\nGet properties for a Part List Validation analysis.\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nReturns\n\n:\n\n\n\nPartsListValidationPropsResponse\n\nreturnCode: ReturnCode\n\nvalue: int\n\nStatus code of the response. 0 for success.\n\nmessage: str\n\nindicates general errors that occurred while attempting to update parts\n\npartLibrary: str\n\nPart library name\n\nprocessUseAVL: bool\n\nProcess option to use AVL\n\nprocessUseWizard: bool\n\nProcess option to use wizard\n\nprocessCheckConfirmedProperties: bool\n\nProcess option to check confirmed properties\n\nprocessCheckPartNumbers: bool\n\nProcess option to check part numbers\n\nmatching: MatchingMode\n\nMatching type\n\navlRequireInternalPartNumber: bool\n\nAVL option to require internal part number\n\navlRequireApprovedDescription: bool\n\nAVL option to require approved description\n\navlRequireApprovedManufacturer: bool\n\nAVL option to require approved manufacturer\n\nReturn type\n\nPartsListValidationPropsResponse\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> analysis_props = sherlock.analysis.get_parts_list_validation_analysis_props(\n    \"Test\", \"Card\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.schema.html#schema","title":"schema","text":"schema\n\n\n\nclassmethod CsvExcelOutlineFile.schema(by_alias=True, ref_template='#/$defs/{model}')\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.ImageBounds.html#ansyssherlockcoretypesproject_typesimagebounds","title":"ansys.sherlock.core.types.project_types.ImageBounds","text":"ansys.sherlock.core.types.project_types.ImageBounds\n\n\n\nclass ansys.sherlock.core.types.project_types.ImageBounds(image_x, image_y, height, width)\n\nContains the properties of the image bounds.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.from_orm.html#from_orm","title":"from_orm","text":"from_orm\n\n\n\nclassmethod GerberOutlineFile.from_orm(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.model_parametrized_name.html#model_parametrized_name","title":"model_parametrized_name","text":"model_parametrized_name\n\n\n\nclassmethod GetTestPointPropertiesRequest.model_parametrized_name(params)\n\nCompute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nParameters\n\nparams (tuple[type[Any], ...]) – Tuple of types of the class. Given a generic class\nModel with 2 type variables and a concrete model Model[str, int],\nthe value (str, int) would be passed to params.\n\nReturn type\n\nstr\n\nReturns\n\nString representing the new class where params are passed to cls as type variables.\n\nRaises\n\nTypeError – Raised when trying to generate concrete names for non-generic models.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.launcher.launch_sherlock.html#launch_sherlock","title":"launch_sherlock","text":"launch_sherlock\n\n\n\nansys.sherlock.core.launcher.launch_sherlock(host='127.0.0.1', port=9090, single_project_path='', sherlock_command_args='', year=None, release_number=None)\n\nLaunch Sherlock and start gRPC on a given host and port. Wait up to two minutes to connect.\n:rtype: Sherlock\n\nDeprecated since version 2025: R2\n\nUse launch() or launch_and_connect() instead.\n\nParameters\n\nhost: str, optional\n\nIP address to start gRPC on. The default is \"127.0.0.1\", which\nis the IP address for the local host.\n\nport: int, optional\n\nPort number for the connection.\n\nsingle_project_path\n\npython:str, optional\n\nPath to the Sherlock project if invoking Sherlock in the single-project mode.\n\nsherlock_command_args\n\npython:str, optional\n\nAdditional command arguments for launching Sherlock.\n\nyear: int, optional\n\n4-digit year of the Sherlock release to launch. If not provided,\nthe latest installed version of Sherlock will be launched.\n\nrelease_number: int, optional\n\nRelease number of Sherlock to launch. If not provided,\nthe latest installed version of Sherlock will be launched.\n\nReturns\n\n:\n\n\n\nSherlock\n\nThe instance of sherlock.\n\nExamples\n\n>>> from ansys.sherlock.core import launcher\n>>> launcher.launch_sherlock()\n\n>>> from ansys.sherlock.core import launcher\n>>> launcher.launch_sherlock(port=9092, year=2024, release_number=1)\n\n>>> from ansys.sherlock.core import launcher\n>>> project = \"C:\\\\Default Projects Directory\\\\ODB++ Tutorial\"\n>>> launcher.launch_sherlock(port=9092, single_project_path=project)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.gerber_file.html#gerber_file","title":"gerber_file","text":"gerber_file\n\n\n\nCopperFile.gerber_file: Optional[CopperGerberFile]\n\nOptional settings specific to Gerber file import.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.model_fields.html#model_fields","title":"model_fields","text":"model_fields\n\n\n\nICTFixtureProperties.model_fields = {'boundary': FieldInfo(annotation=str, required=True), 'chassis_material': FieldInfo(annotation=str, required=True), 'constraints': FieldInfo(annotation=str, required=True), 'diameter': FieldInfo(annotation=str, required=True), 'height': FieldInfo(annotation=str, required=True), 'id': FieldInfo(annotation=str, required=True), 'length': FieldInfo(annotation=str, required=True), 'material': FieldInfo(annotation=str, required=True), 'nodes': FieldInfo(annotation=str, required=True), 'polygon': FieldInfo(annotation=str, required=True), 'rotation': FieldInfo(annotation=str, required=True), 'shape': FieldInfo(annotation=str, required=True), 'side': FieldInfo(annotation=str, required=True), 'state': FieldInfo(annotation=str, required=True), 'type': FieldInfo(annotation=str, required=True), 'units': FieldInfo(annotation=str, required=True), 'width': FieldInfo(annotation=str, required=True), 'x': FieldInfo(annotation=str, required=True), 'y': FieldInfo(annotation=str, required=True)}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_project.html#sherlock-project-export","title":"Sherlock Project Export","text":"Sherlock Project Export\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nand export the project in multiple configurations.\n\nDescription\nSherlock’s gRPC API enables automation of various workflows, including project export.\nThis script demonstrates how to:\n- Connect to the Sherlock service.\n- Import a tutorial project ZIP archive.\n- Export a project with different configurations."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_project.html#connect-to-sherlock","title":"Sherlock Project Export > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_project.html#delete-project","title":"Sherlock Project Export > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_project.html#import-tutorial-project","title":"Sherlock Project Export > Import Tutorial Project","text":"Import Tutorial Project\n\nImport a sample project ZIP archive provided with the Sherlock installation."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_project.html#export-project","title":"Sherlock Project Export > Export Project","text":"Export Project\n\nExport the imported project with different configurations.\n\n\n\nDownload Jupyter notebook: export_project.ipynb\n\nDownload Python source code: export_project.py\n\nDownload zipped: export_project.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.model_post_init.html#model_post_init","title":"model_post_init","text":"model_post_init\n\n\n\nPCBShape.model_post_init(context, /)\n\nOverride this method to perform additional initialization after __init__ and model_construct.\nThis is useful if you want to do some validation that requires the entire model to be initialized.\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.model_config.html#model_config","title":"model_config","text":"model_config\n\n\n\nPottingRegionCopyData.model_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.model_validate.html#model_validate","title":"model_validate","text":"model_validate\n\n\n\nclassmethod PottingRegionUpdateData.model_validate(obj, *, strict=None, from_attributes=None, context=None, by_alias=None, by_name=None)\n\nValidate a pydantic model instance.\n\nParameters\n\nobj (Any) – The object to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\nfrom_attributes (bool | None) – Whether to extract data from object attributes.\n\ncontext (Any | None) – Additional context to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nRaises\n\nValidationError – If the object could not be validated.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.update_fixtures.html#update_fixtures","title":"update_fixtures","text":"update_fixtures\n\n\n\nUpdateICTFixturesRequest.update_fixtures: list[ICTFixtureProperties]\n\nList of ict fixtures with their properties to update\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_net_list.html#export-net-list","title":"Export Net List","text":"Export Net List\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nand export the net list associated with the imported project.\n\nDescription\nSherlock’s gRPC API enables automation of various workflows, including net list export.\nThis script demonstrates how to:\n- Connect to the Sherlock service.\n- Import a project.\n- Export the net list from the project."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_net_list.html#connect-to-sherlock","title":"Export Net List > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_net_list.html#delete-project","title":"Export Net List > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_net_list.html#import-tutorial-project","title":"Export Net List > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_net_list.html#export-net-list","title":"Export Net List","text":"Export Net List\n\nExport the net list from the imported project.\n\n\n\nDownload Jupyter notebook: export_net_list.ipynb\n\nDownload Python source code: export_net_list.py\n\nDownload zipped: export_net_list.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_mechanical_shock_strain_map_analysis.html#run-mechanical-shock-analysis-example","title":"Run Mechanical Shock Analysis Example","text":"Run Mechanical Shock Analysis Example\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nadd strain maps, and run a mechanical shock analysis based on strain maps."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_mechanical_shock_strain_map_analysis.html#description","title":"Run Mechanical Shock Analysis Example > Description","text":"Description\n\nSherlock provides tools to perform mechanical shock analysis using strain maps.\nThis script includes the following steps:\n- Connect to the Sherlock service.\n- Import a project.\n- Add a strain map file to the project.\n- Configure the analysis properties for mechanical shock.\n- Execute the mechanical shock analysis.\n\nFor further details, refer to the official documentation on mechanical shock analysis in Sherlock."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_mechanical_shock_strain_map_analysis.html#connect-to-sherlock","title":"Run Mechanical Shock Analysis Example > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_mechanical_shock_strain_map_analysis.html#delete-project","title":"Run Mechanical Shock Analysis Example > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_mechanical_shock_strain_map_analysis.html#import-tutorial-project","title":"Run Mechanical Shock Analysis Example > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_mechanical_shock_strain_map_analysis.html#add-strain-map","title":"Run Mechanical Shock Analysis Example > Add Strain Map","text":"Add Strain Map\n\nAdd a strain map to the project."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_mechanical_shock_strain_map_analysis.html#update-mechanical-shock-properties","title":"Run Mechanical Shock Analysis Example > Update Mechanical Shock Properties","text":"Update Mechanical Shock Properties\n\nConfigure properties for mechanical shock analysis using strain maps."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_mechanical_shock_strain_map_analysis.html#run-mechanical-shock-analysis","title":"Run Mechanical Shock Analysis Example > Run Mechanical Shock Analysis","text":"Run Mechanical Shock Analysis\n\nExecute the mechanical shock analysis based on strain maps.\n\n\n\nDownload Jupyter notebook: run_mechanical_shock_strain_map_analysis.ipynb\n\nDownload Python source code: run_mechanical_shock_strain_map_analysis.py\n\nDownload zipped: run_mechanical_shock_strain_map_analysis.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.parse_obj.html#parse_obj","title":"parse_obj","text":"parse_obj\n\n\n\nclassmethod GerberOutlineFile.parse_obj(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.image_type.html#image_type","title":"image_type","text":"image_type\n\n\n\nCopperImageFile.image_type: Optional[int]\n\nIndicates whether the image represents a background or foreground layer.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.model_config.html#model_config","title":"model_config","text":"model_config\n\n\n\nCopperFile.model_config: ClassVar[ConfigDict] = {'arbitrary_types_allowed': True}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.parse_obj.html#parse_obj","title":"parse_obj","text":"parse_obj\n\n\n\nclassmethod CopperImageFile.parse_obj(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.model_config.html#model_config","title":"model_config","text":"model_config\n\n\n\nDeletePottingRegionRequest.model_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.schema_json.html#schema_json","title":"schema_json","text":"schema_json\n\n\n\nclassmethod PCBShape.schema_json(*, by_alias=True, ref_template='#/$defs/{model}', **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.cca_name.html#cca_name","title":"cca_name","text":"cca_name\n\n\n\nGetTestPointPropertiesRequest.cca_name: str\n\nName of the CCA containing the test point properties to return.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.model_rebuild.html#model_rebuild","title":"model_rebuild","text":"model_rebuild\n\n\n\nclassmethod ICTFixtureProperties.model_rebuild(*, force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace=None)\n\nTry to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nParameters\n\nforce (bool) – Whether to force the rebuilding of the model schema, defaults to False.\n\nraise_errors (bool) – Whether to raise errors, defaults to True.\n\n_parent_namespace_depth (int) – The depth level of the parent namespace, defaults to 2.\n\n_types_namespace (Mapping[str, Any] | None) – The types namespace, defaults to None.\n\nReturn type\n\nbool | None\n\nReturns\n\nReturns None if the schema is already “complete” and rebuilding was not required.\nIf rebuilding _was_ required, returns True if rebuilding was successful, otherwise False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.copper_layer.html#copper_layer","title":"copper_layer","text":"copper_layer\n\n\n\nCopperFile.copper_layer: str\n\nThe name of the copper layer this file is associated with.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.json.html#json","title":"json","text":"json\n\n\n\nDeletePottingRegionRequest.json(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.model_computed_fields.html#model_computed_fields","title":"model_computed_fields","text":"model_computed_fields\n\n\n\nCopperImageFile.model_computed_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.model_config.html#model_config","title":"model_config","text":"model_config\n\n\n\nPottingRegion.model_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.model_validate_strings.html#model_validate_strings","title":"model_validate_strings","text":"model_validate_strings\n\n\n\nclassmethod PottingRegionDeleteData.model_validate_strings(obj, *, strict=None, context=None, by_alias=None, by_name=None)\n\nValidate the given object with string data against the Pydantic model.\n\nParameters\n\nobj (Any) – The object containing string data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.parse_file.html#parse_file","title":"parse_file","text":"parse_file\n\n\n\nclassmethod GetTestPointPropertiesRequest.parse_file(path, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.model_construct.html#model_construct","title":"model_construct","text":"model_construct\n\n\n\nclassmethod CircularShape.model_construct(_fields_set=None, **values)\n\nCreates a new instance of the Model class with validated data.\n\nCreates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n\nmodel_construct() generally respects the model_config.extra setting on the provided model.\nThat is, if model_config.extra == ‘allow’, then all extra passed values are added to the model instance’s __dict__\nand __pydantic_extra__ fields. If model_config.extra == ‘ignore’ (the default), then all extra passed values are ignored.\nBecause no validation is performed with a call to model_construct(), having model_config.extra == ‘forbid’ does not result in\nan error if extra values are passed, but they will be ignored.\n\nParameters\n\n_fields_set (set[str] | None) – A set of field names that were originally explicitly set during instantiation. If provided,\nthis is directly used for the [model_fields_set][pydantic.BaseModel.model_fields_set] attribute.\nOtherwise, the field names from the values argument will be used.\n\nvalues (Any) – Trusted or pre-validated data dictionary.\n\nReturn type\n\nSelf\n\nReturns\n\nA new instance of the Model class with validated data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.file_comment.html#file_comment","title":"file_comment","text":"file_comment\n\n\n\nOutlineFile.file_comment: Optional[str]\n\nThe comment for the outline file.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.model_validate.html#model_validate","title":"model_validate","text":"model_validate\n\n\n\nclassmethod CopperFile.model_validate(obj, *, strict=None, from_attributes=None, context=None, by_alias=None, by_name=None)\n\nValidate a pydantic model instance.\n\nParameters\n\nobj (Any) – The object to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\nfrom_attributes (bool | None) – Whether to extract data from object attributes.\n\ncontext (Any | None) – Additional context to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nRaises\n\nValidationError – If the object could not be validated.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.copy.html#copy","title":"copy","text":"copy\n\n\n\nOutlineFile.copy(*, include=None, exclude=None, update=None, deep=False)\n\nReturns a copy of the model.\n\n!!! warning “Deprecated”\n\nThis method is now deprecated; use model_copy instead.\n\nIf you need include or exclude, use:\n\n`python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n`\n\nParameters\n\ninclude – Optional set or mapping specifying which fields to include in the copied model.\n\nexclude – Optional set or mapping specifying which fields to exclude in the copied model.\n\nupdate – Optional dictionary of field-value pairs to override field values in the copied model.\n\ndeep – If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns\n\nA copy of the model with included, excluded and updated fields as specified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.model_validate.html#model_validate","title":"model_validate","text":"model_validate\n\n\n\nclassmethod PottingRegionDeleteData.model_validate(obj, *, strict=None, from_attributes=None, context=None, by_alias=None, by_name=None)\n\nValidate a pydantic model instance.\n\nParameters\n\nobj (Any) – The object to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\nfrom_attributes (bool | None) – Whether to extract data from object attributes.\n\ncontext (Any | None) – Additional context to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nRaises\n\nValidationError – If the object could not be validated.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 14 files from examplesgallery_examples01-project-configuration:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_gallery_examples_01-project-configuration_add_cca.py (add_cca.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_add_harmonic_event.py (add_harmonic_event.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_add_harmonic_profile.py (add_harmonic_profile.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_add_modeling_region.py (add_modeling_region.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_add_potting_region.py (add_potting_region.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_laminate_layer.py (update_laminate_layer.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_mount_points_by_file.py (update_mount_points_by_file.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_part_location.py (update_part_location.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_part_location_by_file.py (update_part_location_by_file.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_part_modeling_properties.py (update_part_modeling_properties.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_parts_list.py (update_parts_list.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_parts_list_properties.py (update_parts_list_properties.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_potting_region.py (update_potting_region.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_thermal_maps.py (update_thermal_maps.py)\n\n00:00.000\n\n0.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/common.html#common","title":"Common","text":"Common\n\n\n\nModule for running the gRPC APIs in the Sherlock Common service.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.html#ansyssherlockcoretypeslayer_typesdeletepottingregionrequest","title":"ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest","text":"ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest\n\n\n\nclass ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest(**data)\n\nRequest to delete 1 or more potting regions.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.model_fields.html#model_fields","title":"model_fields","text":"model_fields\n\n\n\nPottingRegionUpdateData.model_fields = {'potting_region': FieldInfo(annotation=PottingRegion, required=True), 'potting_region_id_to_update': FieldInfo(annotation=str, required=True)}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.json.html#json","title":"json","text":"json\n\n\n\nUpdateICTFixturesRequest.json(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_trace_model.html#sherlock-trace-model-export","title":"Sherlock Trace Model Export","text":"Sherlock Trace Model Export\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\ngenerate export parameters for copper layers, and export a trace model.\n\nDescription\nSherlock’s gRPC API enables automation of various workflows, including trace model exports.\nThis script demonstrates how to:\n- Connect to the Sherlock service.\n- Import a tutorial project ZIP archive.\n- Generate copper layer parameters for trace model export.\n- Export a trace model with multiple copper layers."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_trace_model.html#connect-to-sherlock","title":"Sherlock Trace Model Export > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_trace_model.html#delete-project","title":"Sherlock Trace Model Export > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_trace_model.html#import-tutorial-project","title":"Sherlock Trace Model Export > Import Tutorial Project","text":"Import Tutorial Project\n\nImport a sample project ZIP archive provided with the Sherlock installation."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_trace_model.html#export-trace-model","title":"Sherlock Trace Model Export > Export Trace Model","text":"Export Trace Model\n\nExport a trace model.\n\n\n\nDownload Jupyter notebook: export_trace_model.ipynb\n\nDownload Python source code: export_trace_model.py\n\nDownload zipped: export_trace_model.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelFile.temperature_column.html#temperature_column","title":"temperature_column","text":"temperature_column\n\n\n\nCsvExcelFile.temperature_column\n\ntemperature_column\n\nType\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.parse_obj.html#parse_obj","title":"parse_obj","text":"parse_obj\n\n\n\nclassmethod SlotShape.parse_obj(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.model_validate.html#model_validate","title":"model_validate","text":"model_validate\n\n\n\nclassmethod CsvExcelOutlineFile.model_validate(obj, *, strict=None, from_attributes=None, context=None, by_alias=None, by_name=None)\n\nValidate a pydantic model instance.\n\nParameters\n\nobj (Any) – The object to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\nfrom_attributes (bool | None) – Whether to extract data from object attributes.\n\ncontext (Any | None) – Additional context to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nRaises\n\nValidationError – If the object could not be validated.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.copy_potting_id.html#copy_potting_id","title":"copy_potting_id","text":"copy_potting_id\n\n\n\nPottingRegionCopyData.copy_potting_id: str\n\nID of the potting region to copy.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.model_construct.html#model_construct","title":"model_construct","text":"model_construct\n\n\n\nclassmethod SlotShape.model_construct(_fields_set=None, **values)\n\nCreates a new instance of the Model class with validated data.\n\nCreates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n\nmodel_construct() generally respects the model_config.extra setting on the provided model.\nThat is, if model_config.extra == ‘allow’, then all extra passed values are added to the model instance’s __dict__\nand __pydantic_extra__ fields. If model_config.extra == ‘ignore’ (the default), then all extra passed values are ignored.\nBecause no validation is performed with a call to model_construct(), having model_config.extra == ‘forbid’ does not result in\nan error if extra values are passed, but they will be ignored.\n\nParameters\n\n_fields_set (set[str] | None) – A set of field names that were originally explicitly set during instantiation. If provided,\nthis is directly used for the [model_fields_set][pydantic.BaseModel.model_fields_set] attribute.\nOtherwise, the field names from the values argument will be used.\n\nvalues (Any) – Trusted or pre-validated data dictionary.\n\nReturn type\n\nSelf\n\nReturns\n\nA new instance of the Model class with validated data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.copy.html#copy","title":"copy","text":"copy\n\n\n\nCopperFile.copy(*, include=None, exclude=None, update=None, deep=False)\n\nReturns a copy of the model.\n\n!!! warning “Deprecated”\n\nThis method is now deprecated; use model_copy instead.\n\nIf you need include or exclude, use:\n\n`python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n`\n\nParameters\n\ninclude – Optional set or mapping specifying which fields to include in the copied model.\n\nexclude – Optional set or mapping specifying which fields to exclude in the copied model.\n\nupdate – Optional dictionary of field-value pairs to override field values in the copied model.\n\ndeep – If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns\n\nA copy of the model with included, excluded and updated fields as specified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_aedb.html#export-aedb","title":"Export AEDB","text":"Export AEDB\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nand export an AEDB file for a CCA."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_aedb.html#description","title":"Export AEDB > Description","text":"Description\n\nSherlock’s gRPC API allows users to automate workflows such as exporting an AEDB file for a CCA.\nThis script demonstrates how to:\n\nConnect to the Sherlock service.\n\nImport a project.\n\nExport an AEDB file.\n\nThe exported AEDB file can be used for further analysis or integration with other software tools."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_aedb.html#connect-to-sherlock","title":"Export AEDB > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_aedb.html#delete-project","title":"Export AEDB > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_aedb.html#import-tutorial-project","title":"Export AEDB > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_aedb.html#export-aedb-file","title":"Export AEDB > Export AEDB File","text":"Export AEDB File\n\nExport the AEDB file for the “Card” of the “Test” project to the specified path.\n\n\n\nDownload Jupyter notebook: export_aedb.ipynb\n\nDownload Python source code: export_aedb.py\n\nDownload zipped: export_aedb.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/stackup.html#stackup","title":"Stackup","text":"Stackup\n\n\n\nModule containing all stackup management capabilities.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.parse_obj.html#parse_obj","title":"parse_obj","text":"parse_obj\n\n\n\nclassmethod PottingRegionCopyData.parse_obj(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.update_test_points.html#update_test_points","title":"update_test_points","text":"update_test_points\n\n\n\nUpdateTestPointsRequest.update_test_points: list[TestPointProperties]\n\nList of test points with their properties to update\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.parse_decimal_first_enabled.html#parse_decimal_first_enabled","title":"parse_decimal_first_enabled","text":"parse_decimal_first_enabled\n\n\n\nCopperGerberFile.parse_decimal_first_enabled: Optional[bool]\n\nWhether to parse decimal values before other formats in the Gerber file.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.model_validate_json.html#model_validate_json","title":"model_validate_json","text":"model_validate_json\n\n\n\nclassmethod GerberOutlineFile.model_validate_json(json_data, *, strict=None, context=None, by_alias=None, by_name=None)\n\n!!! abstract “Usage Documentation”\n\n[JSON Parsing](../concepts/json.md#json-parsing)\n\nValidate the given JSON data against the Pydantic model.\n\nParameters\n\njson_data (str | bytes | bytearray) – The JSON data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\nRaises\n\nValidationError – If json_data is not a JSON string or the object could not be validated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_mount_points_by_file.html#update-mount-points-by-file","title":"Update Mount Points by File","text":"Update Mount Points by File\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nupdate mount points using a file, and properly close the connection."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_mount_points_by_file.html#description","title":"Update Mount Points by File > Description","text":"Description\n\nSherlock’s gRPC API allows users to automate workflows such as updating mount points\nfor a CCA using a CSV file.\nThis script demonstrates how to:\n- Connect to the Sherlock service.\n- Import a project.\n- Update mount points using a CSV file.\n\nThe updated mount points can be used for further structural analysis and validation."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_mount_points_by_file.html#connect-to-sherlock","title":"Update Mount Points by File > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_mount_points_by_file.html#delete-project","title":"Update Mount Points by File > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_mount_points_by_file.html#import-tutorial-project","title":"Update Mount Points by File > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_mount_points_by_file.html#update-mount-points-by-file","title":"Update Mount Points by File","text":"Update Mount Points by File\n\nUpdate the mount points for the “Card” of the “Tutorial” project using a CSV file.\n\n\n\nDownload Jupyter notebook: update_mount_points_by_file.ipynb\n\nDownload Python source code: update_mount_points_by_file.py\n\nDownload zipped: update_mount_points_by_file.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.project.Project.delete_project.html#delete_project","title":"delete_project","text":"delete_project\n\n\n\nProject.delete_project(project)\n\nDelete a Sherlock project.\n\nAvailable Since: 2022R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.delete_project(\"Test Project\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.model_fields.html#model_fields","title":"model_fields","text":"model_fields\n\n\n\nCopyPottingRegionRequest.model_fields = {'potting_region_copy_data': FieldInfo(annotation=list[PottingRegionCopyData], required=True), 'project': FieldInfo(annotation=str, required=True)}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.model_copy.html#model_copy","title":"model_copy","text":"model_copy\n\n\n\nDeletePottingRegionRequest.model_copy(*, update=None, deep=False)\n\n!!! abstract “Usage Documentation”\n\n[model_copy](../concepts/serialization.md#model_copy)\n\nReturns a copy of the model.\n\n!!! note\n\nThe underlying instance’s [__dict__][object.__dict__] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property]).\n\nParameters\n\nupdate (Mapping[str, Any] | None) – Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\n\ndeep (bool) – Set to True to make a deep copy of the model.\n\nReturn type\n\nSelf\n\nReturns\n\nNew model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/index.html#project-configuration","title":"Project Configuration","text":"Project Configuration\n\nExamples on how to configure a project using PySherlock.\n\nsphx_glr_examples_gallery_examples_01-project-configuration_add_cca.py\n\nsphx_glr_examples_gallery_examples_01-project-configuration_add_harmonic_event.py\n\nsphx_glr_examples_gallery_examples_01-project-configuration_add_harmonic_profile.py\n\nsphx_glr_examples_gallery_examples_01-project-configuration_add_modeling_region.py\n\nsphx_glr_examples_gallery_examples_01-project-configuration_add_potting_region.py\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_laminate_layer.py\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_mount_points_by_file.py\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_part_location.py\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_part_location_by_file.py\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_part_modeling_properties.py\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_parts_list.py\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_parts_list_properties.py\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_potting_region.py\n\nsphx_glr_examples_gallery_examples_01-project-configuration_update_thermal_maps.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.model_dump_json.html#model_dump_json","title":"model_dump_json","text":"model_dump_json\n\n\n\nPottingRegion.model_dump_json(*, indent=None, include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump_json](../concepts/serialization.md#modelmodel_dump_json)\n\nGenerates a JSON representation of the model using Pydantic’s to_json method.\n\nParameters\n\nindent (int | None) – Indentation to use in the JSON output. If None is passed, the output will be compact.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to include in the JSON output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to exclude from the JSON output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to serialize using field aliases.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\nstr\n\nReturns\n\nA JSON string representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.parse_obj.html#parse_obj","title":"parse_obj","text":"parse_obj\n\n\n\nclassmethod UpdateTestPointsRequest.parse_obj(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.json.html#json","title":"json","text":"json\n\n\n\nCopperGerberFile.json(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/00-setup/setup.html#setup","title":"Setup","text":"Setup\n\nThis prepares the environment for running the examples."},{"objectID":"Home","href":"examples/gallery_examples/00-setup/setup.html#description","title":"Setup > Description","text":"Description\n\nPerform the following steps to set up the environment:\n- Launch Sherlock.\n- Store the Sherlock tutorial path."},{"objectID":"Home","href":"examples/gallery_examples/00-setup/setup.html#launch-sherlock","title":"Setup > Launch Sherlock","text":"Launch Sherlock\n\nLaunch the Sherlock service and ensure proper initialization.\n\n\n\nDownload Jupyter notebook: setup.ipynb\n\nDownload Python source code: setup.py\n\nDownload zipped: setup.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.model_validate_json.html#model_validate_json","title":"model_validate_json","text":"model_validate_json\n\n\n\nclassmethod OutlineFile.model_validate_json(json_data, *, strict=None, context=None, by_alias=None, by_name=None)\n\n!!! abstract “Usage Documentation”\n\n[JSON Parsing](../concepts/json.md#json-parsing)\n\nValidate the given JSON data against the Pydantic model.\n\nParameters\n\njson_data (str | bytes | bytearray) – The JSON data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\nRaises\n\nValidationError – If json_data is not a JSON string or the object could not be validated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.analysis.Analysis.update_ict_analysis_props.html#update_ict_analysis_props","title":"update_ict_analysis_props","text":"update_ict_analysis_props\n\n\n\nAnalysis.update_ict_analysis_props(project, ict_analysis_properties)\n\nUpdate properties for an ICT analysis.\n\nAvailable Since: 2024R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\nict_analysis_properties: list[dict[str, bool | float | int | str]]\n\nICT analysis properties for a CCA consisting of these properties:\n\ncca_name: str\n\nName of the CCA.\n\nict_application_time: float\n\nSpecifies the amount of time to complete one ICT event.\n\nict_application_time_units: str\n\nApplication time units.\nOptions are \"ms\", \"sec\", \"min\", \"hr\", \"day\", \"year\".\n\nict_number_of_events: int\n\nSpecifies the number of events to apply to the application time when computing\nthe time to failure for a component.\n\npart_validation_enabled: bool\n\nWhether to enable part validation. The default is None.\n\nrequire_material_assignment_enabled: bool\n\nWhether to require material assignment. The default is None.\n\nict_result_count: int\n\nThe number of ICT result layers to generate. This parameter is for use with\nthermal analysis.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.analysis.update_ict_analysis_props(\n    \"Test\",\n    [{\n        \"cca_name\": \"Card\",\n        \"ict_application_time\": 2,\n        \"ict_application_time_units\": \"sec\",\n        \"ict_number_of_events\": 10,\n        \"part_validation_enabled\": False,\n        \"require_material_assignment_enabled\": False,\n    },\n    ]\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.model_fields_set.html#model_fields_set","title":"model_fields_set","text":"model_fields_set\n\n\n\nproperty PottingRegionDeleteData.model_fields_set: set[str]\n\nReturns the set of fields that have been explicitly set on this model instance.\n\nReturns\n\nA set of strings representing the fields that have been set,\n\ni.e. that were not filled from defaults.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.width.html#width","title":"width","text":"width\n\n\n\nSlotShape.width: float\n\nfloat\n\nType\n\nWidth\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.json.html#json","title":"json","text":"json\n\n\n\nOutlineFile.json(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.construct.html#construct","title":"construct","text":"construct\n\n\n\nclassmethod DeletePottingRegionRequest.construct(_fields_set=None, **values)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.parse_decimal_first.html#parse_decimal_first","title":"parse_decimal_first","text":"parse_decimal_first\n\n\n\nGerberOutlineFile.parse_decimal_first: bool\n\nIndicates to parse decimals based on the length of the format specifier.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.model_fields_set.html#model_fields_set","title":"model_fields_set","text":"model_fields_set\n\n\n\nproperty PolygonalShape.model_fields_set: set[str]\n\nReturns the set of fields that have been explicitly set on this model instance.\n\nReturns\n\nA set of strings representing the fields that have been set,\n\ni.e. that were not filled from defaults.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.model_rebuild.html#model_rebuild","title":"model_rebuild","text":"model_rebuild\n\n\n\nclassmethod CsvExcelOutlineFile.model_rebuild(*, force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace=None)\n\nTry to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nParameters\n\nforce (bool) – Whether to force the rebuilding of the model schema, defaults to False.\n\nraise_errors (bool) – Whether to raise errors, defaults to True.\n\n_parent_namespace_depth (int) – The depth level of the parent namespace, defaults to 2.\n\n_types_namespace (Mapping[str, Any] | None) – The types namespace, defaults to None.\n\nReturn type\n\nbool | None\n\nReturns\n\nReturns None if the schema is already “complete” and rebuilding was not required.\nIf rebuilding _was_ required, returns True if rebuilding was successful, otherwise False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.model_rebuild.html#model_rebuild","title":"model_rebuild","text":"model_rebuild\n\n\n\nclassmethod CopyPottingRegionRequest.model_rebuild(*, force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace=None)\n\nTry to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nParameters\n\nforce (bool) – Whether to force the rebuilding of the model schema, defaults to False.\n\nraise_errors (bool) – Whether to raise errors, defaults to True.\n\n_parent_namespace_depth (int) – The depth level of the parent namespace, defaults to 2.\n\n_types_namespace (Mapping[str, Any] | None) – The types namespace, defaults to None.\n\nReturn type\n\nbool | None\n\nReturns\n\nReturns None if the schema is already “complete” and rebuilding was not required.\nIf rebuilding _was_ required, returns True if rebuilding was successful, otherwise False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.model_json_schema.html#model_json_schema","title":"model_json_schema","text":"model_json_schema\n\n\n\nclassmethod CsvExcelOutlineFile.model_json_schema(by_alias=True, ref_template='#/$defs/{model}', schema_generator=<class 'pydantic.json_schema.GenerateJsonSchema'>, mode='validation')\n\nGenerates a JSON schema for a model class.\n\nParameters\n\nby_alias (bool) – Whether to use attribute aliases or not.\n\nref_template (str) – The reference template.\n\nschema_generator (type[GenerateJsonSchema]) – To override the logic used to generate the JSON schema, as a subclass of\nGenerateJsonSchema with your desired modifications\n\nmode (Literal['validation', 'serialization']) – The mode in which to generate the schema.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nThe JSON schema for the given model class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.construct.html#construct","title":"construct","text":"construct\n\n\n\nclassmethod GerberOutlineFile.construct(_fields_set=None, **values)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.ImageBounds.width.html#width","title":"width","text":"width\n\n\n\nImageBounds.width\n\nwidth of the image\n\nType\n\nfloat\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.project.Project.import_copper_files.html#import_copper_files","title":"import_copper_files","text":"import_copper_files\n\n\n\nProject.import_copper_files(request)\n\nImport copper layer files to a Sherlock project.\n\nAvailable Since: 2026R1\n\nParameters\n\nrequest\n\nImportCopperFilesRequest\n\nContains the information needed to import copper layer files and their associated\nproperties.\n\nReturns\n\n:\n\n\n\npython:list[SherlockProjectService_pb2.ImportCopperFilesResponse]\n\nStatus and metadata for each copper file imported.\n\nReturn type\n\nlist[ImportCopperFilesResponse]\n\nExamples\n\n>>> from ansys.sherlock.core.types.project_types import (\n>>>     ImportCopperFilesRequest,\n>>>     ImportCopperFile,\n>>>     CopperFile,\n>>>     CopperGerberFile,\n>>>     CopperImageFile,\n>>> )\n>>> from ansys.api.sherlock.v0 import SherlockProjectService_pb2\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>>\n>>> project_service = SherlockProjectService_pb2\n>>> sherlock = launch_sherlock()\n>>> return_codes = sherlock.project.import_copper_files(\n>>>     ImportCopperFilesRequest(\n>>>         project=\"TestProject\",\n>>>         copper_files=[\n>>>             # Example 1: Gerber file\n>>>             ImportCopperFile(\n>>>                 copper_file=\"path/to/bottom_copper.gbr\",\n>>>                 copper_file_properties=CopperFile(\n>>>                     file_name=\"bottom_copper.gbr\",\n>>>                     file_type=project_service.CopperFile.FileType.Gerber,\n>>>                     file_comment=\"Gerber bottom layer\",\n>>>                     copper_layer=\"Bottom Layer\",\n>>>                     polarity=project_service.CopperFile.Polarity.Positive,\n>>>                     layer_snapshot_enabled=True,\n>>>                     cca=[\"Main Board\"],\n>>>                     gerber_file=CopperGerberFile(\n>>>                         parse_decimal_first_enabled=True\n>>>                     )\n>>>                 )\n>>>             ),\n>>>             ImportCopperFile(\n>>>                 copper_file=\"path/to/top_image.png\",\n>>>                 copper_file_properties=CopperFile(\n>>>                     file_name=\"top_image.png\",\n>>>                     file_type=project_service.CopperFile.FileType.Image,\n>>>                     file_comment=\"Top image copper layer\",\n>>>                     copper_layer=\"Top Layer\",\n>>>                     polarity=project_service.CopperFile.Polarity.Positive,\n>>>                     layer_snapshot_enabled=False,\n>>>                     cca=[\"Main Board\"],\n>>>                     image_file=CopperImageFile(\n>>>                         image_type=project_service.CopperFile.ImageType.Foreground,\n>>>                         image_color=\"black\"\n>>>                     )\n>>>                 )\n>>>             )\n>>>         ]\n>>>     )\n>>> )\n>>> for response in return_codes:\n>>>     print(f\"File: {response.fileName}, Status: {response.returnCode}\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.launcher.launch_and_connect.html#launch_and_connect","title":"launch_and_connect","text":"launch_and_connect\n\n\n\nansys.sherlock.core.launcher.launch_and_connect(host='127.0.0.1', port=9090, single_project_path='', sherlock_command_args='', year=None, release_number=None, timeout=120)\n\nLaunch Sherlock, start gRPC on a given host and port, and wait until connected to Sherlock.\n\nAvailable Since: 2025R2\n\nParameters\n\nhost: str, optional\n\nIP address to start gRPC on.\nThe default is \"127.0.0.1\", which is the IP address for the local host.\n\nport: int, optional\n\nPort number for the connection.\n\nsingle_project_path\n\npython:str, optional\n\nPath to the Sherlock project if invoking Sherlock in the single-project mode.\n\nsherlock_command_args\n\npython:str, optional\n\nAdditional command arguments for launching Sherlock.\n\nyear: int, optional\n\n4-digit year of the Sherlock release to launch. If not provided,\nthe latest installed version of Sherlock will be launched.\n\nrelease_number: int, optional\n\nRelease number of Sherlock to launch. If not provided,\nthe latest installed version of Sherlock will be launched.\n\ntimeout: int, optional\n\nMaximum time (in seconds) to wait for the connection to Sherlock to be established.\nDefault is 120 seconds.\n\nReturns\n\n:\n\n\n\nSherlock\n\nThe instance of sherlock.\n\npython:str\n\nPath to the Sherlock installation directory.\n\nReturn type\n\ntuple[Sherlock, str]\n\nExamples\n\n>>> from ansys.sherlock.core import launcher\n>>> project = \"C:\\\\Default Projects Directory\\\\ODB++ Tutorial\"\n>>> sherlock, ansys_install_path = launcher.launch_and_connect(\n>>>     port=9092,\n>>>     single_project_path=project,\n>>>     sherlock_command_args=\"-noGUI\",\n>>>     year=2025,\n>>>     release_number=1,\n>>>     timeout=30)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.html#ansyssherlockcoretypeslayer_typespolygonalshape","title":"ansys.sherlock.core.types.layer_types.PolygonalShape","text":"ansys.sherlock.core.types.layer_types.PolygonalShape\n\n\n\nclass ansys.sherlock.core.types.layer_types.PolygonalShape(**data)\n\nContains the properties for a polygonal shape.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/00-setup/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 1 file from examplesgallery_examples00-setup:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_gallery_examples_00-setup_setup.py (setup.py)\n\n00:00.000\n\n0.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.model_validate_json.html#model_validate_json","title":"model_validate_json","text":"model_validate_json\n\n\n\nclassmethod SlotShape.model_validate_json(json_data, *, strict=None, context=None, by_alias=None, by_name=None)\n\n!!! abstract “Usage Documentation”\n\n[JSON Parsing](../concepts/json.md#json-parsing)\n\nValidate the given JSON data against the Pydantic model.\n\nParameters\n\njson_data (str | bytes | bytearray) – The JSON data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\nRaises\n\nValidationError – If json_data is not a JSON string or the object could not be validated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_thermal_maps.html#update-thermal-maps","title":"Update Thermal Maps","text":"Update Thermal Maps\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nand update thermal maps."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_thermal_maps.html#description","title":"Update Thermal Maps > Description","text":"Description\n\nSherlock’s gRPC API allows users to automate workflows such as updating thermal maps for printed\ncircuit boards (PCBs).\nThis script demonstrates how to:\n- Connect to the Sherlock service.\n- Import a project.\n- Update thermal maps.\n\nThe updated thermal maps ensure the accuracy of thermal profiles and board configurations."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_thermal_maps.html#connect-to-sherlock","title":"Update Thermal Maps > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_thermal_maps.html#delete-project","title":"Update Thermal Maps > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_thermal_maps.html#import-tutorial-project","title":"Update Thermal Maps > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_thermal_maps.html#update-thermal-maps","title":"Update Thermal Maps","text":"Update Thermal Maps\n\nUpdate the thermal maps for the “Tutorial Project”.\n\n\n\nDownload Jupyter notebook: update_thermal_maps.ipynb\n\nDownload Python source code: update_thermal_maps.py\n\nDownload zipped: update_thermal_maps.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.html#ansyssherlockcoretypeslayer_typesupdatepottingregionrequest","title":"ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest","text":"ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest\n\n\n\nclass ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest(**data)\n\nContains the properties of a potting region update per project.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.cca_name.html#cca_name","title":"cca_name","text":"cca_name\n\n\n\nGetICTFixturesPropertiesRequest.cca_name: str\n\nName of the CCA containing the ict fixture properties to return.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.html#ansyssherlockcoretypeslayer_typesupdateictfixturesrequest","title":"ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest","text":"ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest\n\n\n\nclass ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest(**data)\n\nContains the properties of an ict fixtures update per project.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.schema.html#schema","title":"schema","text":"schema\n\n\n\nclassmethod CopperImageFile.schema(by_alias=True, ref_template='#/$defs/{model}')\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.model_validate_strings.html#model_validate_strings","title":"model_validate_strings","text":"model_validate_strings\n\n\n\nclassmethod GetTestPointPropertiesRequest.model_validate_strings(obj, *, strict=None, context=None, by_alias=None, by_name=None)\n\nValidate the given object with string data against the Pydantic model.\n\nParameters\n\nobj (Any) – The object containing string data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.construct.html#construct","title":"construct","text":"construct\n\n\n\nclassmethod RectangularShape.construct(_fields_set=None, **values)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.parse_file.html#parse_file","title":"parse_file","text":"parse_file\n\n\n\nclassmethod TestPointProperties.parse_file(path, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.ImageFile.max_temperature.html#max_temperature","title":"max_temperature","text":"max_temperature\n\n\n\nImageFile.max_temperature\n\nmax_temperature\n\nType\n\nfloat\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 9 files from examplesgallery_examples03-exporting:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_gallery_examples_03-exporting_export_aedb.py (export_aedb.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_03-exporting_export_all_mount_points.py (export_all_mount_points.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_03-exporting_export_all_test_fixtures.py (export_all_test_fixtures.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_03-exporting_export_all_test_points.py (export_all_test_points.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_03-exporting_export_fea_model.py (export_fea_model.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_03-exporting_export_net_list.py (export_net_list.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_03-exporting_export_part_list.py (export_part_list.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_03-exporting_export_project.py (export_project.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_03-exporting_export_trace_model.py (export_trace_model.py)\n\n00:00.000\n\n0.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.model_construct.html#model_construct","title":"model_construct","text":"model_construct\n\n\n\nclassmethod DeletePottingRegionRequest.model_construct(_fields_set=None, **values)\n\nCreates a new instance of the Model class with validated data.\n\nCreates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n\nmodel_construct() generally respects the model_config.extra setting on the provided model.\nThat is, if model_config.extra == ‘allow’, then all extra passed values are added to the model instance’s __dict__\nand __pydantic_extra__ fields. If model_config.extra == ‘ignore’ (the default), then all extra passed values are ignored.\nBecause no validation is performed with a call to model_construct(), having model_config.extra == ‘forbid’ does not result in\nan error if extra values are passed, but they will be ignored.\n\nParameters\n\n_fields_set (set[str] | None) – A set of field names that were originally explicitly set during instantiation. If provided,\nthis is directly used for the [model_fields_set][pydantic.BaseModel.model_fields_set] attribute.\nOtherwise, the field names from the values argument will be used.\n\nvalues (Any) – Trusted or pre-validated data dictionary.\n\nReturn type\n\nSelf\n\nReturns\n\nA new instance of the Model class with validated data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.shape.html#shape","title":"shape","text":"shape\n\n\n\nICTFixtureProperties.shape: str\n\nShape type\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.parse_raw.html#parse_raw","title":"parse_raw","text":"parse_raw\n\n\n\nclassmethod CopperFile.parse_raw(b, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.diameter.html#diameter","title":"diameter","text":"diameter\n\n\n\nCircularShape.diameter: float\n\nfloat\n\nType\n\nDiameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.parse_file.html#parse_file","title":"parse_file","text":"parse_file\n\n\n\nclassmethod SlotShape.parse_file(path, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.copy.html#copy","title":"copy","text":"copy\n\n\n\nGerberOutlineFile.copy(*, include=None, exclude=None, update=None, deep=False)\n\nReturns a copy of the model.\n\n!!! warning “Deprecated”\n\nThis method is now deprecated; use model_copy instead.\n\nIf you need include or exclude, use:\n\n`python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n`\n\nParameters\n\ninclude – Optional set or mapping specifying which fields to include in the copied model.\n\nexclude – Optional set or mapping specifying which fields to exclude in the copied model.\n\nupdate – Optional dictionary of field-value pairs to override field values in the copied model.\n\ndeep – If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns\n\nA copy of the model with included, excluded and updated fields as specified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.parse_obj.html#parse_obj","title":"parse_obj","text":"parse_obj\n\n\n\nclassmethod UpdateICTFixturesRequest.parse_obj(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.lifecycle.Lifecycle.add_random_vibe_profiles.html#add_random_vibe_profiles","title":"add_random_vibe_profiles","text":"add_random_vibe_profiles\n\n\n\nLifecycle.add_random_vibe_profiles(project, random_vibe_profiles)\n\nAdd random vibe profiles to a life cycle phase.\n\nAvailable Since: 2023R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\nrandom_vibe_profiles: list[tuple[str, str, str, str, str, list[tuple[float, float]]]]\n\nRandom vibe profiles consisting of these properties:\n\nphase_name: str\n\nName of the life cycle phase to add the random vibe profile to.\n\nevent_name: str\n\nName of the random vibe event.\n\nprofile_name: str\n\nName of the random vibe profile.\n\nfreq_units: str\n\nFrequency units. Options are \"HZ\", \"KHZ\", \"MHZ\", and \"GHZ\".\n\nampl_units: str\n\nAmplitude units. Options are \"G2/Hz\", \"m2/s4/Hz\", \"mm2/s4/Hz\",                 \"in2/s4/Hz\", and \"ft2/s4/Hz\".\n\nrandom_vibe_profile_entries: list[tuple[float, float]]\n\nRandom vibe profile entries consisting of these properties:\n\nfrequency: float\n\nFrequency of the profile entry expressed in frequency units.\n\namplitude: float\n\nAmplitude of the profile entry expressed in amplitude units.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n)\n>>> sherlock.lifecycle.create_life_phase(\n    \"Test\",\n    \"Example\",\n    1.5,\n    \"sec\",\n    4.0,\n    \"COUNT\",\n)\n>>> sherlock.lifecycle.add_random_vibe_event(\n    \"Test\",\n    \"Example\",\n    \"Event1\",\n    1.5,\n    \"sec\",\n    4.0,\n    \"PER MIN\",\n    \"45,45\",\n    \"Uniaxial\",\n    \"2,4,5\",\n)\n>>> sherlock.lifecycle.add_random_vibe_profiles(\n    \"Test\",\n     [(\n        \"Example\",\n        \"Event1\",\n        \"Profile1\",\n        \"HZ\",\n        \"G2/Hz\",\n        [(4,8), (5, 50)],\n    )]\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.model_validate_strings.html#model_validate_strings","title":"model_validate_strings","text":"model_validate_strings\n\n\n\nclassmethod PottingRegionCopyData.model_validate_strings(obj, *, strict=None, context=None, by_alias=None, by_name=None)\n\nValidate the given object with string data against the Pydantic model.\n\nParameters\n\nobj (Any) – The object containing string data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.model_dump_json.html#model_dump_json","title":"model_dump_json","text":"model_dump_json\n\n\n\nTestPointProperties.model_dump_json(*, indent=None, include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump_json](../concepts/serialization.md#modelmodel_dump_json)\n\nGenerates a JSON representation of the model using Pydantic’s to_json method.\n\nParameters\n\nindent (int | None) – Indentation to use in the JSON output. If None is passed, the output will be compact.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to include in the JSON output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to exclude from the JSON output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to serialize using field aliases.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\nstr\n\nReturns\n\nA JSON string representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.str_validation.html#str_validation","title":"str_validation","text":"str_validation\n\n\n\nclassmethod CopyPottingRegionRequest.str_validation(value, info)\n\nValidate string fields listed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.lifecycle.Lifecycle.load_harmonic_profile.html#load_harmonic_profile","title":"load_harmonic_profile","text":"load_harmonic_profile\n\n\n\nLifecycle.load_harmonic_profile(project, phase_name, event_name, file_path)\n\nLoad a harmonic profile from a DAT or CSV file to a life cycle phase.\n\nAvailable Since: 2021R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project\n\nphase_name: str\n\nName of the life cycle phase to add the harmonic profile to.\n\nevent_name: str\n\nName of the harmonic event.\n\nfile_path: str\n\nPath for DAT or CSV file with the harmonic profile.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\"\n)\n\n>>> loaded = sherlock.lifecycle.load_harmonic_profile(\n        project=\"Tutorial\",\n        phase_name=\"Phase 1\",\n        event_name=\"Harmonic Event\",\n        file_path=\"Test_Profile.dat\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.model_fields_set.html#model_fields_set","title":"model_fields_set","text":"model_fields_set\n\n\n\nproperty CopyPottingRegionRequest.model_fields_set: set[str]\n\nReturns the set of fields that have been explicitly set on this model instance.\n\nReturns\n\nA set of strings representing the fields that have been set,\n\ni.e. that were not filled from defaults.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.model_rebuild.html#model_rebuild","title":"model_rebuild","text":"model_rebuild\n\n\n\nclassmethod PottingRegionCopyData.model_rebuild(*, force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace=None)\n\nTry to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nParameters\n\nforce (bool) – Whether to force the rebuilding of the model schema, defaults to False.\n\nraise_errors (bool) – Whether to raise errors, defaults to True.\n\n_parent_namespace_depth (int) – The depth level of the parent namespace, defaults to 2.\n\n_types_namespace (Mapping[str, Any] | None) – The types namespace, defaults to None.\n\nReturn type\n\nbool | None\n\nReturns\n\nReturns None if the schema is already “complete” and rebuilding was not required.\nIf rebuilding _was_ required, returns True if rebuilding was successful, otherwise False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.dict.html#dict","title":"dict","text":"dict\n\n\n\nPCBShape.dict(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False)\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.model_parametrized_name.html#model_parametrized_name","title":"model_parametrized_name","text":"model_parametrized_name\n\n\n\nclassmethod CircularShape.model_parametrized_name(params)\n\nCompute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nParameters\n\nparams (tuple[type[Any], ...]) – Tuple of types of the class. Given a generic class\nModel with 2 type variables and a concrete model Model[str, int],\nthe value (str, int) would be passed to params.\n\nReturn type\n\nstr\n\nReturns\n\nString representing the new class where params are passed to cls as type variables.\n\nRaises\n\nTypeError – Raised when trying to generate concrete names for non-generic models.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.validate.html#validate","title":"validate","text":"validate\n\n\n\nclassmethod PolygonalShape.validate(value)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.dict.html#dict","title":"dict","text":"dict\n\n\n\nPottingRegionDeleteData.dict(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False)\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.model_rebuild.html#model_rebuild","title":"model_rebuild","text":"model_rebuild\n\n\n\nclassmethod PottingRegion.model_rebuild(*, force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace=None)\n\nTry to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nParameters\n\nforce (bool) – Whether to force the rebuilding of the model schema, defaults to False.\n\nraise_errors (bool) – Whether to raise errors, defaults to True.\n\n_parent_namespace_depth (int) – The depth level of the parent namespace, defaults to 2.\n\n_types_namespace (Mapping[str, Any] | None) – The types namespace, defaults to None.\n\nReturn type\n\nbool | None\n\nReturns\n\nReturns None if the schema is already “complete” and rebuilding was not required.\nIf rebuilding _was_ required, returns True if rebuilding was successful, otherwise False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.str_validation.html#str_validation","title":"str_validation","text":"str_validation\n\n\n\nclassmethod TestPointProperties.str_validation(value, info)\n\nValidate string fields listed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.str_validation.html#str_validation","title":"str_validation","text":"str_validation\n\n\n\nclassmethod UpdatePottingRegionRequest.str_validation(value, info)\n\nValidate string fields listed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.model_extra.html#model_extra","title":"model_extra","text":"model_extra\n\n\n\nproperty CopperImageFile.model_extra: dict[str, Any] | None\n\nGet extra fields set during validation.\n\nReturns\n\nA dictionary of extra fields, or None if config.extra is not set to “allow”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/analysis_types.html#analysis-types","title":"Analysis Types","text":"Analysis Types\n\n\n\nModule containing types for the Analysis Service."},{"objectID":"Home","href":"api/analysis_types.html#constants","title":"Analysis Types > Constants","text":"Constants\n\n\n\nclass ansys.sherlock.core.types.analysis_types.ElementOrder\n\nConstants for Element Order.\n\n\n\nLINEAR = 1\n\nLINEAR\n\n\n\nQUADRATIC = 2\n\nQUADRATIC\n\n\n\nSOLID_SHELL = 3\n\nSOLID_SHELL\n\n\n\nclass ansys.sherlock.core.types.analysis_types.ModelSource\n\nConstants for Model Source.\n\n\n\nGENERATED = 1\n\nGENERATED\n\n\n\nSTRAIN_MAP = 2\n\nSTRAIN_MAP\n\n\n\nclass ansys.sherlock.core.types.analysis_types.RunAnalysisRequestAnalysisType\n\nConstants for type of analysis in the Run Analysis request.\n\n\n\nCOMPONENT_FAILURE_MODE = 7\n\nCOMPONENT_FAILURE_MODE\n\n\n\nDFMEA = 8\n\nDFMEA\n\n\n\nHARMONIC_VIBE = 2\n\nHARMONIC_VIBE\n\n\n\nICT = 3\n\nICT\n\n\n\nMECHANICAL_SHOCK = 4\n\nMECHANICAL_SHOCK\n\n\n\nNATURAL_FREQ = 1\n\nNATURAL_FREQ\n\n\n\nPART_VALIDATION = 10\n\nPART_VALIDATION\n\n\n\nPTH_FATIQUE = 9\n\nPTH_FATIQUE\n\n\n\nRANDOM_VIBE = 5\n\nRANDOM_VIBE\n\n\n\nSEMICINDUCTOR_WEAROUT = 11\n\nSEMICINDUCTOR_WEAROUT\n\n\n\nSOLDER_JOINT_FATIGUE = 12\n\nSOLDER_JOINT_FATIGUE\n\n\n\nTHERMAL_DERATING = 13\n\nTHERMAL_DERATING\n\n\n\nTHERMAL_MECH = 14\n\nTHERMAL_MECH\n\n\n\nclass ansys.sherlock.core.types.analysis_types.RunStrainMapAnalysisRequestAnalysisType\n\nConstants for type of analysis in the Run Strain Map Analysis request.\n\n\n\nHARMONIC_VIBE = 3\n\nHARMONIC_VIBE\n\n\n\nMECHANICAL_SHOCK = 2\n\nMECHANICAL_SHOCK\n\n\n\nRANDOM_VIBE = 1\n\nRANDOM_VIBE\n\n\n\nclass ansys.sherlock.core.types.analysis_types.UpdatePcbModelingPropsRequestAnalysisType\n\nConstants for type of analysis in the Update PCB Modeling Properties Analysis request.\n\n\n\nHARMONIC_VIBE = 1\n\nHARMONIC_VIBE\n\n\n\nICT = 2\n\nICT\n\n\n\nMECHANICAL_SHOCK = 3\n\nMECHANICAL_SHOCK\n\n\n\nNATURAL_FREQUENCY = 4\n\nNATURAL_FREQUENCY\n\n\n\nRANDOM_VIBE = 5\n\nRANDOM_VIBE\n\n\n\nTHERMAL_MECH = 6\n\nTHERMAL_MECH\n\n\n\nclass ansys.sherlock.core.types.analysis_types.UpdatePcbModelingPropsRequestPcbMaterialModel\n\nConstants for PCB Material Model in the Update PCB Modeling Properties Analysis request.\n\n\n\nLAYERED = 2\n\nLAYERED\n\n\n\nLAYERED_ELEMENTS = 4\n\nLAYERED_ELEMENTS\n\n\n\nUNIFORM = 1\n\nUNIFORM\n\n\n\nUNIFORM_ELEMENTS = 3\n\nUNIFORM_ELEMENTS\n\n\n\nclass ansys.sherlock.core.types.analysis_types.UpdatePcbModelingPropsRequestPcbModelType\n\nConstants for PCB Model Type in the Update PCB Modeling Properties Analysis request.\n\n\n\nBONDED = 1\n\nBONDED\n\n\n\nclass ansys.sherlock.core.types.analysis_types.ComponentFailureMechanism(**data)\n\nContains the properties of a component failure mechanism update request.\n\n\n\ncca_name: str\n\nName of the CCA.\n\n\n\ndefault_part_temp_rise: float\n\nDefault part temperature rise.\n\n\n\ndefault_part_temp_rise_units: str\n\nDefault part temperature rise units.\n\n\n\nmodel_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\npart_temp_rise_min_enabled: bool\n\nWhether part temperature rise value is applied to the minimum temperature defined in the\nthermal cycle.\n\n\n\npart_validation_enabled: bool\n\nWhether part validation should be performed.\n\n\n\nclassmethod str_validation(value, info)\n\nValidate string fields listed.\n\n\n\nclass ansys.sherlock.core.types.analysis_types.UpdateComponentFailureMechanismPropsRequest(**data)\n\nContains the properties of a component failure mechanism update per project.\n\n\n\ncomponent_failure_mechanism_properties_per_cca: list[ComponentFailureMechanism]\n\nList of potting region data to update.\n\n\n\nmodel_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\nproject: str\n\nName of the Sherlock project.\n\n\n\nclassmethod str_validation(value, info)\n\nValidate string fields listed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.model_rebuild.html#model_rebuild","title":"model_rebuild","text":"model_rebuild\n\n\n\nclassmethod GetICTFixturesPropertiesRequest.model_rebuild(*, force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace=None)\n\nTry to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nParameters\n\nforce (bool) – Whether to force the rebuilding of the model schema, defaults to False.\n\nraise_errors (bool) – Whether to raise errors, defaults to True.\n\n_parent_namespace_depth (int) – The depth level of the parent namespace, defaults to 2.\n\n_types_namespace (Mapping[str, Any] | None) – The types namespace, defaults to None.\n\nReturn type\n\nbool | None\n\nReturns\n\nReturns None if the schema is already “complete” and rebuilding was not required.\nIf rebuilding _was_ required, returns True if rebuilding was successful, otherwise False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.model_post_init.html#model_post_init","title":"model_post_init","text":"model_post_init\n\n\n\nGetTestPointPropertiesRequest.model_post_init(context, /)\n\nOverride this method to perform additional initialization after __init__ and model_construct.\nThis is useful if you want to do some validation that requires the entire model to be initialized.\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.model_copy.html#model_copy","title":"model_copy","text":"model_copy\n\n\n\nRectangularShape.model_copy(*, update=None, deep=False)\n\n!!! abstract “Usage Documentation”\n\n[model_copy](../concepts/serialization.md#model_copy)\n\nReturns a copy of the model.\n\n!!! note\n\nThe underlying instance’s [__dict__][object.__dict__] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property]).\n\nParameters\n\nupdate (Mapping[str, Any] | None) – Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\n\ndeep (bool) – Set to True to make a deep copy of the model.\n\nReturn type\n\nSelf\n\nReturns\n\nNew model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.model_rebuild.html#model_rebuild","title":"model_rebuild","text":"model_rebuild\n\n\n\nclassmethod PolygonalShape.model_rebuild(*, force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace=None)\n\nTry to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nParameters\n\nforce (bool) – Whether to force the rebuilding of the model schema, defaults to False.\n\nraise_errors (bool) – Whether to raise errors, defaults to True.\n\n_parent_namespace_depth (int) – The depth level of the parent namespace, defaults to 2.\n\n_types_namespace (Mapping[str, Any] | None) – The types namespace, defaults to None.\n\nReturn type\n\nbool | None\n\nReturns\n\nReturns None if the schema is already “complete” and rebuilding was not required.\nIf rebuilding _was_ required, returns True if rebuilding was successful, otherwise False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.layer.Layer.add_modeling_region.html#add_modeling_region","title":"add_modeling_region","text":"add_modeling_region\n\n\n\nLayer.add_modeling_region(project, modeling_regions)\n\nAdd one or more modeling regions to a specific project.\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\nmodeling_regions: list[dict[str, bool | float | str | dict[str, bool | float | str]                | dict[str, float | str]]]\n\nModeling regions to add. Each dictionary should contain:\n\ncca_name: str\n\nName of the CCA.\n\nregion_id: str\n\nUnique region ID of the modeling region.\n\nregion_units: str\n\nUnits of the modeling region.\n\nmodel_mode: str\n\nMode that specifies how the region is used. Valid values are Enabled,\nDisabled and Excluded.\n\nshape: PolygonalShape|RectangularShape|SlotShape|CircularShape|PCBShape\n\nThe shape of the modeling region.\n\npcb_model_props: dict[str, bool | float | str]\n\nPCB model parameters consisting of these properties:\n\nexport_model_type: str\n\nThe type of model to be generated for a given modeling region.\nValid values are Default, Sherlock, Sweep and None.\n\nelem_order: str\n\nThe type of 3D elements to be created for the PCB in the modeling region.\nValid values are First_Order, Second_Order and Solid_Shell.\n\nmax_mesh_size: float\n\nThe maximum size of the mesh to be used in the region.\n\nmax_mesh_size_units: str\n\nUnits for the maximum mesh size.\n\nquads_preferred: bool\n\nWhether to generate quad-shaped elements when creating the mesh if true.\n\ntrace_model_props: dict[str, float | str]\n\nTrace model parameters consisting of these properties:\n\ntrace_model_type\n\nstr\n\nThe specification of whether trace modeling should be performed\nwithin the region. Valid values are Default, Enabled and\nDisabled.\n\nelem_order: str, optional\n\nThe type of 3D elements to be created for the PCB in the modeling region.\nValid values are First_Order, Second_Order and Solid_Shell.\n\ntrace_mesh_size\n\nfloat, optional\n\nThe maximum mesh size to be used in the region when trace modeling\nis enabled.\n\ntrace_mesh_size_units: str, optional\n\nUnits for the maximum mesh size when trace modeling is enabled.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n>>>     \"ODB++ Tutorial.tgz\",\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     project=\"Tutorial Project\",\n>>>     cca_name=\"Card\",\n>>> )\n>>> modeling_regions = [\n>>> {\n>>>     \"cca_name\": \"Card\",\n>>>     \"region_id\": \"Region001\",\n>>>     \"region_units\": \"mm\",\n>>>     \"model_mode\": \"Enabled\",\n>>>     \"shape\": PolygonalShape(points=[\n>>>         (0, 0),\n>>>         (0, 6.35),\n>>>         (9.77, 0)\n>>>     ], rotation=87.8),\n>>>     \"pcb_model_props\": {\n>>>         \"export_model_type\": \"Sherlock\",\n>>>         \"elem_order\": \"First_Order\",\n>>>         \"max_mesh_size\": 0.5,\n>>>         \"max_mesh_size_units\": \"mm\",\n>>>         \"quads_preferred\": True\n>>>     },\n>>>     \"trace_model_props\": {\n>>>         \"trace_model_type\": \"Enabled\",\n>>>         \"elem_order\": \"Second_Order\",\n>>>         \"trace_mesh_size\": 0.3,\n>>>         \"trace_mesh_size_units\": \"mm\"\n>>>     }\n>>> }\n>>> ]\n>>> result = sherlock.layer.add_modeling_region(\"Tutorial Project\", modeling_regions)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.model_fields_set.html#model_fields_set","title":"model_fields_set","text":"model_fields_set\n\n\n\nproperty CopperFile.model_fields_set: set[str]\n\nReturns the set of fields that have been explicitly set on this model instance.\n\nReturns\n\nA set of strings representing the fields that have been set,\n\ni.e. that were not filled from defaults.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.model_json_schema.html#model_json_schema","title":"model_json_schema","text":"model_json_schema\n\n\n\nclassmethod GerberOutlineFile.model_json_schema(by_alias=True, ref_template='#/$defs/{model}', schema_generator=<class 'pydantic.json_schema.GenerateJsonSchema'>, mode='validation')\n\nGenerates a JSON schema for a model class.\n\nParameters\n\nby_alias (bool) – Whether to use attribute aliases or not.\n\nref_template (str) – The reference template.\n\nschema_generator (type[GenerateJsonSchema]) – To override the logic used to generate the JSON schema, as a subclass of\nGenerateJsonSchema with your desired modifications\n\nmode (Literal['validation', 'serialization']) – The mode in which to generate the schema.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nThe JSON schema for the given model class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.model_fields_set.html#model_fields_set","title":"model_fields_set","text":"model_fields_set\n\n\n\nproperty CircularShape.model_fields_set: set[str]\n\nReturns the set of fields that have been explicitly set on this model instance.\n\nReturns\n\nA set of strings representing the fields that have been set,\n\ni.e. that were not filled from defaults.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.parts.Parts.html#ansyssherlockcorepartsparts","title":"ansys.sherlock.core.parts.Parts","text":"ansys.sherlock.core.parts.Parts\n\n\n\nclass ansys.sherlock.core.parts.Parts(channel, server_version)\n\nContains all parts management capabilities.\n\nMethods\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.schema.html#schema","title":"schema","text":"schema\n\n\n\nclassmethod RectangularShape.schema(by_alias=True, ref_template='#/$defs/{model}')\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.validate.html#validate","title":"validate","text":"validate\n\n\n\nclassmethod CopperImageFile.validate(value)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.model_post_init.html#model_post_init","title":"model_post_init","text":"model_post_init\n\n\n\nCopyPottingRegionRequest.model_post_init(context, /)\n\nOverride this method to perform additional initialization after __init__ and model_construct.\nThis is useful if you want to do some validation that requires the entire model to be initialized.\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.model_rebuild.html#model_rebuild","title":"model_rebuild","text":"model_rebuild\n\n\n\nclassmethod GetTestPointPropertiesRequest.model_rebuild(*, force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace=None)\n\nTry to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nParameters\n\nforce (bool) – Whether to force the rebuilding of the model schema, defaults to False.\n\nraise_errors (bool) – Whether to raise errors, defaults to True.\n\n_parent_namespace_depth (int) – The depth level of the parent namespace, defaults to 2.\n\n_types_namespace (Mapping[str, Any] | None) – The types namespace, defaults to None.\n\nReturn type\n\nbool | None\n\nReturns\n\nReturns None if the schema is already “complete” and rebuilding was not required.\nIf rebuilding _was_ required, returns True if rebuilding was successful, otherwise False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.center_y.html#center_y","title":"center_y","text":"center_y\n\n\n\nTestPointProperties.center_y: float\n\nCenter y-value\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.construct.html#construct","title":"construct","text":"construct\n\n\n\nclassmethod CircularShape.construct(_fields_set=None, **values)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.model_construct.html#model_construct","title":"model_construct","text":"model_construct\n\n\n\nclassmethod UpdatePottingRegionRequest.model_construct(_fields_set=None, **values)\n\nCreates a new instance of the Model class with validated data.\n\nCreates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n\nmodel_construct() generally respects the model_config.extra setting on the provided model.\nThat is, if model_config.extra == ‘allow’, then all extra passed values are added to the model instance’s __dict__\nand __pydantic_extra__ fields. If model_config.extra == ‘ignore’ (the default), then all extra passed values are ignored.\nBecause no validation is performed with a call to model_construct(), having model_config.extra == ‘forbid’ does not result in\nan error if extra values are passed, but they will be ignored.\n\nParameters\n\n_fields_set (set[str] | None) – A set of field names that were originally explicitly set during instantiation. If provided,\nthis is directly used for the [model_fields_set][pydantic.BaseModel.model_fields_set] attribute.\nOtherwise, the field names from the values argument will be used.\n\nvalues (Any) – Trusted or pre-validated data dictionary.\n\nReturn type\n\nSelf\n\nReturns\n\nA new instance of the Model class with validated data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.copy.html#copy","title":"copy","text":"copy\n\n\n\nCopperImageFile.copy(*, include=None, exclude=None, update=None, deep=False)\n\nReturns a copy of the model.\n\n!!! warning “Deprecated”\n\nThis method is now deprecated; use model_copy instead.\n\nIf you need include or exclude, use:\n\n`python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n`\n\nParameters\n\ninclude – Optional set or mapping specifying which fields to include in the copied model.\n\nexclude – Optional set or mapping specifying which fields to exclude in the copied model.\n\nupdate – Optional dictionary of field-value pairs to override field values in the copied model.\n\ndeep – If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns\n\nA copy of the model with included, excluded and updated fields as specified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.schema_json.html#schema_json","title":"schema_json","text":"schema_json\n\n\n\nclassmethod CopperImageFile.schema_json(*, by_alias=True, ref_template='#/$defs/{model}', **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.common.Common.exit.html#exit","title":"exit","text":"exit\n\n\n\nCommon.exit(close_sherlock_client=False)\n\nClose the gRPC connection.\n\nAvailable Since: 2023R1\n\nParameters\n\nclose_sherlock_client\n\nbool, optional\n\nWhether to close the Sherlock client when the gRPC connection is closed. The default\nis False, in which case the Sherlock client remains open when the gRPC connection\nis closed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.IcepakFile.html#ansyssherlockcoretypesproject_typesicepakfile","title":"ansys.sherlock.core.types.project_types.IcepakFile","text":"ansys.sherlock.core.types.project_types.IcepakFile\n\n\n\nclass ansys.sherlock.core.types.project_types.IcepakFile(temperature_offset, temperature_offset_units)\n\nContains the properties for a thermal map Icepak file.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.model_validate_json.html#model_validate_json","title":"model_validate_json","text":"model_validate_json\n\n\n\nclassmethod PottingRegionUpdateData.model_validate_json(json_data, *, strict=None, context=None, by_alias=None, by_name=None)\n\n!!! abstract “Usage Documentation”\n\n[JSON Parsing](../concepts/json.md#json-parsing)\n\nValidate the given JSON data against the Pydantic model.\n\nParameters\n\njson_data (str | bytes | bytearray) – The JSON data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\nRaises\n\nValidationError – If json_data is not a JSON string or the object could not be validated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.model_validate_json.html#model_validate_json","title":"model_validate_json","text":"model_validate_json\n\n\n\nclassmethod PolygonalShape.model_validate_json(json_data, *, strict=None, context=None, by_alias=None, by_name=None)\n\n!!! abstract “Usage Documentation”\n\n[JSON Parsing](../concepts/json.md#json-parsing)\n\nValidate the given JSON data against the Pydantic model.\n\nParameters\n\njson_data (str | bytes | bytearray) – The JSON data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\nRaises\n\nValidationError – If json_data is not a JSON string or the object could not be validated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.update_forward_refs.html#update_forward_refs","title":"update_forward_refs","text":"update_forward_refs\n\n\n\nclassmethod UpdateTestPointsRequest.update_forward_refs(**localns)\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.lifecycle.Lifecycle.save_harmonic_profile.html#save_harmonic_profile","title":"save_harmonic_profile","text":"save_harmonic_profile\n\n\n\nLifecycle.save_harmonic_profile(request)\n\nSave a harmonic life cycle event profile to a .dat or .csv file.\n\nAvailable Since: 2026R1\n\nParameters\n\nrequest\n\nSaveHarmonicProfileRequest\n\nRequest object containing the information needed to save a harmonic profile.\n\nReturns\n\n:\n\n\n\nSherlockCommonService_pb2.ReturnCode\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nReturnCode\n\nExamples\n\n>>> from ansys.sherlock.core.types.lifecycle_types import SaveHarmonicProfileRequest\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> response = sherlock.lifecycle.save_harmonic_profile(\n>>>     SaveHarmonicProfileRequest(\n>>>         project=\"MyProject\",\n>>>         phase_name=\"DurabilityPhase\",\n>>>         event_name=\"Harmonic_100Hz\",\n>>>         triaxial_axis=\"x\",\n>>>         file_path=\"/tmp/Harmonic_100Hz.csv\",\n>>>     )\n>>> )\n>>> assert response.value == 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.model_json_schema.html#model_json_schema","title":"model_json_schema","text":"model_json_schema\n\n\n\nclassmethod TestPointProperties.model_json_schema(by_alias=True, ref_template='#/$defs/{model}', schema_generator=<class 'pydantic.json_schema.GenerateJsonSchema'>, mode='validation')\n\nGenerates a JSON schema for a model class.\n\nParameters\n\nby_alias (bool) – Whether to use attribute aliases or not.\n\nref_template (str) – The reference template.\n\nschema_generator (type[GenerateJsonSchema]) – To override the logic used to generate the JSON schema, as a subclass of\nGenerateJsonSchema with your desired modifications\n\nmode (Literal['validation', 'serialization']) – The mode in which to generate the schema.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nThe JSON schema for the given model class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.model_validate.html#model_validate","title":"model_validate","text":"model_validate\n\n\n\nclassmethod GerberOutlineFile.model_validate(obj, *, strict=None, from_attributes=None, context=None, by_alias=None, by_name=None)\n\nValidate a pydantic model instance.\n\nParameters\n\nobj (Any) – The object to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\nfrom_attributes (bool | None) – Whether to extract data from object attributes.\n\ncontext (Any | None) – Additional context to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nRaises\n\nValidationError – If the object could not be validated.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.model_validate_strings.html#model_validate_strings","title":"model_validate_strings","text":"model_validate_strings\n\n\n\nclassmethod PottingRegion.model_validate_strings(obj, *, strict=None, context=None, by_alias=None, by_name=None)\n\nValidate the given object with string data against the Pydantic model.\n\nParameters\n\nobj (Any) – The object containing string data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.schema_json.html#schema_json","title":"schema_json","text":"schema_json\n\n\n\nclassmethod CopperFile.schema_json(*, by_alias=True, ref_template='#/$defs/{model}', **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.construct.html#construct","title":"construct","text":"construct\n\n\n\nclassmethod SlotShape.construct(_fields_set=None, **values)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.id.html#id","title":"id","text":"id\n\n\n\nICTFixtureProperties.id: str\n\nID\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.model_json_schema.html#model_json_schema","title":"model_json_schema","text":"model_json_schema\n\n\n\nclassmethod DeletePottingRegionRequest.model_json_schema(by_alias=True, ref_template='#/$defs/{model}', schema_generator=<class 'pydantic.json_schema.GenerateJsonSchema'>, mode='validation')\n\nGenerates a JSON schema for a model class.\n\nParameters\n\nby_alias (bool) – Whether to use attribute aliases or not.\n\nref_template (str) – The reference template.\n\nschema_generator (type[GenerateJsonSchema]) – To override the logic used to generate the JSON schema, as a subclass of\nGenerateJsonSchema with your desired modifications\n\nmode (Literal['validation', 'serialization']) – The mode in which to generate the schema.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nThe JSON schema for the given model class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.model_validate_strings.html#model_validate_strings","title":"model_validate_strings","text":"model_validate_strings\n\n\n\nclassmethod TestPointProperties.model_validate_strings(obj, *, strict=None, context=None, by_alias=None, by_name=None)\n\nValidate the given object with string data against the Pydantic model.\n\nParameters\n\nobj (Any) – The object containing string data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.parse_file.html#parse_file","title":"parse_file","text":"parse_file\n\n\n\nclassmethod CircularShape.parse_file(path, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.schema_json.html#schema_json","title":"schema_json","text":"schema_json\n\n\n\nclassmethod GerberOutlineFile.schema_json(*, by_alias=True, ref_template='#/$defs/{model}', **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.center_x.html#center_x","title":"center_x","text":"center_x\n\n\n\nSlotShape.center_x: float\n\nfloat\n\nType\n\nX coordinate of center\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.model_validate_strings.html#model_validate_strings","title":"model_validate_strings","text":"model_validate_strings\n\n\n\nclassmethod CircularShape.model_validate_strings(obj, *, strict=None, context=None, by_alias=None, by_name=None)\n\nValidate the given object with string data against the Pydantic model.\n\nParameters\n\nobj (Any) – The object containing string data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.model_dump.html#model_dump","title":"model_dump","text":"model_dump\n\n\n\nSlotShape.model_dump(*, mode='python', include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump](../concepts/serialization.md#modelmodel_dump)\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nParameters\n\nmode (Union[Literal['json', 'python'], str]) – The mode in which to_python should run.\nIf mode is ‘json’, the output will only contain JSON serializable types.\nIf mode is ‘python’, the output may contain non-JSON-serializable Python objects.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to include in the output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to exclude from the output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to use the field’s alias in the dictionary key if defined.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nA dictionary representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.common.Common.list_units.html#list_units","title":"list_units","text":"list_units\n\n\n\nCommon.list_units(unit_type)\n\nList units for a unit type.\n\nAvailable Since: 2023R2\n\nParameters\n\nunit_type\n\nListUnitsRequestUnitType\n\nUnit type.\n\nReturns\n\n:\n\n\n\npython:str\n\nUnits for the unit type.\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.analysis.Analysis.get_mechanical_shock_input_fields.html#get_mechanical_shock_input_fields","title":"get_mechanical_shock_input_fields","text":"get_mechanical_shock_input_fields\n\n\n\nAnalysis.get_mechanical_shock_input_fields(model_source=None)\n\nGet mechanical shock property fields based on the user configuration.\n\nAvailable Since: 2024R1\n\nParameters\n\nmodel_source: ModelSource, optional\n\nModel source to get the random vibe property fields from.\nOnly GENERATED is supported.\nDefault is None.\n\nReturns\n\n:\n\n\n\npython:list[python:str]\n\nMechanical shock property fields based on the user configuration.\n\nReturn type\n\nlist[str]\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.analysis.get_mechanical_shock_input_fields(ModelSource.GENERATED)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_parts_list.html#update-parts-list","title":"Update Parts List","text":"Update Parts List\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nupdate the parts list, and properly close the connection."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_parts_list.html#description","title":"Update Parts List > Description","text":"Description\n\nSherlock’s gRPC API allows users to automate workflows such as updating the\nparts list for printed circuit boards (PCBs). This script shows how to:\n\nLaunch the Sherlock service.\n\nImport a project.\n\nUpdate the parts list.\n\nProperly close the gRPC connection.\n\nThe updated parts list ensures alignment with a specified library for consistency and accuracy."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_parts_list.html#connect-to-sherlock","title":"Update Parts List > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_parts_list.html#delete-project","title":"Update Parts List > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_parts_list.html#import-tutorial-project","title":"Update Parts List > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_parts_list.html#update-parts-list","title":"Update Parts List","text":"Update Parts List\n\nUpdate the parts list for the “Auto Relay” CCA of the “Test” project.\n\n\n\nDownload Jupyter notebook: update_parts_list.ipynb\n\nDownload Python source code: update_parts_list.py\n\nDownload zipped: update_parts_list.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.model_validate_strings.html#model_validate_strings","title":"model_validate_strings","text":"model_validate_strings\n\n\n\nclassmethod GerberOutlineFile.model_validate_strings(obj, *, strict=None, context=None, by_alias=None, by_name=None)\n\nValidate the given object with string data against the Pydantic model.\n\nParameters\n\nobj (Any) – The object containing string data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.parse_obj.html#parse_obj","title":"parse_obj","text":"parse_obj\n\n\n\nclassmethod GetTestPointPropertiesRequest.parse_obj(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.update_forward_refs.html#update_forward_refs","title":"update_forward_refs","text":"update_forward_refs\n\n\n\nclassmethod CopperFile.update_forward_refs(**localns)\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.project.html#project","title":"project","text":"project\n\n\n\nDeletePottingRegionRequest.project: str\n\nName of the project containing the potting regions to delete.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.layer.Layer.update_modeling_region.html#update_modeling_region","title":"update_modeling_region","text":"update_modeling_region\n\n\n\nLayer.update_modeling_region(project, modeling_regions)\n\nUpdate one or more modeling regions in a specific project.\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\nmodeling_regions\n\npython:list[python:dict]\n\nModeling regions to update. Each dictionary should contain:\n\ncca_name: str\n\nName of the CCA.\n\nregion_id: str\n\nUnique region ID of the modeling region.\n\nregion_units: str\n\nUnits of the modeling region.\n\nmodel_mode: str\n\nMode that specifies how the region is used. Valid values are Enabled,\nDisabled and Excluded.\n\nshape: PolygonalShape|RectangularShape|SlotShape|CircularShape|PCBShape\n\nThe shape of the modeling region.\n\npcb_model_props: dict[str, bool | float | str]\n\nPCB model parameters consisting of these properties:\n\nexport_model_type: str\n\nThe type of model to be generated for a given modeling region.\nValid values are Default, Sherlock, Sweep and None.\n\nelem_order: str\n\nThe type of 3D elements to be created for the PCB in the modeling region.\nValid values are First_Order, Second_Order and Solid_Shell.\n\nmax_mesh_size: float\n\nThe maximum size of the mesh to be used in the region.\n\nmax_mesh_size_units: str\n\nUnits for the maximum mesh size.\n\nquads_preferred: bool\n\nWhether to generate quad-shaped elements when creating the mesh if true.\n\ntrace_model_props: dict[str, float | str]\n\nTrace model parameters consisting of these properties:\n\ntrace_model_type: str\n\nThe specification of whether trace modeling should be performed\nwithin the region. Valid values are Default, Enabled and\nDisabled.\n\nelem_order: str, optional\n\nThe type of 3D elements to be created for the PCB in the modeling region.\nValid values are First_Order, Second_Order and Solid_Shell.\n\ntrace_mesh_size: float, optional\n\nThe maximum mesh size to be used in the region when trace modeling\nis enabled.\n\ntrace_mesh_size_units: str, optional\n\nUnits for the maximum mesh size when trace modeling is enabled.\n\nregion_id_replacement: str, optional\n\nRepresents a unique region id that will replace the existing regionId value during\na modeling region update if a value exists.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n>>>     \"ODB++ Tutorial.tgz\",\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     project=\"Tutorial Project\",\n>>>     cca_name=\"Card\",\n>>> )\n>>> modeling_regions = [\n>>>     {\n>>>         \"cca_name\": \"Card\",\n>>>         \"region_id\": \"Region001\",\n>>>         \"region_units\": \"mm\",\n>>>         \"model_mode\": \"Enabled\",\n>>>         \"shape\": PolygonalShape(points=[(0, 0), (1, 1)], rotation=0),\n>>>         \"pcb_model_props\": {\n>>>             \"export_model_type\": \"Sherlock\",\n>>>             \"elem_order\": \"Second_Order\",\n>>>             \"max_mesh_size\": 0.5,\n>>>             \"max_mesh_size_units\": \"mm\",\n>>>             \"quads_preferred\": True,\n>>>         },\n>>>         \"trace_model_props\": {\n>>>             \"trace_model_type\": \"Enabled\",\n>>>             \"elem_order\": \"Second_Order\",\n>>>             \"trace_mesh_size\": 0.1,\n>>>             \"trace_mesh_size_units\": \"mm\",\n>>>         },\n>>>         \"region_id_replacement\": \"NewRegion001\",\n>>>     }\n>>> ]\n>>> result = sherlock.layer.update_modeling_region(\"Tutorial Project\", modeling_regions)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.update_forward_refs.html#update_forward_refs","title":"update_forward_refs","text":"update_forward_refs\n\n\n\nclassmethod CircularShape.update_forward_refs(**localns)\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.side.html#side","title":"side","text":"side\n\n\n\nTestPointProperties.side: str\n\nSide\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.from_orm.html#from_orm","title":"from_orm","text":"from_orm\n\n\n\nclassmethod UpdateTestPointsRequest.from_orm(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/index.html#api-reference","title":"API reference","text":"API reference\n\nThis section describes PySherlock modules and their classes, methods, and functions.\nUse the search feature or click links to view API documentation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.parts.Parts.update_parts_locations.html#update_parts_locations","title":"update_parts_locations","text":"update_parts_locations\n\n\n\nParts.update_parts_locations(project, cca_name, part_loc)\n\nUpdate one or more part locations.\n\nAvailable Since: 2022R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\npart_loc: list[tuple[str, str, str, str, str, str, str]]\n\nList defining the part locations. The list consists\nof these properties:\n\nrefDes: str\n\nReference designator of the part.\n\nx: str\n\nValue for the x coordinate.\n\ny: str\n\nValue for the y coordinate.\n\nrotation: str\n\nRotation.\n\nlocation_units: str\n\nLocations units.\n\nboard_side: str\n\nBoard side.\n\nmirrored: str\n\nMirrored.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.parts.update_parts_locations(\n    \"Test\",\n    \"Card\",\n    [\n        (\"C1\", \"-2.7\", \"-1.65\", \"0\", \"in\", \"TOP\", \"False\"),\n        (\"J1\", \"-3.55\", \"-2.220446049250313E-16\", \"90\", \"in\", \"TOP\", \"False\"),\n    ]\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.model_copy.html#model_copy","title":"model_copy","text":"model_copy\n\n\n\nCopperFile.model_copy(*, update=None, deep=False)\n\n!!! abstract “Usage Documentation”\n\n[model_copy](../concepts/serialization.md#model_copy)\n\nReturns a copy of the model.\n\n!!! note\n\nThe underlying instance’s [__dict__][object.__dict__] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property]).\n\nParameters\n\nupdate (Mapping[str, Any] | None) – Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\n\ndeep (bool) – Set to True to make a deep copy of the model.\n\nReturn type\n\nSelf\n\nReturns\n\nNew model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.model_validate_json.html#model_validate_json","title":"model_validate_json","text":"model_validate_json\n\n\n\nclassmethod PCBShape.model_validate_json(json_data, *, strict=None, context=None, by_alias=None, by_name=None)\n\n!!! abstract “Usage Documentation”\n\n[JSON Parsing](../concepts/json.md#json-parsing)\n\nValidate the given JSON data against the Pydantic model.\n\nParameters\n\njson_data (str | bytes | bytearray) – The JSON data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\nRaises\n\nValidationError – If json_data is not a JSON string or the object could not be validated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.model_fields.html#model_fields","title":"model_fields","text":"model_fields\n\n\n\nOutlineFile.model_fields = {'cca_names': FieldInfo(annotation=list[str], required=True), 'file_comment': FieldInfo(annotation=Union[str, NoneType], required=False, default=None), 'file_name': FieldInfo(annotation=str, required=True), 'file_type': FieldInfo(annotation=OutlineFileType, required=True), 'outline_file_data': FieldInfo(annotation=Union[CsvExcelOutlineFile, GerberOutlineFile, NoneType], required=False, default=None)}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.model_validate_strings.html#model_validate_strings","title":"model_validate_strings","text":"model_validate_strings\n\n\n\nclassmethod PottingRegionUpdateData.model_validate_strings(obj, *, strict=None, context=None, by_alias=None, by_name=None)\n\nValidate the given object with string data against the Pydantic model.\n\nParameters\n\nobj (Any) – The object containing string data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.from_orm.html#from_orm","title":"from_orm","text":"from_orm\n\n\n\nclassmethod PottingRegionCopyData.from_orm(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.model_validate.html#model_validate","title":"model_validate","text":"model_validate\n\n\n\nclassmethod CircularShape.model_validate(obj, *, strict=None, from_attributes=None, context=None, by_alias=None, by_name=None)\n\nValidate a pydantic model instance.\n\nParameters\n\nobj (Any) – The object to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\nfrom_attributes (bool | None) – Whether to extract data from object attributes.\n\ncontext (Any | None) – Additional context to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nRaises\n\nValidationError – If the object could not be validated.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.model_fields.html#model_fields","title":"model_fields","text":"model_fields\n\n\n\nUpdateTestPointsRequest.model_fields = {'cca_name': FieldInfo(annotation=str, required=True), 'project': FieldInfo(annotation=str, required=True), 'update_test_points': FieldInfo(annotation=list[TestPointProperties], required=True)}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.model_parametrized_name.html#model_parametrized_name","title":"model_parametrized_name","text":"model_parametrized_name\n\n\n\nclassmethod UpdateTestPointsRequest.model_parametrized_name(params)\n\nCompute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nParameters\n\nparams (tuple[type[Any], ...]) – Tuple of types of the class. Given a generic class\nModel with 2 type variables and a concrete model Model[str, int],\nthe value (str, int) would be passed to params.\n\nReturn type\n\nstr\n\nReturns\n\nString representing the new class where params are passed to cls as type variables.\n\nRaises\n\nTypeError – Raised when trying to generate concrete names for non-generic models.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.update_forward_refs.html#update_forward_refs","title":"update_forward_refs","text":"update_forward_refs\n\n\n\nclassmethod PCBShape.update_forward_refs(**localns)\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.dict.html#dict","title":"dict","text":"dict\n\n\n\nCopperFile.dict(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False)\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.json.html#json","title":"json","text":"json\n\n\n\nCopperFile.json(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.layer.Layer.copy_potting_region.html#copy_potting_region","title":"copy_potting_region","text":"copy_potting_region\n\n\n\nLayer.copy_potting_region(request)\n\nCopy one or more potting regions in a specific project.\n\nAvailable Since: 2025R1\n\nParameters\n\nrequest: CopyPottingRegionRequest\n\nContains all the information needed to copy one or more potting regions per project.\n\nReturns\n\n:\n\n\n\npython:list[SherlockCommonService_pb2.ReturnCode]\n\nReturn codes for each request.\n\nReturn type\n\nlist[ReturnCode]\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> from ansys.sherlock.core.types.layer_types import CopyPottingRegionRequest\n>>> from ansys.sherlock.core.types.layer_types import PottingRegionCopyData\n>>> sherlock = launch_sherlock()\n>>>\n>>> copy_request_example = CopyPottingRegionRequest(\n>>> project=project,\n>>> potting_region_copy_data=[\n>>>     PottingRegionCopyData(\n>>>         cca_name=cca_name,\n>>>         potting_id=potting_id,\n>>>         copy_potting_id=new_id,\n>>>         center_x=center_x,\n>>>         center_y=center_y\n>>>     ),\n>>>     PottingRegionCopyData(\n>>>         cca_name=cca_name,\n>>>         potting_id=new_id,\n>>>         copy_potting_id=new_id+\"1\",\n>>>         center_x=center_x,\n>>>         center_y=center_y\n>>>     )\n>>> ]\n>>> )\n>>> responses_example = sherlock.layer.copy_potting_region(copy_request_example)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.height.html#height","title":"height","text":"height\n\n\n\nICTFixtureProperties.height: str\n\nHeight\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/index.html#examples","title":"Examples","text":"Examples\n\nHere are examples using Sherlock with the ansys-sherlock-core library.\n\nProject Configuration\n\nExamples on how to configure a project using PySherlock.\n\nsphx_glr_examples_gallery_examples_01-project-configuration\n\nImporting Projects and Files\n\nExamples on how to import projects and files using PySherlock.\n\nsphx_glr_examples_gallery_examples_02-importing\n\nExporting Projects and Files\n\nExamples on how to import projects and files using PySherlock.\n\nsphx_glr_examples_gallery_examples_03-exporting\n\nRunning Analyses\n\nExamples on how to run analyses using PySherlock.\n\nsphx_glr_examples_gallery_examples_04-analyses\n\n"},{"objectID":"Home","href":"examples/index.html#download-example-files","title":"Examples > Download example files","text":"Download example files\n\nEach example should contain all the necessary resources to run the example.\nHowever in some cases, external files are needed. A link to those files is\navailable at each example page.\nThese links refers to the following GitHub repository where you can find all of them:\n\nGitHub Example Data Repository\n\nIf you find a missing or broken link, open an issue in\nGitHub (PySherlock Issues).\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.rotation.html#rotation","title":"rotation","text":"rotation\n\n\n\nSlotShape.rotation: float\n\nfloat\n\nType\n\nRotation (in degrees)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.model_fields_set.html#model_fields_set","title":"model_fields_set","text":"model_fields_set\n\n\n\nproperty ICTFixtureProperties.model_fields_set: set[str]\n\nReturns the set of fields that have been explicitly set on this model instance.\n\nReturns\n\nA set of strings representing the fields that have been set,\n\ni.e. that were not filled from defaults.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.str_validation.html#str_validation","title":"str_validation","text":"str_validation\n\n\n\nclassmethod PottingRegionUpdateData.str_validation(value, info)\n\nValidate string fields listed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"getting_started/launch_sherlock.html#launch-sherlock","title":"Launch Sherlock","text":"Launch Sherlock\n\nTo launch Sherlock, use the launch_sherlock()\nmethod. This method takes an optional port parameter and automatically searches for the\nlatest version of Sherlock installed locally. It then launches the Sherlock gRPC server on\nthe port specified. If a port is not specified, port 9090 is used.\n\nThis method also launches a Sherlock client connected to the same port and\nreturns a sherlock gRPC connection object that can be used to invoke the APIs from their\nrespective services.\n\nThis code starts the Sherlock gRPC server on the default port:\n\nThis code uses the optional port parameter to start the Sherlock gRPC server on port\n11000:\n\nYou can use the Common.check()\nmethod to perform a health check on the sherlock gRPC connection object:\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.model_post_init.html#model_post_init","title":"model_post_init","text":"model_post_init\n\n\n\nGetICTFixturesPropertiesRequest.model_post_init(context, /)\n\nOverride this method to perform additional initialization after __init__ and model_construct.\nThis is useful if you want to do some validation that requires the entire model to be initialized.\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.project.Project.export_project.html#export_project","title":"export_project","text":"export_project\n\n\n\nProject.export_project(project_name, export_design_files, export_result_files, export_archive_results, export_user_files, export_log_files, export_system_data, export_file_dir, export_file_name, overwrite_existing_file)\n\nExport a sherlock project.\n\nAvailable Since: 2025R1\n\nParameters\n\nproject_name: str\n\nName of the project being exported.\n\nexport_design_files: bool\n\nDetermines if design files should be exported.\n\nexport_result_files: bool\n\nDetermines if all analysis module result files should be exported.\n\nexport_archive_results: bool\n\nDetermines if all archive result files should be exported.\n\nexport_user_files: bool\n\nDetermines if user properties and custom data files should be exported.\n\nexport_log_files: bool\n\nDetermines if Sherlock console and application log files should be exported.\n\nexport_system_data: bool\n\nDetermines if system technical data should be exported.\n\nexport_file_dir: str\n\nDestination of export file.\n\nexport_file_name: str\n\nName to be given to the exported file.\n\noverwrite_existing_file: bool\n\nDetermines if exported file will overwrite a previously existing file.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.export_project(\"Tutorial Project\",\nTrue,\nTrue,\nTrue,\nTrue,\nTrue,\nTrue,\n\"C:/Path/To/Exported/Project\",\n\"Exported_Project\",\nTrue)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.non_negative_int_validation.html#non_negative_int_validation","title":"non_negative_int_validation","text":"non_negative_int_validation\n\n\n\nclassmethod CsvExcelOutlineFile.non_negative_int_validation(value, info)\n\nValidate integer fields listed contain non-negative values.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/launcher.html#launcher","title":"Launcher","text":"Launcher\n\n\n\nModule for launching Sherlock locally or connecting to a local instance with gRPC.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.model_json_schema.html#model_json_schema","title":"model_json_schema","text":"model_json_schema\n\n\n\nclassmethod PottingRegionCopyData.model_json_schema(by_alias=True, ref_template='#/$defs/{model}', schema_generator=<class 'pydantic.json_schema.GenerateJsonSchema'>, mode='validation')\n\nGenerates a JSON schema for a model class.\n\nParameters\n\nby_alias (bool) – Whether to use attribute aliases or not.\n\nref_template (str) – The reference template.\n\nschema_generator (type[GenerateJsonSchema]) – To override the logic used to generate the JSON schema, as a subclass of\nGenerateJsonSchema with your desired modifications\n\nmode (Literal['validation', 'serialization']) – The mode in which to generate the schema.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nThe JSON schema for the given model class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.layer.Layer.delete_all_ict_fixtures.html#delete_all_ict_fixtures","title":"delete_all_ict_fixtures","text":"delete_all_ict_fixtures\n\n\n\nLayer.delete_all_ict_fixtures(project, cca_name)\n\nDelete all ICT fixtures for a CCA.\n\nAvailable Since: 2023R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n>>>     \"ODB++ Tutorial.tgz\",\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     project=\"Test\",\n>>>     cca_name=\"Card\",\n>>> )\n>>> sherlock.layer.update_ict_fixtures_by_file(\n>>>     \"Test\",\n>>>     \"Card\",\n>>>     \"ICTFixturesImport.csv\",\n>>> )\n>>> sherlock.layer.delete_all_ict_fixtures(\"Test\", \"Card\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.model_fields_set.html#model_fields_set","title":"model_fields_set","text":"model_fields_set\n\n\n\nproperty PCBShape.model_fields_set: set[str]\n\nReturns the set of fields that have been explicitly set on this model instance.\n\nReturns\n\nA set of strings representing the fields that have been set,\n\ni.e. that were not filled from defaults.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.json.html#json","title":"json","text":"json\n\n\n\nPottingRegion.json(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.node_count.html#node_count","title":"node_count","text":"node_count\n\n\n\nCircularShape.node_count: int\n\nint\n\nType\n\nNode count\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.model_config.html#model_config","title":"model_config","text":"model_config\n\n\n\nCopyPottingRegionRequest.model_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.boundary.html#boundary","title":"boundary","text":"boundary\n\n\n\nICTFixtureProperties.boundary: str\n\nBoundary point(s)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelFile.temperature_units.html#temperature_units","title":"temperature_units","text":"temperature_units\n\n\n\nCsvExcelFile.temperature_units\n\ntemperature_units\n\nType\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelFile.header_row_count.html#header_row_count","title":"header_row_count","text":"header_row_count\n\n\n\nCsvExcelFile.header_row_count\n\nheader_row_count\n\nType\n\nint\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.ImageFile.image_bounds.html#image_bounds","title":"image_bounds","text":"image_bounds\n\n\n\nImageFile.image_bounds\n\nimage_bounds\n\nType\n\nImageBounds\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.copy.html#copy","title":"copy","text":"copy\n\n\n\nGetTestPointPropertiesRequest.copy(*, include=None, exclude=None, update=None, deep=False)\n\nReturns a copy of the model.\n\n!!! warning “Deprecated”\n\nThis method is now deprecated; use model_copy instead.\n\nIf you need include or exclude, use:\n\n`python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n`\n\nParameters\n\ninclude – Optional set or mapping specifying which fields to include in the copied model.\n\nexclude – Optional set or mapping specifying which fields to exclude in the copied model.\n\nupdate – Optional dictionary of field-value pairs to override field values in the copied model.\n\ndeep – If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns\n\nA copy of the model with included, excluded and updated fields as specified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.model_extra.html#model_extra","title":"model_extra","text":"model_extra\n\n\n\nproperty CopperGerberFile.model_extra: dict[str, Any] | None\n\nGet extra fields set during validation.\n\nReturns\n\nA dictionary of extra fields, or None if config.extra is not set to “allow”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.json.html#json","title":"json","text":"json\n\n\n\nUpdateTestPointsRequest.json(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.project.html#project","title":"project","text":"project\n\n\n\nGetICTFixturesPropertiesRequest.project: str\n\nName of the project.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.model_dump_json.html#model_dump_json","title":"model_dump_json","text":"model_dump_json\n\n\n\nPottingRegionUpdateData.model_dump_json(*, indent=None, include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump_json](../concepts/serialization.md#modelmodel_dump_json)\n\nGenerates a JSON representation of the model using Pydantic’s to_json method.\n\nParameters\n\nindent (int | None) – Indentation to use in the JSON output. If None is passed, the output will be compact.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to include in the JSON output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to exclude from the JSON output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to serialize using field aliases.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\nstr\n\nReturns\n\nA JSON string representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.model_construct.html#model_construct","title":"model_construct","text":"model_construct\n\n\n\nclassmethod GetICTFixturesPropertiesRequest.model_construct(_fields_set=None, **values)\n\nCreates a new instance of the Model class with validated data.\n\nCreates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n\nmodel_construct() generally respects the model_config.extra setting on the provided model.\nThat is, if model_config.extra == ‘allow’, then all extra passed values are added to the model instance’s __dict__\nand __pydantic_extra__ fields. If model_config.extra == ‘ignore’ (the default), then all extra passed values are ignored.\nBecause no validation is performed with a call to model_construct(), having model_config.extra == ‘forbid’ does not result in\nan error if extra values are passed, but they will be ignored.\n\nParameters\n\n_fields_set (set[str] | None) – A set of field names that were originally explicitly set during instantiation. If provided,\nthis is directly used for the [model_fields_set][pydantic.BaseModel.model_fields_set] attribute.\nOtherwise, the field names from the values argument will be used.\n\nvalues (Any) – Trusted or pre-validated data dictionary.\n\nReturn type\n\nSelf\n\nReturns\n\nA new instance of the Model class with validated data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.model_copy.html#model_copy","title":"model_copy","text":"model_copy\n\n\n\nCopperGerberFile.model_copy(*, update=None, deep=False)\n\n!!! abstract “Usage Documentation”\n\n[model_copy](../concepts/serialization.md#model_copy)\n\nReturns a copy of the model.\n\n!!! note\n\nThe underlying instance’s [__dict__][object.__dict__] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property]).\n\nParameters\n\nupdate (Mapping[str, Any] | None) – Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\n\ndeep (bool) – Set to True to make a deep copy of the model.\n\nReturn type\n\nSelf\n\nReturns\n\nNew model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.model_rebuild.html#model_rebuild","title":"model_rebuild","text":"model_rebuild\n\n\n\nclassmethod CopperGerberFile.model_rebuild(*, force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace=None)\n\nTry to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nParameters\n\nforce (bool) – Whether to force the rebuilding of the model schema, defaults to False.\n\nraise_errors (bool) – Whether to raise errors, defaults to True.\n\n_parent_namespace_depth (int) – The depth level of the parent namespace, defaults to 2.\n\n_types_namespace (Mapping[str, Any] | None) – The types namespace, defaults to None.\n\nReturn type\n\nbool | None\n\nReturns\n\nReturns None if the schema is already “complete” and rebuilding was not required.\nIf rebuilding _was_ required, returns True if rebuilding was successful, otherwise False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.length.html#length","title":"length","text":"length\n\n\n\nICTFixtureProperties.length: str\n\nLength\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.parts.Parts.import_parts_list.html#import_parts_list","title":"import_parts_list","text":"import_parts_list\n\n\n\nParts.import_parts_list(project, cca_name, import_file, import_as_user_src)\n\nImport a parts list for a CCA.\n\nAvailable Since: 2021R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nimport_file: str\n\nFull path to the CSV file with the parts list.\n\nimport_as_user_src: bool\n\nWhether to set the data source of the properties to \"User\".\nOtherwise, the data source is set to the name of the CSV file.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.parts.import_parts_list(\n    \"Test\",\n    \"Card\",\n    \"Parts List.csv\",\n    False\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.model_dump_json.html#model_dump_json","title":"model_dump_json","text":"model_dump_json\n\n\n\nPolygonalShape.model_dump_json(*, indent=None, include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump_json](../concepts/serialization.md#modelmodel_dump_json)\n\nGenerates a JSON representation of the model using Pydantic’s to_json method.\n\nParameters\n\nindent (int | None) – Indentation to use in the JSON output. If None is passed, the output will be compact.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to include in the JSON output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to exclude from the JSON output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to serialize using field aliases.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\nstr\n\nReturns\n\nA JSON string representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.parse_obj.html#parse_obj","title":"parse_obj","text":"parse_obj\n\n\n\nclassmethod CircularShape.parse_obj(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.ImageBounds.height.html#height","title":"height","text":"height\n\n\n\nImageBounds.height\n\nheight of the image\n\nType\n\nfloat\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.construct.html#construct","title":"construct","text":"construct\n\n\n\nclassmethod CopperGerberFile.construct(_fields_set=None, **values)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.stackup.Stackup.list_conductor_layers.html#list_conductor_layers","title":"list_conductor_layers","text":"list_conductor_layers\n\n\n\nStackup.list_conductor_layers(project)\n\nList CCA conductor layers.\n\nAvailable Since: 2021R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\nReturns\n\n:\n\n\n\npython:list[SherlockStackupService_pb2.ListConductorLayersResponse.CCAConductorLayerProp]\n\nThe conductor layers of all CCAs in the project.\n\nReturn type\n\nlist[CCAConductorLayerProp]\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> conductorLayers = sherlock.stackup.list_conductor_layers(project=\"Tutorial\")\n>>> for layer in conductorLayers:\n>>>     properties = layer.conductorLayerProps\n>>>     for prop in properties:\n>>>     print(f\"{prop}\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.potting_thickness.html#potting_thickness","title":"potting_thickness","text":"potting_thickness\n\n\n\nPottingRegion.potting_thickness: float\n\nThe potting thickness.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Release notes","href":"changelog.html#release-notes","title":"Release notes","text":"Release notes\n\nThis document contains the release notes for the project."},{"objectID":"Release notes","href":"changelog.html#090---may-22-2025","title":"Release notes > 0.9.0 - May 22, 2025","text":"0.9.0 - May 22, 2025\n\nAdded\n\n\n\n\n\nfeat: launching a specific version of Sherlock\n\n#431\n\nfeat: add Analysis.update_component_failure_mechanism_analysis_props()\n\n#478\n\nfeat: New API update_semiconductor_wearout_props()\n\n#488\n\nfeat: new API update_PTH_fatigue_props()\n\n#492\n\nfeat: add Parts.get_parts_list_properties()\n\n#502\n\nfeat: new API update_pad_properties()\n\n#505\n\nfeat: Refactor launcher to allow connecting to Sherlock that is running\n\n#508\n\nfeat: new API deletePartsFromPartsList()\n\n#526\n\nfeat: Update thermal maps APIs\n\n#530\n\nfeat: Get solder info RPC\n\n#534\n\nfeat: new API import_GDSII_file\n\n#537\n\nfeat: new API to add board outline\n\n#560\n\nFixed\n\n\n\n\n\nfix: proper AUTHORS file\n\n#438\n\nfix: API updatePTHFatigueProps()\n\n#506\n\nfix: PartLocation variable was renamed by mistake\n\n#515\n\nfix: update_pad_properties - returnCode management\n\n#522\n\nfix: don’t try to launch Sherlock that isn’t installed with corresponding version of Ansys\n\n#548\n\nfix: Error handling: improved for Parts, Lifecycle, and Stackup\n\n#567\n\nDocumentation\n\n\n\n\n\nMAINT: add action changelog and changelog.rst for release notes\n\n#426\n\nUpdate unit test for HV strain map analysis.\n\n#428\n\nMAINT: Bump ansys-sphinx-theme from 1.1.6 to 1.1.7\n\n#429\n\nMAINT: Bump grpcio from 1.67.0 to 1.67.1\n\n#433\n\nMAINT: Bump pytest-cov from 5.0.0 to 6.0.0\n\n#434\n\nMAINT: Bump ansys-sphinx-theme from 1.1.7 to 1.2.0\n\n#436\n\nfeat: Adding version check to all API methods\n\n#440\n\nfeat: Keith/potting region update\n\n#441\n\nfix: Analysis.update_harmonic_vibe_props(): add support for setting model source and strain map natural frequency\n\n#442\n\ndocs: update the pull request template\n\n#446\n\nfeat:Keith/copy delete potting region\n\n#448\n\nMAINT: Bump ansys-sphinx-theme from 1.2.0 to 1.2.1\n\n#449\n\ndoc: project logo\n\n#450\n\nMAINT: Bump codecov/codecov-action from 4 to 5\n\n#451\n\nfeat: add type hints\n\n#454\n\nfeat: increment version of ansys-api-sherlock to 0.1.35\n\n#461\n\nfea: adding new PySherlock APIs Layer.list_layers and Layer.export_layer_image\n\n#462\n\nchore: update CHANGELOG for v0.8.0\n\n#469\n\nchore: update CHANGELOG for v0.8.1\n\n#471\n\nMAINT: Bump version ansys-api-sherlock to v0.1.36\n\n#473\n\ndocs: Updated documentation in update potting region.\n\n#477\n\nMAINT: bump ansys-sphinx-theme from 1.2.3 to 1.2.4\n\n#479\n\nDOC: New documentation examples\n\n#480\n\nMAINT: Add support for Python 3.13\n\n#481\n\nMAINT: bump grpcio from 1.67.1 to 1.69.0\n\n#482\n\nMAINT: bump ansys-sphinx-theme from 1.2.4 to 1.2.6\n\n#483\n\nMAINT: Revert grpcio version for tests. Modify dependabot.yml so it doesn’t update grpcio dependencies\n\n#485\n\nchore: update CHANGELOG for v0.8.2\n\n#489\n\nMAINT: bump ansys-api-sherlock from 0.1.37 to 0.1.38\n\n#490\n\nfeat: Update license file to latest\n\n#494\n\nMAINT: bump ansys-sphinx-theme from 1.2.6 to 1.2.7\n\n#496\n\nMAINT: bump ansys-api-sherlock from 0.1.38 to 0.1.39\n\n#497\n\nMAINT: bump sphinx-gallery from 0.18.0 to 0.19.0\n\n#499\n\nMAINT: bump ansys-sphinx-theme from 1.2.7 to 1.3.1\n\n#500\n\nMAINT: bump ansys-api-sherlock from 0.1.39 to 0.1.40\n\n#503\n\nMAINT: bump sphinx from 8.1.3 to 8.2.0\n\n#504\n\nMAINT: bump ansys-sphinx-theme from 1.3.1 to 1.3.2\n\n#509\n\nMAINT: bump sphinx from 8.2.0 to 8.2.3\n\n#516\n\nMAINT: bump pytest from 8.3.4 to 8.3.5\n\n#518\n\nMAINT: bump ansys-api-sherlock from 0.1.41 to 0.1.42\n\n#520\n\nfix: unit test for Layer.list_layers()\n\n#529\n\nMAINT: bump ansys-api-sherlock from 0.1.43 to 0.1.44\n\n#531\n\nMAINT: bump ansys-sphinx-theme from 1.3.2 to 1.4.2\n\n#532\n\nfeat: Keith/solder info\n\n#533\n\nmaint: set sphinx-design as documentation requirement\n\n#535\n\nMAINT: bump pytest-cov from 6.0.0 to 6.1.0\n\n#540\n\ntest: modify test for getting part list properties to validate partNumber instead of validating number of properties\n\n#541\n\nMAINT: bump pytest-cov from 6.1.0 to 6.1.1\n\n#542\n\ndocs: Update CONTRIBUTORS.md with the latest contributors\n\n#543, #554\n\nMAINT: Bump ansys/actions from 8 to 9\n\n#544\n\nfix: stackup test- modified expected CTEz for result of Stackup.get_stackup_props()\n\n#545\n\ndocs: Layer.update_modeling_region()- fixed HTML formatting of example (rem…\n\n#547\n\ntest: fix launcher tests\n\n#549\n\nMAINT: Bump ansys-api-sherlock from 0.1.45 to 0.1.46\n\n#552\n\nMAINT: Bump matplotlib from 3.9.2 to 3.10.1\n\n#555\n\nMAINT: Bump sphinx-notfound-page from 1.0.4 to 1.1.0\n\n#556\n\nMAINT: Bump ansys-sphinx-theme from 1.3.1 to 1.4.2\n\n#557\n\nMAINT: Bump sphinx-autodoc-typehints from 2.5.0 to 3.0.1\n\n#558\n\ndocs: Examples: reorganize folders, fix Sphinx warnings\n\n#561\n\ndocs: corrected the syntax of the API example for Model.exportTraceModel()\n\n#565\n\nchore: Update pre-config-hooks from 4.6.0 to 5.0.0\n\n#566\n\nMAINT: Bump ansys-sphinx-theme from 1.4.2 to 1.4.3\n\n#568\n\nMAINT: Bump ansys-sphinx-theme from 1.4.3 to 1.4.4\n\n#569\n\nMAINT: Bump matplotlib from 3.10.1 to 3.10.3\n\n#570\n\ndocs: document version compatibility in the installation instructions\n\n#571"},{"objectID":"Release notes","href":"changelog.html#082---2025-01-20","title":"Release notes > 0.8.2 - 2025-01-20","text":"0.8.2 - 2025-01-20"},{"objectID":"Release notes","href":"changelog.html#documentation","title":"Release notes > Documentation","text":"Documentation\n\nfix: changed Launcher.launch_sherlock() to properly append sherlock_command_args #487"},{"objectID":"Release notes","href":"changelog.html#081---2024-12-10","title":"Release notes > 0.8.1 - 2024-12-10","text":"0.8.1 - 2024-12-10"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nfix: conf.py issue #467\n\nfix: import statements #470"},{"objectID":"Release notes","href":"changelog.html#documentation","title":"Release notes > Documentation","text":"Documentation\n\nMAINT: Bump pytest from 8.3.3 to 8.3.4 #459\n\nMAINT: Bump ansys-sphinx-theme from 1.2.1 to 1.2.3 #463"},{"objectID":"Release notes","href":"changelog.html#080---2024-12-10","title":"Release notes > 0.8.0 - 2024-12-10","text":"0.8.0 - 2024-12-10"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nfix: conf.py issue #467"},{"objectID":"Release notes","href":"changelog.html#080---2024-12-09","title":"Release notes > 0.8.0 - 2024-12-09","text":"0.8.0 - 2024-12-09"},{"objectID":"Release notes","href":"changelog.html#added","title":"Release notes > Added","text":"Added\n\nfeat: launching a specific version of Sherlock #431"},{"objectID":"Release notes","href":"changelog.html#fixed","title":"Release notes > Fixed","text":"Fixed\n\nfix: proper AUTHORS file #438"},{"objectID":"Release notes","href":"changelog.html#documentation","title":"Release notes > Documentation","text":"Documentation\n\nMAINT: add action changelog and changelog.rst for release notes #426\n\nUpdate unit test for HV strain map analysis. #428\n\nMAINT: Bump ansys-sphinx-theme from 1.1.6 to 1.1.7 #429\n\nMAINT: Bump grpcio from 1.67.0 to 1.67.1 #433\n\nMAINT: Bump pytest-cov from 5.0.0 to 6.0.0 #434\n\nMAINT: Bump ansys-sphinx-theme from 1.1.7 to 1.2.0 #436\n\nfeat: Adding version check to all API methods #440\n\nfeat: Keith/potting region update #441\n\nfix: Analysis.update_harmonic_vibe_props(): add support for setting model source and strain map natural frequency #442\n\ndocs: update the pull request template #446\n\nfeat:Keith/copy delete potting region #448\n\nMAINT: Bump ansys-sphinx-theme from 1.2.0 to 1.2.1 #449\n\ndoc: project logo #450\n\nMAINT: Bump codecov/codecov-action from 4 to 5 #451\n\nfeat: add type hints #454\n\nfeat: increment version of ansys-api-sherlock to 0.1.35 #461\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.model_copy.html#model_copy","title":"model_copy","text":"model_copy\n\n\n\nGetICTFixturesPropertiesRequest.model_copy(*, update=None, deep=False)\n\n!!! abstract “Usage Documentation”\n\n[model_copy](../concepts/serialization.md#model_copy)\n\nReturns a copy of the model.\n\n!!! note\n\nThe underlying instance’s [__dict__][object.__dict__] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property]).\n\nParameters\n\nupdate (Mapping[str, Any] | None) – Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\n\ndeep (bool) – Set to True to make a deep copy of the model.\n\nReturn type\n\nSelf\n\nReturns\n\nNew model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.model_config.html#model_config","title":"model_config","text":"model_config\n\n\n\nGerberOutlineFile.model_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.validate.html#validate","title":"validate","text":"validate\n\n\n\nclassmethod CircularShape.validate(value)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.model_json_schema.html#model_json_schema","title":"model_json_schema","text":"model_json_schema\n\n\n\nclassmethod GetTestPointPropertiesRequest.model_json_schema(by_alias=True, ref_template='#/$defs/{model}', schema_generator=<class 'pydantic.json_schema.GenerateJsonSchema'>, mode='validation')\n\nGenerates a JSON schema for a model class.\n\nParameters\n\nby_alias (bool) – Whether to use attribute aliases or not.\n\nref_template (str) – The reference template.\n\nschema_generator (type[GenerateJsonSchema]) – To override the logic used to generate the JSON schema, as a subclass of\nGenerateJsonSchema with your desired modifications\n\nmode (Literal['validation', 'serialization']) – The mode in which to generate the schema.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nThe JSON schema for the given model class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.model_parametrized_name.html#model_parametrized_name","title":"model_parametrized_name","text":"model_parametrized_name\n\n\n\nclassmethod ICTFixtureProperties.model_parametrized_name(params)\n\nCompute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nParameters\n\nparams (tuple[type[Any], ...]) – Tuple of types of the class. Given a generic class\nModel with 2 type variables and a concrete model Model[str, int],\nthe value (str, int) would be passed to params.\n\nReturn type\n\nstr\n\nReturns\n\nString representing the new class where params are passed to cls as type variables.\n\nRaises\n\nTypeError – Raised when trying to generate concrete names for non-generic models.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.parse_file.html#parse_file","title":"parse_file","text":"parse_file\n\n\n\nclassmethod PCBShape.parse_file(path, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.schema_json.html#schema_json","title":"schema_json","text":"schema_json\n\n\n\nclassmethod PottingRegionUpdateData.schema_json(*, by_alias=True, ref_template='#/$defs/{model}', **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.model_fields_set.html#model_fields_set","title":"model_fields_set","text":"model_fields_set\n\n\n\nproperty GetICTFixturesPropertiesRequest.model_fields_set: set[str]\n\nReturns the set of fields that have been explicitly set on this model instance.\n\nReturns\n\nA set of strings representing the fields that have been set,\n\ni.e. that were not filled from defaults.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.json.html#json","title":"json","text":"json\n\n\n\nGetTestPointPropertiesRequest.json(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.model_copy.html#model_copy","title":"model_copy","text":"model_copy\n\n\n\nPottingRegionDeleteData.model_copy(*, update=None, deep=False)\n\n!!! abstract “Usage Documentation”\n\n[model_copy](../concepts/serialization.md#model_copy)\n\nReturns a copy of the model.\n\n!!! note\n\nThe underlying instance’s [__dict__][object.__dict__] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property]).\n\nParameters\n\nupdate (Mapping[str, Any] | None) – Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\n\ndeep (bool) – Set to True to make a deep copy of the model.\n\nReturn type\n\nSelf\n\nReturns\n\nNew model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.layer.Layer.export_all_test_points.html#export_all_test_points","title":"export_all_test_points","text":"export_all_test_points\n\n\n\nLayer.export_all_test_points(project, cca_name, export_file, length_units='DEFAULT', displacement_units='DEFAULT', force_units='DEFAULT')\n\nExport the test point properties for a CCA.\n\nAvailable Since: 2023R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nexport_file: str\n\nFull path for the CSV file to export the test points list to.\n\nlength_units: str, optional\n\nLength units to use when exporting the test points.\nThe default is DEFAULT.\n\ndisplacement_units: str, optional\n\nDisplacement units to use when exporting the test points.\nThe default is DEFAULT.\n\nforce_units: str, optional\n\nForce units to use when exporting the test points.\nThe default is DEFAULT.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n>>>     \"ODB++ Tutorial.tgz\",\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     project=\"Tutorial Project\",\n>>>     cca_name=\"Card\",\n>>> )\n>>> sherlock.layer.export_all_test_points(\n>>>     \"Tutorial Project\",\n>>>     \"Card\",\n>>>     \"TestPointsExport.csv\",\n>>>     \"DEFAULT\",\n>>>     \"DEFAULT\",\n>>>     \"DEFAULT\"\n>>> )\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.project.Project.add_outline_file.html#add_outline_file","title":"add_outline_file","text":"add_outline_file\n\n\n\nProject.add_outline_file(request)\n\nAdd outline files to a Sherlock project.\n\nAvailable Since: 2025R2\n\nParameters\n\nrequest\n\nAddOutlineFileRequest\n\nContains the information needed to add an outline file to a Sherlock project.\n\nReturns\n\n:\n\n\n\npython:list[SherlockCommonService_pb2.ReturnCode]\n\nReturn codes for each request.\n\nReturn type\n\nlist[ReturnCode]\n\nExamples\n\n>>> from ansys.sherlock.core.types.project_types import AddOutlineFileRequest\n>>> from ansys.sherlock.core.types.project_types import CsvExcelOutlineFile\n>>> from ansys.sherlock.core.types.project_types import OutlineFile\n>>> from ansys.sherlock.core.types.project_types import OutlineFileType\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> responses = sherlock.project.add_outline_file(\n>>>     AddOutlineFileRequest(\n>>>         project=\"TestProject\",\n>>>         outline_files = [\n>>>             OutlineFile(\n>>>                 cca_names=[\"TestCCA\"],\n>>>                 file_name=\"path/to/outline.csv\",\n>>>                 file_type=OutlineFileType.CSV_EXCEL,\n>>>                 outline_file_data=CsvExcelOutlineFile(\n>>>                     header_row_count=0,\n>>>                     location_units=\"mm\",\n>>>                     x_location_column=\"X\",\n>>>                     y_location_column=\"Y\",\n>>>                 )\n>>>             )\n>>>         ]\n>>>     )\n>>> )\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.model_config.html#model_config","title":"model_config","text":"model_config\n\n\n\nOutlineFile.model_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.project.Project.add_thermal_maps.html#add_thermal_maps","title":"add_thermal_maps","text":"add_thermal_maps\n\n\n\nProject.add_thermal_maps(project, add_thermal_map_files)\n\nAdd thermal map files to a Sherlock project.\n\nAvailable Since: 2024R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project to add thermal maps to.\n\nadd_thermal_map_files: list[dict[str, list[dict[str, str | ThermalMapsFileType                | ThermalBoardSide | CsvExcelFile | IcepakFile | ImageFile | list[str]]] | str]]\n\nList of thermal map files consisting of these properties:\n\nthermal_map_file: str\n\nFull path to the thermal map file to add.\n\nthermal_map_file_properties: list\n\nList of thermal map properties consisting of these properties:\n\nfile_name: str\n\nName of the thermal file to update.\n\nfile_type: ThermalMapsFileType\n\nThermal maps file type.\n\nfile_comment: str, optional\n\nComment to associate with the file.\n\nthermal_board_side: ThermalBoardSide\n\nThermal board side.\n\nfile_data: CsvExcelFile | IcepakFile | ImageFile\n\nThe properties of the thermal map file to update.\n\nthermal_profiles: List of str\n\nList of thermal profiles.\n\ncca_names: List of str, optional\n\nList of CCA names to provide thermal maps for. The default is None,\nin which case all CCAs in the project are returned.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> from ansys.sherlock.core.types.project_types import (\n    BoardBounds,\n    ImageBounds,\n    ImageFile,\n    LegendBounds,\n    LegendOrientation,\n    ThermalBoardSide,\n    ThermalMapsFileType,\n)\n>>> sherlock = launch_sherlock()\n>>> thermal_map_properties = ImageFile(board_bounds=BoardBounds([\n    (1.0, 2.0),\n    (3.0, 4.0),\n    (1.0, 2.0),\n    (1.0, 2.0)]),\n    coordinate_units=\"in\",\n    image_bounds=ImageBounds(0.0, 0.0, 10.0, 8.0),\n    legend_bounds=LegendBounds(1.0, 2.0, 4.0, 2.0),\n    legend_orientation=LegendOrientation.VERTICAL,\n    min_temperature=20.0,\n    min_temperature_units=\"C\",\n    max_temperature=50.0,\n    max_temperature_units=\"C\"\n)\n>>> files = [\n    {\n        \"thermal_map_file\": \"Thermal Image.jpg\",\n        \"thermal_map_file_properties\": [\n            {\n                \"file_name\": \"Thermal Image.jpg\",\n                \"file_type\": ThermalMapsFileType.IMAGE,\n                \"file_comment\": \"Update thermal map\",\n                \"thermal_board_side\": ThermalBoardSide.TOP,\n                \"file_data\": thermal_map_properties,\n                \"thermal_profiles\": [\"Environmental/1 - Temp Cycle - Min\"],\n                \"cca_names\": [\"CCA1\", \"CCA2\"]\n            },\n        ]\n    }\n]\n>>> sherlock.project.add_thermal_maps(\"Tutorial Project\", files)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.model_validate.html#model_validate","title":"model_validate","text":"model_validate\n\n\n\nclassmethod PottingRegion.model_validate(obj, *, strict=None, from_attributes=None, context=None, by_alias=None, by_name=None)\n\nValidate a pydantic model instance.\n\nParameters\n\nobj (Any) – The object to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\nfrom_attributes (bool | None) – Whether to extract data from object attributes.\n\ncontext (Any | None) – Additional context to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nRaises\n\nValidationError – If the object could not be validated.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.dict.html#dict","title":"dict","text":"dict\n\n\n\nCopperGerberFile.dict(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False)\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_all_test_fixtures.html#export-all-test-fixtures","title":"Export All Test Fixtures","text":"Export All Test Fixtures\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nand export all test fixtures for a CCA."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_all_test_fixtures.html#description","title":"Export All Test Fixtures > Description","text":"Description\n\nSherlock’s gRPC API enables users to automate various workflows, including exporting all\ntest fixtures for a CCA.\nThis script demonstrates how to:\n\nConnect to the Sherlock service.\n\nImport a tutorial project.\n\nExport all test fixtures to a CSV file."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_all_test_fixtures.html#connect-to-sherlock","title":"Export All Test Fixtures > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_all_test_fixtures.html#delete-project","title":"Export All Test Fixtures > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_all_test_fixtures.html#import-tutorial-project","title":"Export All Test Fixtures > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive provided with the Sherlock installation."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_all_test_fixtures.html#export-all-test-fixtures","title":"Export All Test Fixtures","text":"Export All Test Fixtures\n\nExport all test fixtures for the “Main Board” to a CSV file.\n\n\n\nDownload Jupyter notebook: export_all_test_fixtures.ipynb\n\nDownload Python source code: export_all_test_fixtures.py\n\nDownload zipped: export_all_test_fixtures.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.schema.html#schema","title":"schema","text":"schema\n\n\n\nclassmethod GetICTFixturesPropertiesRequest.schema(by_alias=True, ref_template='#/$defs/{model}')\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.from_orm.html#from_orm","title":"from_orm","text":"from_orm\n\n\n\nclassmethod CopyPottingRegionRequest.from_orm(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.model_validate_json.html#model_validate_json","title":"model_validate_json","text":"model_validate_json\n\n\n\nclassmethod UpdatePottingRegionRequest.model_validate_json(json_data, *, strict=None, context=None, by_alias=None, by_name=None)\n\n!!! abstract “Usage Documentation”\n\n[JSON Parsing](../concepts/json.md#json-parsing)\n\nValidate the given JSON data against the Pydantic model.\n\nParameters\n\njson_data (str | bytes | bytearray) – The JSON data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\nRaises\n\nValidationError – If json_data is not a JSON string or the object could not be validated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.html#ansyssherlockcoretypeslayer_typespcbshape","title":"ansys.sherlock.core.types.layer_types.PCBShape","text":"ansys.sherlock.core.types.layer_types.PCBShape\n\n\n\nclass ansys.sherlock.core.types.layer_types.PCBShape(**data)\n\nContains the properties for a PCB shape.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.model_validate_json.html#model_validate_json","title":"model_validate_json","text":"model_validate_json\n\n\n\nclassmethod DeletePottingRegionRequest.model_validate_json(json_data, *, strict=None, context=None, by_alias=None, by_name=None)\n\n!!! abstract “Usage Documentation”\n\n[JSON Parsing](../concepts/json.md#json-parsing)\n\nValidate the given JSON data against the Pydantic model.\n\nParameters\n\njson_data (str | bytes | bytearray) – The JSON data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\nRaises\n\nValidationError – If json_data is not a JSON string or the object could not be validated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.dict.html#dict","title":"dict","text":"dict\n\n\n\nCsvExcelOutlineFile.dict(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False)\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.BoardBounds.html#ansyssherlockcoretypesproject_typesboardbounds","title":"ansys.sherlock.core.types.project_types.BoardBounds","text":"ansys.sherlock.core.types.project_types.BoardBounds\n\n\n\nclass ansys.sherlock.core.types.project_types.BoardBounds(bounds)\n\nContains the properties of the board bounds.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/99-teardown/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 1 file from examplesgallery_examples99-teardown:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_gallery_examples_99-teardown_teardown.py (teardown.py)\n\n00:00.000\n\n0.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.model_fields_set.html#model_fields_set","title":"model_fields_set","text":"model_fields_set\n\n\n\nproperty UpdateTestPointsRequest.model_fields_set: set[str]\n\nReturns the set of fields that have been explicitly set on this model instance.\n\nReturns\n\nA set of strings representing the fields that have been set,\n\ni.e. that were not filled from defaults.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.model_fields.html#model_fields","title":"model_fields","text":"model_fields\n\n\n\nPottingRegionDeleteData.model_fields = {'cca_name': FieldInfo(annotation=str, required=True), 'potting_id': FieldInfo(annotation=str, required=True)}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.model_json_schema.html#model_json_schema","title":"model_json_schema","text":"model_json_schema\n\n\n\nclassmethod CopperFile.model_json_schema(by_alias=True, ref_template='#/$defs/{model}', schema_generator=<class 'pydantic.json_schema.GenerateJsonSchema'>, mode='validation')\n\nGenerates a JSON schema for a model class.\n\nParameters\n\nby_alias (bool) – Whether to use attribute aliases or not.\n\nref_template (str) – The reference template.\n\nschema_generator (type[GenerateJsonSchema]) – To override the logic used to generate the JSON schema, as a subclass of\nGenerateJsonSchema with your desired modifications\n\nmode (Literal['validation', 'serialization']) – The mode in which to generate the schema.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nThe JSON schema for the given model class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.model_copy.html#model_copy","title":"model_copy","text":"model_copy\n\n\n\nGerberOutlineFile.model_copy(*, update=None, deep=False)\n\n!!! abstract “Usage Documentation”\n\n[model_copy](../concepts/serialization.md#model_copy)\n\nReturns a copy of the model.\n\n!!! note\n\nThe underlying instance’s [__dict__][object.__dict__] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property]).\n\nParameters\n\nupdate (Mapping[str, Any] | None) – Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\n\ndeep (bool) – Set to True to make a deep copy of the model.\n\nReturn type\n\nSelf\n\nReturns\n\nNew model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.model_parametrized_name.html#model_parametrized_name","title":"model_parametrized_name","text":"model_parametrized_name\n\n\n\nclassmethod PCBShape.model_parametrized_name(params)\n\nCompute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nParameters\n\nparams (tuple[type[Any], ...]) – Tuple of types of the class. Given a generic class\nModel with 2 type variables and a concrete model Model[str, int],\nthe value (str, int) would be passed to params.\n\nReturn type\n\nstr\n\nReturns\n\nString representing the new class where params are passed to cls as type variables.\n\nRaises\n\nTypeError – Raised when trying to generate concrete names for non-generic models.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.model_config.html#model_config","title":"model_config","text":"model_config\n\n\n\nUpdatePottingRegionRequest.model_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.model_construct.html#model_construct","title":"model_construct","text":"model_construct\n\n\n\nclassmethod CopperImageFile.model_construct(_fields_set=None, **values)\n\nCreates a new instance of the Model class with validated data.\n\nCreates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n\nmodel_construct() generally respects the model_config.extra setting on the provided model.\nThat is, if model_config.extra == ‘allow’, then all extra passed values are added to the model instance’s __dict__\nand __pydantic_extra__ fields. If model_config.extra == ‘ignore’ (the default), then all extra passed values are ignored.\nBecause no validation is performed with a call to model_construct(), having model_config.extra == ‘forbid’ does not result in\nan error if extra values are passed, but they will be ignored.\n\nParameters\n\n_fields_set (set[str] | None) – A set of field names that were originally explicitly set during instantiation. If provided,\nthis is directly used for the [model_fields_set][pydantic.BaseModel.model_fields_set] attribute.\nOtherwise, the field names from the values argument will be used.\n\nvalues (Any) – Trusted or pre-validated data dictionary.\n\nReturn type\n\nSelf\n\nReturns\n\nA new instance of the Model class with validated data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.stackup.Stackup.update_conductor_layer.html#update_conductor_layer","title":"update_conductor_layer","text":"update_conductor_layer\n\n\n\nStackup.update_conductor_layer(project, cca_name, layer, layer_type='', material='', thickness=0, thickness_unit='', conductor_percent='', resin_material='')\n\nUpdate a conductor layer with given properties.\n\nAvailable Since: 2021R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nlayer: str\n\nLayer ID associated with the conductor layer.\n\nlayer_type: str, optional\n\nLayer type. The default is \"\". For example,\n\"SIGNAL\", \"POWER\", or \"SUBSTRATE\".\n\nmaterial: str, optional\n\nConductor material. The default is \"\".\n\nthickness: float, optional\n\nConductor layer thickness. The default is 0.\n\nthickness_unit: str, optional\n\nUnits for the conductor layer thickness. The\ndefault is \"\".\n\nconductor_percent: str, optional\n\nConductor percentage. The default is \"\".\n\nresin_material: str, optional\n\nResin material. The default is \"\".\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.stackup.update_conductor_layer(\n    \"Test\",\n    \"Card\",\n    \"3\",\n    \"POWER\",\n    \"COPPER\",\n    1.0,\n    \"oz\",\n    \"94.2\",\n    \"Generic FR-4 Generic FR-4\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.schema_json.html#schema_json","title":"schema_json","text":"schema_json\n\n\n\nclassmethod CsvExcelOutlineFile.schema_json(*, by_alias=True, ref_template='#/$defs/{model}', **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.model_extra.html#model_extra","title":"model_extra","text":"model_extra\n\n\n\nproperty ICTFixtureProperties.model_extra: dict[str, Any] | None\n\nGet extra fields set during validation.\n\nReturns\n\nA dictionary of extra fields, or None if config.extra is not set to “allow”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.schema_json.html#schema_json","title":"schema_json","text":"schema_json\n\n\n\nclassmethod GetTestPointPropertiesRequest.schema_json(*, by_alias=True, ref_template='#/$defs/{model}', **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.parse_obj.html#parse_obj","title":"parse_obj","text":"parse_obj\n\n\n\nclassmethod CopperGerberFile.parse_obj(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.validate.html#validate","title":"validate","text":"validate\n\n\n\nclassmethod OutlineFile.validate(value)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.str_validation.html#str_validation","title":"str_validation","text":"str_validation\n\n\n\nclassmethod GetICTFixturesPropertiesRequest.str_validation(value, info)\n\nValidate string fields listed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.schema.html#schema","title":"schema","text":"schema\n\n\n\nclassmethod OutlineFile.schema(by_alias=True, ref_template='#/$defs/{model}')\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.model_validate_strings.html#model_validate_strings","title":"model_validate_strings","text":"model_validate_strings\n\n\n\nclassmethod UpdatePottingRegionRequest.model_validate_strings(obj, *, strict=None, context=None, by_alias=None, by_name=None)\n\nValidate the given object with string data against the Pydantic model.\n\nParameters\n\nobj (Any) – The object containing string data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/model.html#model","title":"Model","text":"Model\n\n\n\nModule containing all model generation capabilities.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.parts.Parts.import_parts_to_avl.html#import_parts_to_avl","title":"import_parts_to_avl","text":"import_parts_to_avl\n\n\n\nParts.import_parts_to_avl(request)\n\nImport a parts list into the Approved Vendor List (AVL).\n\nAvailable Since: 2026R1\n\nParameters\n\nrequest\n\nImportPartsToAVLRequest\n\nContains the file path and import mode to use for the AVL parts import.\n\nReturns\n\n:\n\n\n\nSherlockCommonService_pb2.ReturnCode\n\nReturn code indicating the result of the AVL parts import.\n\nReturn type\n\nReturnCode\n\nExamples\n\n>>> from ansys.sherlock.core.types.part_types import ImportPartsToAVLRequest\n>>> from ansys.api.sherlock.v0 import SherlockPartsService_pb2\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>>\n>>> sherlock = launch_sherlock()\n>>> return_code = sherlock.project.import_parts_to_avl(\n>>>     ImportPartsToAVLRequest(\n>>>         import_file=\"C:/path/to/AVL_parts_file.xls\",\n>>>         import_type=SherlockPartsService_pb2.AVLImportType.Update\n>>>     )\n>>> )\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.construct.html#construct","title":"construct","text":"construct\n\n\n\nclassmethod PottingRegionUpdateData.construct(_fields_set=None, **values)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.validate.html#validate","title":"validate","text":"validate\n\n\n\nclassmethod UpdatePottingRegionRequest.validate(value)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.model.Model.export_FEA_model.html#export_fea_model","title":"export_FEA_model","text":"export_FEA_model\n\n\n\nModel.export_FEA_model(project, cca_name, export_file, analysis, drill_hole_parameters, detect_lead_modeling, lead_model_parameters, display_model, clear_FEA_database, use_FEA_model_id, coordinate_units)\n\nExport a FEA model.\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nexport_file: str\n\nFull path for saving exported files to. The file extension must be .wbjn.\n\nanalysis: str\n\nThe type of analysis that is being exported. Valid values are NaturalFreq,\nHarmonicVibe, ICTAnalysis, MechanicalShock or RandomVibe.\n\ndrill_hole_parameters: list[dict[str, str | Measurement]]\n\nList of the drill hole parameters consisting of these properties:\n\ndrill_hole_modeling: str\n\nThe status of the drill hole modeling feature. If enabled, automatically enable\ndrill hole modeling. Valid values are ENABLED/enabled or\nDISABLED/disabled.\n\nmin_hole_diameter: MinHoleDiameter\n\nThe properties of the minimum hole diameter.\n\nmax_edge_length: MaxEdgeLength\n\nThe properties of the maximum edge length.\n\ndetect_lead_modeling: str\n\nThe status of the detect lead modeling feature. If enabled, automatically enable lead\nmodeling if any part has lead geometry defined. Valid values are ENABLED or\nDISABLED.\n\nlead_model_parameters: list[dict[str, int | str | Measurement]]\n\nList of the lead model parameters consisting of these properties:\n\nlead_modeling: str\n\nThe status of the lead modeling feature. If enabled, automatically enable lead\nmodeling. Valid values are ENABLED or DISABLED.\n\nlead_element_order: str\n\nThe type of the element order. Valid values are First Order (Linear),\nSecond Order (Quadratic), or Solid Shell.\n\nmax_mesh_size: MaxMeshSize\n\nThe properties of the maximum mesh size.\n\nvertical_mesh_size: VerticalMeshSize\n\nThe properties of the vertical mesh size.\n\nthicknessCount: int, optional\n\nThe number of elements through the lead thickness that will be created per lead.\n\nThe default value is 3 and the maximum is 5. Only used when the advanced lead\nmesh setting is enabled.\n\naspectRatio: int, optional\n\nThe aspect ratio is multiplied by the lead thickness divided by the through\nthickness count to give the lead element height. The default value is 2 and the\nmaximum is 10. Only used when the advanced lead mesh setting is enabled.\n\ndisplay_model: bool\n\nWhether to display the model after export.\n\nclear_FEA_database: bool\n\nWhether to clear FEA database before defining model.\n\nuse_FEA_model_id: bool\n\nWhether to use FEA model ID.\n\ncoordinate_units: str\n\nUnits of the model coordinates to use when exporting a model.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> from ansys.sherlock.core.types.common_types import (\n    Measurement,\n)\n>>> sherlock = launch_sherlock()\n>>> sherlock.model.export_FEA_model(\n        project=\"Test Project\",\n        cca_name=\"Main Board\",\n        export_file=\"C:/Temp/export.wbjn\",\n        analysis=\"NaturalFreq\",\n        drill_hole_parameters=[\n            {\n                \"drill_hole_modeling\": \"ENABLED\",\n                \"min_hole_diameter\": Measurement(value=0.5, unit=\"mm\"),\n                \"max_edge_length\": Measurement(value=1.0, unit=\"mm\")\n            }\n        ],\n        detect_lead_modeling=\"ENABLED\",\n        lead_model_parameters=[\n            {\n                \"lead_modeling\": \"ENABLED\",\n                \"lead_element_order\": \"First Order (Linear)\",\n                \"max_mesh_size\": Measurement(value=0.5, unit=\"mm\"),\n                \"vertical_mesh_size\": Measurement(value=0.1, unit=\"mm\"),\n                \"thicknessCount\": 3,\n                \"aspectRatio\": 2\n            }\n        ],\n        display_model=True,\n        clear_FEA_database=True,\n        use_FEA_model_id=True,\n        coordinate_units=\"mm\"\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/02-importing/index.html#importing-projects-and-files","title":"Importing Projects and Files","text":"Importing Projects and Files\n\nExamples on how to import projects and files using PySherlock.\n\nsphx_glr_examples_gallery_examples_02-importing_import_ipc_2581_archive.py\n\nsphx_glr_examples_gallery_examples_02-importing_import_odb_archive.py\n\nsphx_glr_examples_gallery_examples_02-importing_import_parts_list.py\n\nsphx_glr_examples_gallery_examples_02-importing_import_project_zip_archive_single_mode.py\n\nsphx_glr_examples_gallery_examples_02-importing_import_project_zip_file.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.model_computed_fields.html#model_computed_fields","title":"model_computed_fields","text":"model_computed_fields\n\n\n\nCopperGerberFile.model_computed_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.model_extra.html#model_extra","title":"model_extra","text":"model_extra\n\n\n\nproperty PottingRegionUpdateData.model_extra: dict[str, Any] | None\n\nGet extra fields set during validation.\n\nReturns\n\nA dictionary of extra fields, or None if config.extra is not set to “allow”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.construct.html#construct","title":"construct","text":"construct\n\n\n\nclassmethod TestPointProperties.construct(_fields_set=None, **values)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.model_computed_fields.html#model_computed_fields","title":"model_computed_fields","text":"model_computed_fields\n\n\n\nPottingRegionCopyData.model_computed_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.model_json_schema.html#model_json_schema","title":"model_json_schema","text":"model_json_schema\n\n\n\nclassmethod UpdateICTFixturesRequest.model_json_schema(by_alias=True, ref_template='#/$defs/{model}', schema_generator=<class 'pydantic.json_schema.GenerateJsonSchema'>, mode='validation')\n\nGenerates a JSON schema for a model class.\n\nParameters\n\nby_alias (bool) – Whether to use attribute aliases or not.\n\nref_template (str) – The reference template.\n\nschema_generator (type[GenerateJsonSchema]) – To override the logic used to generate the JSON schema, as a subclass of\nGenerateJsonSchema with your desired modifications\n\nmode (Literal['validation', 'serialization']) – The mode in which to generate the schema.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nThe JSON schema for the given model class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.model_validate_json.html#model_validate_json","title":"model_validate_json","text":"model_validate_json\n\n\n\nclassmethod CopperFile.model_validate_json(json_data, *, strict=None, context=None, by_alias=None, by_name=None)\n\n!!! abstract “Usage Documentation”\n\n[JSON Parsing](../concepts/json.md#json-parsing)\n\nValidate the given JSON data against the Pydantic model.\n\nParameters\n\njson_data (str | bytes | bytearray) – The JSON data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\nRaises\n\nValidationError – If json_data is not a JSON string or the object could not be validated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.model_config.html#model_config","title":"model_config","text":"model_config\n\n\n\nCopperGerberFile.model_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.schema.html#schema","title":"schema","text":"schema\n\n\n\nclassmethod PolygonalShape.schema(by_alias=True, ref_template='#/$defs/{model}')\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.file_comment.html#file_comment","title":"file_comment","text":"file_comment\n\n\n\nCopperFile.file_comment: Optional[str]\n\nOptional comment or description for the copper file.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.center_x.html#center_x","title":"center_x","text":"center_x\n\n\n\nTestPointProperties.center_x: float\n\nCenter x-value\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.lifecycle.Lifecycle.load_shock_profile_pulses.html#load_shock_profile_pulses","title":"load_shock_profile_pulses","text":"load_shock_profile_pulses\n\n\n\nLifecycle.load_shock_profile_pulses(project, phase_name, event_name, file_path)\n\nLoad shock profile pulses from a .csv .dat file.\n\nAvailable Since: 2021R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project\n\nphase_name: str\n\nName of the lifecycle phase to add this event to.\n\nevent_name: str\n\nName of the random vibe event.\n\nfile_path: str\n\nPath for thermal profile .dat or .csv file\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.lifecycle.load_shock_profile_pulses(\n        project=\"Tutorial\",\n        phase_name=\"Phase 1\",\n        event_name=\"Shock Event\",\n        file_path=\"Test_Profile.dat\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.dict.html#dict","title":"dict","text":"dict\n\n\n\nPolygonalShape.dict(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False)\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.model_computed_fields.html#model_computed_fields","title":"model_computed_fields","text":"model_computed_fields\n\n\n\nRectangularShape.model_computed_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_pcb_modeling_properties.html#update-pcb-modeling-properties","title":"Update PCB Modeling Properties","text":"Update PCB Modeling Properties\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nand configure PCB modeling properties for various analysis types."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_pcb_modeling_properties.html#description","title":"Update PCB Modeling Properties > Description","text":"Description\n\nSherlock allows you to configure PCB modeling properties for multiple analysis types.\nThis script performs the following steps:\n- Connect to the Sherlock service.\n- Import a project.\n- Configure PCB modeling properties for several analysis types."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_pcb_modeling_properties.html#connect-to-sherlock","title":"Update PCB Modeling Properties > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_pcb_modeling_properties.html#delete-project","title":"Update PCB Modeling Properties > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_pcb_modeling_properties.html#import-tutorial-project","title":"Update PCB Modeling Properties > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_pcb_modeling_properties.html#update-pcb-modeling-properties","title":"Update PCB Modeling Properties","text":"Update PCB Modeling Properties\n\nConfigure PCB modeling properties for various analysis types.\n\n\n\nDownload Jupyter notebook: update_pcb_modeling_properties.ipynb\n\nDownload Python source code: update_pcb_modeling_properties.py\n\nDownload zipped: update_pcb_modeling_properties.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.copy.html#copy","title":"copy","text":"copy\n\n\n\nUpdateTestPointsRequest.copy(*, include=None, exclude=None, update=None, deep=False)\n\nReturns a copy of the model.\n\n!!! warning “Deprecated”\n\nThis method is now deprecated; use model_copy instead.\n\nIf you need include or exclude, use:\n\n`python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n`\n\nParameters\n\ninclude – Optional set or mapping specifying which fields to include in the copied model.\n\nexclude – Optional set or mapping specifying which fields to exclude in the copied model.\n\nupdate – Optional dictionary of field-value pairs to override field values in the copied model.\n\ndeep – If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns\n\nA copy of the model with included, excluded and updated fields as specified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.test_point_ids.html#test_point_ids","title":"test_point_ids","text":"test_point_ids\n\n\n\nGetTestPointPropertiesRequest.test_point_ids: Optional[str]\n\nComma-separated list of test point ids representing one or more test points.\nIf this parameter is not included, then the entire list of test points for a given CCA will\nhave their properties returned.\n\nType\n\nOptional Param\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.model_extra.html#model_extra","title":"model_extra","text":"model_extra\n\n\n\nproperty PottingRegionCopyData.model_extra: dict[str, Any] | None\n\nGet extra fields set during validation.\n\nReturns\n\nA dictionary of extra fields, or None if config.extra is not set to “allow”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.layer.Layer.update_test_fixtures_by_file.html#update_test_fixtures_by_file","title":"update_test_fixtures_by_file","text":"update_test_fixtures_by_file\n\n\n\nLayer.update_test_fixtures_by_file(project, cca_name, file_path)\n\nUpdate test fixture properties of a CCA from a CSV file.\n\nAvailable Since: 2023R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nfile_path: str\n\nPath for the CSV file with the test fixture properties.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n>>>     \"ODB++ Tutorial.tgz\",\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     project=\"Test\",\n>>>     cca_name=\"Card\",\n>>> )\n>>> sherlock.layer.update_test_fixtures_by_file(\n>>>     \"Test\",\n>>>     \"Card\",\n>>>     \"TestFixturesImport.csv\"\n>>> )\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.construct.html#construct","title":"construct","text":"construct\n\n\n\nclassmethod OutlineFile.construct(_fields_set=None, **values)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.update_forward_refs.html#update_forward_refs","title":"update_forward_refs","text":"update_forward_refs\n\n\n\nclassmethod GetTestPointPropertiesRequest.update_forward_refs(**localns)\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.rotation.html#rotation","title":"rotation","text":"rotation\n\n\n\nICTFixtureProperties.rotation: str\n\nDegrees of rotation\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.model_copy.html#model_copy","title":"model_copy","text":"model_copy\n\n\n\nGetTestPointPropertiesRequest.model_copy(*, update=None, deep=False)\n\n!!! abstract “Usage Documentation”\n\n[model_copy](../concepts/serialization.md#model_copy)\n\nReturns a copy of the model.\n\n!!! note\n\nThe underlying instance’s [__dict__][object.__dict__] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property]).\n\nParameters\n\nupdate (Mapping[str, Any] | None) – Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\n\ndeep (bool) – Set to True to make a deep copy of the model.\n\nReturn type\n\nSelf\n\nReturns\n\nNew model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.radius.html#radius","title":"radius","text":"radius\n\n\n\nTestPointProperties.radius: float\n\nRadius\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.analysis.Analysis.update_solder_fatigue_props.html#update_solder_fatigue_props","title":"update_solder_fatigue_props","text":"update_solder_fatigue_props\n\n\n\nAnalysis.update_solder_fatigue_props(project, solder_fatigue_properties)\n\nUpdate properties for a solder fatigue analysis.\n\nAvailable Since: 2024R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\nsolder_fatigue_properties: list[dict[str, bool | float | str]]\n\nMechanical shock properties for a CCA consisting of these properties:\n\ncca_name: str\n\nName of the CCA.\n\nsolder_material: str\n\nSolder material. The default is None.\n\npart_temp: float\n\nPart temperature. The default is None.\n\npart_temp_units: str\n\nPart temperature units. The default is None.\n\nuse_part_temp_rise_min: bool\n\nwhether to apply min temp rise. The default is None.\n\npart_validation_enabled: bool\n\nWhether to enable part validation. The default is None.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.analysis.update_solder_fatigue_props(\n    \"Test\",\n    [{\n        \"cca_name\": \"Card\",\n        \"solder_material\": \"TIN-LEAD (63SN37PB)\",\n        \"part_temp\": 70,\n        \"part_temp_units\": \"F\",\n        \"use_part_temp_rise_min\": True,\n        \"part_validation_enabled\": True\n    },\n    ]\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.lifecycle.Lifecycle.add_harmonic_vibe_profiles.html#add_harmonic_vibe_profiles","title":"add_harmonic_vibe_profiles","text":"add_harmonic_vibe_profiles\n\n\n\nLifecycle.add_harmonic_vibe_profiles(project, harmonic_vibe_profiles)\n\nAdd harmonic vibe profiles to a life cycle phase.\n\nAvailable Since: 2023R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\nharmonic_vibe_profiles: list\n\nHarmonic vibe profiles consisting of these properties:\n\nphase_name: str\n\nName of the life cycle phase to add this harmonic vibe profile to.\n\nevent_name: str\n\nName of the event.\n\nprofile_name: str\n\nName of the harmonic vibe profile.\n\nfreq_units: str\n\nFrequency units. Options are \"HZ\", \"KHZ\", \"MHZ\",\nand \"GHZ\".\n\nload_units: str\n\nLoad units. Options are \"G\", `\"m/s2\", \"mm/s2\",\n\"in/s2\", and \"ft/s2\".\n\nharmonic_profile_entries: list[tuple[float, float, str]]\n\nHarmonic profile entries consisting of these properties:\n\nfrequency: float\n\nFrequency of the harmonic profile expressed in frequency units.\n\nload: float\n\nLoad of the harmonic profile expressed in load units.\n\ntriaxial_axis: str\n\nAxis that this profile should be assigned to if the harmonic\nprofile type is \"Triaxial\". Options are: \"x\", \"y\",\nand \"z\".\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n)\n>>> sherlock.lifecycle.create_life_phase(\n    \"Test\",\n    \"Example\",\n    1.5,\n    \"sec\",\n    4.0,\n    \"COUNT\",\n)\n>>> sherlock.lifecycle.add_harmonic_event(\n    \"Test\",\n    \"Example\",\n    \"Event1\",\n    1.5,\n    \"sec\",\n    4.0,\n    \"PER MIN\",\n    5,\n    \"45,45\",\n    \"Uniaxial\",\n    \"2,4,5\",\n)\n>>> sherlock.lifecycle.add_harmonic_vibe_profiles(\n    \"Test\",\n    [(\n        \"Example\",\n        \"Event1\",\n        \"Profile1\",\n        \"HZ\",\n        \"G\",\n        [\n            (10, 1),\n            (1000, 1),\n        ],\n        \"\",\n    )]\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.lifecycle.Lifecycle.load_shock_profile_dataset.html#load_shock_profile_dataset","title":"load_shock_profile_dataset","text":"load_shock_profile_dataset\n\n\n\nLifecycle.load_shock_profile_dataset(project, phase_name, event_name, file_path)\n\nLoad shock profile dataset from a .csv or .dat file.\n\nAvailable Since: 2021R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project\n\nphase_name: str\n\nName of the lifecycle phase to add this event to.\n\nevent_name: str\n\nName of the random vibe event.\n\nfile_path: str\n\nFile path for thermal profile .dat or .csv file\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.ict_fixtures_ids.html#ict_fixtures_ids","title":"ict_fixtures_ids","text":"ict_fixtures_ids\n\n\n\nGetICTFixturesPropertiesRequest.ict_fixtures_ids: Optional[str]\n\nComma-separated list of ict fixture ids representing one or more ict\nfixtures.   If this parameter is not included, then the entire list of ict fixtures\nfor a given CCA will have their properties returned.\n\nType\n\nOptional Param\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.construct.html#construct","title":"construct","text":"construct\n\n\n\nclassmethod UpdatePottingRegionRequest.construct(_fields_set=None, **values)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.model_validate.html#model_validate","title":"model_validate","text":"model_validate\n\n\n\nclassmethod ICTFixtureProperties.model_validate(obj, *, strict=None, from_attributes=None, context=None, by_alias=None, by_name=None)\n\nValidate a pydantic model instance.\n\nParameters\n\nobj (Any) – The object to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\nfrom_attributes (bool | None) – Whether to extract data from object attributes.\n\ncontext (Any | None) – Additional context to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nRaises\n\nValidationError – If the object could not be validated.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.model_construct.html#model_construct","title":"model_construct","text":"model_construct\n\n\n\nclassmethod GerberOutlineFile.model_construct(_fields_set=None, **values)\n\nCreates a new instance of the Model class with validated data.\n\nCreates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n\nmodel_construct() generally respects the model_config.extra setting on the provided model.\nThat is, if model_config.extra == ‘allow’, then all extra passed values are added to the model instance’s __dict__\nand __pydantic_extra__ fields. If model_config.extra == ‘ignore’ (the default), then all extra passed values are ignored.\nBecause no validation is performed with a call to model_construct(), having model_config.extra == ‘forbid’ does not result in\nan error if extra values are passed, but they will be ignored.\n\nParameters\n\n_fields_set (set[str] | None) – A set of field names that were originally explicitly set during instantiation. If provided,\nthis is directly used for the [model_fields_set][pydantic.BaseModel.model_fields_set] attribute.\nOtherwise, the field names from the values argument will be used.\n\nvalues (Any) – Trusted or pre-validated data dictionary.\n\nReturn type\n\nSelf\n\nReturns\n\nA new instance of the Model class with validated data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.model_fields.html#model_fields","title":"model_fields","text":"model_fields\n\n\n\nPolygonalShape.model_fields = {'points': FieldInfo(annotation=list[tuple[float, float]], required=True), 'rotation': FieldInfo(annotation=float, required=True)}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.potting_region_delete_data.html#potting_region_delete_data","title":"potting_region_delete_data","text":"potting_region_delete_data\n\n\n\nDeletePottingRegionRequest.potting_region_delete_data: list[PottingRegionDeleteData]\n\nData identifying which potting regions should be deleted.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.model_computed_fields.html#model_computed_fields","title":"model_computed_fields","text":"model_computed_fields\n\n\n\nUpdatePottingRegionRequest.model_computed_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.analysis.Analysis.html#ansyssherlockcoreanalysisanalysis","title":"ansys.sherlock.core.analysis.Analysis","text":"ansys.sherlock.core.analysis.Analysis\n\n\n\nclass ansys.sherlock.core.analysis.Analysis(channel, server_version)\n\nContains all analysis capabilities.\n\nMethods\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.analysis.Analysis.get_random_vibe_input_fields.html#get_random_vibe_input_fields","title":"get_random_vibe_input_fields","text":"get_random_vibe_input_fields\n\n\n\nAnalysis.get_random_vibe_input_fields(model_source=None)\n\nGet random vibe property fields based on the user configuration.\n\nAvailable Since: 2023R2\n\nParameters\n\nmodel_source: ModelSource, optional\n\nModel source to get the random vibe property fields from.\nThe default is None.\n\nReturns\n\n:\n\n\n\npython:list[python:str]\n\nRandom vibe input field property names based on the user configuration.\n\nReturn type\n\nlist[str]\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.analysis.get_random_vibe_input_fields(ModelSource.STRAIN_MAP)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.model_rebuild.html#model_rebuild","title":"model_rebuild","text":"model_rebuild\n\n\n\nclassmethod SlotShape.model_rebuild(*, force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace=None)\n\nTry to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nParameters\n\nforce (bool) – Whether to force the rebuilding of the model schema, defaults to False.\n\nraise_errors (bool) – Whether to raise errors, defaults to True.\n\n_parent_namespace_depth (int) – The depth level of the parent namespace, defaults to 2.\n\n_types_namespace (Mapping[str, Any] | None) – The types namespace, defaults to None.\n\nReturn type\n\nbool | None\n\nReturns\n\nReturns None if the schema is already “complete” and rebuilding was not required.\nIf rebuilding _was_ required, returns True if rebuilding was successful, otherwise False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.IcepakFile.temperature_offset.html#temperature_offset","title":"temperature_offset","text":"temperature_offset\n\n\n\nIcepakFile.temperature_offset\n\ntemperature_offset\n\nType\n\nfloat\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.from_orm.html#from_orm","title":"from_orm","text":"from_orm\n\n\n\nclassmethod PCBShape.from_orm(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.model_computed_fields.html#model_computed_fields","title":"model_computed_fields","text":"model_computed_fields\n\n\n\nCopyPottingRegionRequest.model_computed_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.update_forward_refs.html#update_forward_refs","title":"update_forward_refs","text":"update_forward_refs\n\n\n\nclassmethod GerberOutlineFile.update_forward_refs(**localns)\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.state.html#state","title":"state","text":"state\n\n\n\nICTFixtureProperties.state: str\n\nState\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.model_dump_json.html#model_dump_json","title":"model_dump_json","text":"model_dump_json\n\n\n\nDeletePottingRegionRequest.model_dump_json(*, indent=None, include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump_json](../concepts/serialization.md#modelmodel_dump_json)\n\nGenerates a JSON representation of the model using Pydantic’s to_json method.\n\nParameters\n\nindent (int | None) – Indentation to use in the JSON output. If None is passed, the output will be compact.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to include in the JSON output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to exclude from the JSON output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to serialize using field aliases.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\nstr\n\nReturns\n\nA JSON string representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.construct.html#construct","title":"construct","text":"construct\n\n\n\nclassmethod PCBShape.construct(_fields_set=None, **values)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.model_validate.html#model_validate","title":"model_validate","text":"model_validate\n\n\n\nclassmethod OutlineFile.model_validate(obj, *, strict=None, from_attributes=None, context=None, by_alias=None, by_name=None)\n\nValidate a pydantic model instance.\n\nParameters\n\nobj (Any) – The object to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\nfrom_attributes (bool | None) – Whether to extract data from object attributes.\n\ncontext (Any | None) – Additional context to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nRaises\n\nValidationError – If the object could not be validated.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.copy.html#copy","title":"copy","text":"copy\n\n\n\nCircularShape.copy(*, include=None, exclude=None, update=None, deep=False)\n\nReturns a copy of the model.\n\n!!! warning “Deprecated”\n\nThis method is now deprecated; use model_copy instead.\n\nIf you need include or exclude, use:\n\n`python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n`\n\nParameters\n\ninclude – Optional set or mapping specifying which fields to include in the copied model.\n\nexclude – Optional set or mapping specifying which fields to exclude in the copied model.\n\nupdate – Optional dictionary of field-value pairs to override field values in the copied model.\n\ndeep – If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns\n\nA copy of the model with included, excluded and updated fields as specified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.model_validate_strings.html#model_validate_strings","title":"model_validate_strings","text":"model_validate_strings\n\n\n\nclassmethod CsvExcelOutlineFile.model_validate_strings(obj, *, strict=None, context=None, by_alias=None, by_name=None)\n\nValidate the given object with string data against the Pydantic model.\n\nParameters\n\nobj (Any) – The object containing string data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.model_json_schema.html#model_json_schema","title":"model_json_schema","text":"model_json_schema\n\n\n\nclassmethod CopyPottingRegionRequest.model_json_schema(by_alias=True, ref_template='#/$defs/{model}', schema_generator=<class 'pydantic.json_schema.GenerateJsonSchema'>, mode='validation')\n\nGenerates a JSON schema for a model class.\n\nParameters\n\nby_alias (bool) – Whether to use attribute aliases or not.\n\nref_template (str) – The reference template.\n\nschema_generator (type[GenerateJsonSchema]) – To override the logic used to generate the JSON schema, as a subclass of\nGenerateJsonSchema with your desired modifications\n\nmode (Literal['validation', 'serialization']) – The mode in which to generate the schema.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nThe JSON schema for the given model class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.update_forward_refs.html#update_forward_refs","title":"update_forward_refs","text":"update_forward_refs\n\n\n\nclassmethod UpdateICTFixturesRequest.update_forward_refs(**localns)\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.outline_file_data.html#outline_file_data","title":"outline_file_data","text":"outline_file_data\n\n\n\nOutlineFile.outline_file_data: Union[CsvExcelOutlineFile, GerberOutlineFile, None]\n\nSpecific outline file type properties\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.layer.Layer.copy_modeling_region.html#copy_modeling_region","title":"copy_modeling_region","text":"copy_modeling_region\n\n\n\nLayer.copy_modeling_region(project, copy_regions)\n\nCopy one or more modeling regions in a specific project.\n\nParameters\n\nproject\n\npython:str\n\nName of the Sherlock project.\n\ncopy_regions\n\npython:list[python:dict[python:str, python:float | python:str]]\n\nModeling regions to copy along with their corresponding “copy to” parameters.\nEach dictionary should contain:\n\ncca_name\n\nstr\n\nName of the CCA.\n\nregion_id\n\nstr\n\nRegion ID of the existing modeling region to copy.\n\nregion_id_copy\n\nstr\n\nRegion ID of the modeling region copy. Must be unique.\n\ncenter_x\n\nfloat\n\nThe center x coordinate of the modeling region copy. Used for location placement in\nthe Layer Viewer.\n\ncenter_y\n\nfloat\n\nThe center y coordinate of the modeling region copy. Used for location placement in\nthe Layer Viewer.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n>>>     \"ODB++ Tutorial.tgz\",\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     project=\"Tutorial Project\",\n>>>     cca_name=\"Card\",\n>>> )\n>>> modeling_regions = [\n>>>     {\n>>>         \"cca_name\": \"Card\",\n>>>         \"region_id\": \"Region001\",\n>>>         \"region_id_copy\": \"RegionCopy001\",\n>>>         \"center_x\": 10.0,\n>>>         \"center_y\": 20.0,\n>>>     }\n>>> ]\n>>> result = sherlock.layer.copy_modeling_region(\"Tutorial Project\", modeling_regions)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.schema_json.html#schema_json","title":"schema_json","text":"schema_json\n\n\n\nclassmethod SlotShape.schema_json(*, by_alias=True, ref_template='#/$defs/{model}', **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.html#ansyssherlockcoretypeslayer_typespottingregiondeletedata","title":"ansys.sherlock.core.types.layer_types.PottingRegionDeleteData","text":"ansys.sherlock.core.types.layer_types.PottingRegionDeleteData\n\n\n\nclass ansys.sherlock.core.types.layer_types.PottingRegionDeleteData(**data)\n\nData specifying potting regions to delete.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_part_modeling_properties.html#update-part-modeling-properties","title":"Update Part Modeling Properties","text":"Update Part Modeling Properties\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nand update part modeling properties."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_part_modeling_properties.html#description","title":"Update Part Modeling Properties > Description","text":"Description\n\nSherlock’s gRPC API allows users to automate workflows such as updating part\nmodeling properties for printed circuit boards (PCBs).\nThis script demonstrates how to:\n- Connect to the Sherlock service.\n- Import a project.\n- Update part modeling properties.\n\nThe updated properties ensure accurate simulation results for mechanical and thermal analyses."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_part_modeling_properties.html#connect-to-sherlock","title":"Update Part Modeling Properties > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_part_modeling_properties.html#delete-project","title":"Update Part Modeling Properties > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_part_modeling_properties.html#import-tutorial-project","title":"Update Part Modeling Properties > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_part_modeling_properties.html#update-part-modeling-properties","title":"Update Part Modeling Properties","text":"Update Part Modeling Properties\n\nUpdate the part modeling properties for the “Card” of the “Test” project.\n\n\n\nDownload Jupyter notebook: update_part_modeling_properties.ipynb\n\nDownload Python source code: update_part_modeling_properties.py\n\nDownload zipped: update_part_modeling_properties.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.parse_raw.html#parse_raw","title":"parse_raw","text":"parse_raw\n\n\n\nclassmethod OutlineFile.parse_raw(b, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.str_validation.html#str_validation","title":"str_validation","text":"str_validation\n\n\n\nclassmethod PottingRegionDeleteData.str_validation(value, info)\n\nValidate string fields listed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.parse_raw.html#parse_raw","title":"parse_raw","text":"parse_raw\n\n\n\nclassmethod ICTFixtureProperties.parse_raw(b, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.parse_raw.html#parse_raw","title":"parse_raw","text":"parse_raw\n\n\n\nclassmethod GerberOutlineFile.parse_raw(b, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.model_parametrized_name.html#model_parametrized_name","title":"model_parametrized_name","text":"model_parametrized_name\n\n\n\nclassmethod DeletePottingRegionRequest.model_parametrized_name(params)\n\nCompute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nParameters\n\nparams (tuple[type[Any], ...]) – Tuple of types of the class. Given a generic class\nModel with 2 type variables and a concrete model Model[str, int],\nthe value (str, int) would be passed to params.\n\nReturn type\n\nstr\n\nReturns\n\nString representing the new class where params are passed to cls as type variables.\n\nRaises\n\nTypeError – Raised when trying to generate concrete names for non-generic models.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.model_config.html#model_config","title":"model_config","text":"model_config\n\n\n\nGetICTFixturesPropertiesRequest.model_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.model_computed_fields.html#model_computed_fields","title":"model_computed_fields","text":"model_computed_fields\n\n\n\nCopperFile.model_computed_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.model_dump_json.html#model_dump_json","title":"model_dump_json","text":"model_dump_json\n\n\n\nRectangularShape.model_dump_json(*, indent=None, include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump_json](../concepts/serialization.md#modelmodel_dump_json)\n\nGenerates a JSON representation of the model using Pydantic’s to_json method.\n\nParameters\n\nindent (int | None) – Indentation to use in the JSON output. If None is passed, the output will be compact.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to include in the JSON output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to exclude from the JSON output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to serialize using field aliases.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\nstr\n\nReturns\n\nA JSON string representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.project.Project.import_project_zip_archive.html#import_project_zip_archive","title":"import_project_zip_archive","text":"import_project_zip_archive\n\n\n\nProject.import_project_zip_archive(project, category, archive_file)\n\nImport a zipped project archive – multiple project mode.\n\nAvailable Since: 2024R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncategory: str\n\nSherlock project category.\n\narchive_file: str\n\nFull path to the .zip archive file containing the project data.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_project_zip_archive(\"Tutorial Project\", \"Demos\",\n\"Tutorial Project.zip\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.construct.html#construct","title":"construct","text":"construct\n\n\n\nclassmethod PottingRegionCopyData.construct(_fields_set=None, **values)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.schema_json.html#schema_json","title":"schema_json","text":"schema_json\n\n\n\nclassmethod CircularShape.schema_json(*, by_alias=True, ref_template='#/$defs/{model}', **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.model_parametrized_name.html#model_parametrized_name","title":"model_parametrized_name","text":"model_parametrized_name\n\n\n\nclassmethod CopyPottingRegionRequest.model_parametrized_name(params)\n\nCompute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nParameters\n\nparams (tuple[type[Any], ...]) – Tuple of types of the class. Given a generic class\nModel with 2 type variables and a concrete model Model[str, int],\nthe value (str, int) would be passed to params.\n\nReturn type\n\nstr\n\nReturns\n\nString representing the new class where params are passed to cls as type variables.\n\nRaises\n\nTypeError – Raised when trying to generate concrete names for non-generic models.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.stackup.Stackup.get_total_conductor_thickness.html#get_total_conductor_thickness","title":"get_total_conductor_thickness","text":"get_total_conductor_thickness\n\n\n\nStackup.get_total_conductor_thickness(project, cca_name, thickness_unit)\n\nReturn the total conductor thickness.\n\nAvailable Since: 2021R2\n\nParameters\n\nproject: str\n\nSherlock project name.\n\ncca_name: str\n\nThe CCA name.\n\nthickness_unit: str, optional\n\nUnits for laminate thickness.\n\nReturns\n\n:\n\n\n\npython:float\n\nThe conductor thickness of the CCA in the specified units.\n\nReturn type\n\nfloat\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> total_thickness = sherlock.stackup.get_total_conductor_thickness(project=\"Tutorial\",\n                                                         cca_name=\"Main Board\",\n                                                         thickness_unit=\"oz\")\n>>>print(f\"{total_thickness}\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.from_orm.html#from_orm","title":"from_orm","text":"from_orm\n\n\n\nclassmethod PolygonalShape.from_orm(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.schema.html#schema","title":"schema","text":"schema\n\n\n\nclassmethod PottingRegion.schema(by_alias=True, ref_template='#/$defs/{model}')\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.model_validate_strings.html#model_validate_strings","title":"model_validate_strings","text":"model_validate_strings\n\n\n\nclassmethod DeletePottingRegionRequest.model_validate_strings(obj, *, strict=None, context=None, by_alias=None, by_name=None)\n\nValidate the given object with string data against the Pydantic model.\n\nParameters\n\nobj (Any) – The object containing string data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.schema_json.html#schema_json","title":"schema_json","text":"schema_json\n\n\n\nclassmethod TestPointProperties.schema_json(*, by_alias=True, ref_template='#/$defs/{model}', **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.model_rebuild.html#model_rebuild","title":"model_rebuild","text":"model_rebuild\n\n\n\nclassmethod CopperFile.model_rebuild(*, force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace=None)\n\nTry to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nParameters\n\nforce (bool) – Whether to force the rebuilding of the model schema, defaults to False.\n\nraise_errors (bool) – Whether to raise errors, defaults to True.\n\n_parent_namespace_depth (int) – The depth level of the parent namespace, defaults to 2.\n\n_types_namespace (Mapping[str, Any] | None) – The types namespace, defaults to None.\n\nReturn type\n\nbool | None\n\nReturns\n\nReturns None if the schema is already “complete” and rebuilding was not required.\nIf rebuilding _was_ required, returns True if rebuilding was successful, otherwise False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.model_dump.html#model_dump","title":"model_dump","text":"model_dump\n\n\n\nGetICTFixturesPropertiesRequest.model_dump(*, mode='python', include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump](../concepts/serialization.md#modelmodel_dump)\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nParameters\n\nmode (Union[Literal['json', 'python'], str]) – The mode in which to_python should run.\nIf mode is ‘json’, the output will only contain JSON serializable types.\nIf mode is ‘python’, the output may contain non-JSON-serializable Python objects.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to include in the output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to exclude from the output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to use the field’s alias in the dictionary key if defined.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nA dictionary representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.model_dump_json.html#model_dump_json","title":"model_dump_json","text":"model_dump_json\n\n\n\nICTFixtureProperties.model_dump_json(*, indent=None, include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump_json](../concepts/serialization.md#modelmodel_dump_json)\n\nGenerates a JSON representation of the model using Pydantic’s to_json method.\n\nParameters\n\nindent (int | None) – Indentation to use in the JSON output. If None is passed, the output will be compact.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to include in the JSON output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to exclude from the JSON output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to serialize using field aliases.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\nstr\n\nReturns\n\nA JSON string representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.html#ansyssherlockcoretypesproject_typescoppergerberfile","title":"ansys.sherlock.core.types.project_types.CopperGerberFile","text":"ansys.sherlock.core.types.project_types.CopperGerberFile\n\n\n\nclass ansys.sherlock.core.types.project_types.CopperGerberFile(**data)\n\nProperties specific to a Gerber copper file.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.html#ansyssherlockcoretypesproject_typescopperfile","title":"ansys.sherlock.core.types.project_types.CopperFile","text":"ansys.sherlock.core.types.project_types.CopperFile\n\n\n\nclass ansys.sherlock.core.types.project_types.CopperFile(**data)\n\nMetadata and options for a copper file to be imported into a project.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.model_computed_fields.html#model_computed_fields","title":"model_computed_fields","text":"model_computed_fields\n\n\n\nSlotShape.model_computed_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.construct.html#construct","title":"construct","text":"construct\n\n\n\nclassmethod GetTestPointPropertiesRequest.construct(_fields_set=None, **values)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.model_construct.html#model_construct","title":"model_construct","text":"model_construct\n\n\n\nclassmethod CopyPottingRegionRequest.model_construct(_fields_set=None, **values)\n\nCreates a new instance of the Model class with validated data.\n\nCreates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n\nmodel_construct() generally respects the model_config.extra setting on the provided model.\nThat is, if model_config.extra == ‘allow’, then all extra passed values are added to the model instance’s __dict__\nand __pydantic_extra__ fields. If model_config.extra == ‘ignore’ (the default), then all extra passed values are ignored.\nBecause no validation is performed with a call to model_construct(), having model_config.extra == ‘forbid’ does not result in\nan error if extra values are passed, but they will be ignored.\n\nParameters\n\n_fields_set (set[str] | None) – A set of field names that were originally explicitly set during instantiation. If provided,\nthis is directly used for the [model_fields_set][pydantic.BaseModel.model_fields_set] attribute.\nOtherwise, the field names from the values argument will be used.\n\nvalues (Any) – Trusted or pre-validated data dictionary.\n\nReturn type\n\nSelf\n\nReturns\n\nA new instance of the Model class with validated data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.model_dump_json.html#model_dump_json","title":"model_dump_json","text":"model_dump_json\n\n\n\nPottingRegionDeleteData.model_dump_json(*, indent=None, include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump_json](../concepts/serialization.md#modelmodel_dump_json)\n\nGenerates a JSON representation of the model using Pydantic’s to_json method.\n\nParameters\n\nindent (int | None) – Indentation to use in the JSON output. If None is passed, the output will be compact.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to include in the JSON output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to exclude from the JSON output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to serialize using field aliases.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\nstr\n\nReturns\n\nA JSON string representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.model_copy.html#model_copy","title":"model_copy","text":"model_copy\n\n\n\nTestPointProperties.model_copy(*, update=None, deep=False)\n\n!!! abstract “Usage Documentation”\n\n[model_copy](../concepts/serialization.md#model_copy)\n\nReturns a copy of the model.\n\n!!! note\n\nThe underlying instance’s [__dict__][object.__dict__] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property]).\n\nParameters\n\nupdate (Mapping[str, Any] | None) – Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\n\ndeep (bool) – Set to True to make a deep copy of the model.\n\nReturn type\n\nSelf\n\nReturns\n\nNew model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.from_orm.html#from_orm","title":"from_orm","text":"from_orm\n\n\n\nclassmethod SlotShape.from_orm(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.construct.html#construct","title":"construct","text":"construct\n\n\n\nclassmethod GetICTFixturesPropertiesRequest.construct(_fields_set=None, **values)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.model_fields_set.html#model_fields_set","title":"model_fields_set","text":"model_fields_set\n\n\n\nproperty CopperGerberFile.model_fields_set: set[str]\n\nReturns the set of fields that have been explicitly set on this model instance.\n\nReturns\n\nA set of strings representing the fields that have been set,\n\ni.e. that were not filled from defaults.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.model_validate_strings.html#model_validate_strings","title":"model_validate_strings","text":"model_validate_strings\n\n\n\nclassmethod OutlineFile.model_validate_strings(obj, *, strict=None, context=None, by_alias=None, by_name=None)\n\nValidate the given object with string data against the Pydantic model.\n\nParameters\n\nobj (Any) – The object containing string data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.potting_standoff.html#potting_standoff","title":"potting_standoff","text":"potting_standoff\n\n\n\nPottingRegion.potting_standoff: float\n\nThe potting standoff.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.image_file.html#image_file","title":"image_file","text":"image_file\n\n\n\nCopperFile.image_file: Optional[CopperImageFile]\n\nOptional settings specific to image-based file import.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.parts.Parts.update_parts_list_properties.html#update_parts_list_properties","title":"update_parts_list_properties","text":"update_parts_list_properties\n\n\n\nParts.update_parts_list_properties(project, cca_name, part_properties)\n\nUpdate one or more properties of one or more parts in a parts list.\n\nAvailable Since: 2024R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\npart_properties: list[dict[str, list[str] | list[dict[str, str]]]]\n\nPart properties consisting of these properties:\n\nreference_designators: list[str], optional\n\nReference designator for each part to be updated. If not included,\nupdate properties for all parts in the CCA.\n\nproperties: list[dict[str, str]]\n\nPart properties consisting of these properties:\n\nname: str\n\nName of property to be updated.\n\nvalue: str\n\nValue to be applied to the chosen part property.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.parts.update_parts_list_properties(\n        \"Test\",\n        \"Card\",\n        [\n            {\n                \"reference_designators\": [\"C1\"],\n                \"properties\": [\n                    {\"name\": \"partType\", \"value\": \"RESISTOR\"}\n                ]\n            },\n            {\n                \"reference_designators\": [\"C2\"],\n                \"properties\": [\n                    {\"name\": \"locX\", \"value\": \"1\"}\n                ]\n            }\n        ]\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.layer.Layer.add_potting_region.html#add_potting_region","title":"add_potting_region","text":"add_potting_region\n\n\n\nLayer.add_potting_region(project, potting_regions)\n\nAdd one or more potting regions to a given project.\n\nAvailable Since: 2024R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\npotting_regions: list[dict[str, float | str | PolygonalShape | RectangularShape | SlotShape | CircularShape | PCBShape]]\n\nPotting region properties consisting of these properties:\n\ncca_name: str\n\nName of the CCA.\n\npotting_id: str\n\nPotting ID. The default is None.\n\nside: str\n\nThe side to add the potting region to. The default is None.\nOptions are \"TOP\", \"BOTTOM\", and \"BOT\".\n\nmaterial: str\n\nThe potting material. The default is None.\n\npotting_units: str\n\nThe potting region units. The default is None.\n\nthickness: float\n\nThe potting thickness. The default is None.\n\nstandoff: float\n\nThe potting standoff. The default is None.\n\nshape: PolygonalShape|RectangularShape|SlotShape|CircularShape|PCBShape\n\nThe shape of the potting region.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> from ansys.sherlock.core.types.layer_types import PolygonalShape\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n>>>     \"ODB++ Tutorial.tgz\",\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     project=\"Test\",\n>>>     cca_name=\"Card\",\n>>> )\n>>> polygonal_shape = PolygonalShape(points=[\n>>>     (0, 0),\n>>>     (0, 6.35),\n>>>     (9.77, 0)\n>>> ], rotation=87.8)\n>>> sherlock.layer.add_potting_region(\n>>> \"Test\",\n>>> [{\n>>>     'cca_name': 'Card',\n>>>     'potting_id': 'Test Region',\n>>>     'side': 'TOP',\n>>>     'material': 'epoxyencapsulant',\n>>>     'potting_units': 'in',\n>>>     'thickness': 0.1,\n>>>     'standoff': 0.2,\n>>>     'shape': polygonal_shape\n>>> },\n>>> ])\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_mechanical_shock_properties.html#run-mechanical-shock-analysis","title":"Run Mechanical Shock Analysis","text":"Run Mechanical Shock Analysis\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nand configure mechanical shock analysis properties."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_mechanical_shock_properties.html#description","title":"Run Mechanical Shock Analysis > Description","text":"Description\n\nSherlock allows you to perform mechanical shock analysis.\nThis script performs the following steps:\n- Connect to the Sherlock service.\n- Import a project.\n- Configure the properties for mechanical shock analysis."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_mechanical_shock_properties.html#connect-to-sherlock","title":"Run Mechanical Shock Analysis > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_mechanical_shock_properties.html#delete-project","title":"Run Mechanical Shock Analysis > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_mechanical_shock_properties.html#import-tutorial-project","title":"Run Mechanical Shock Analysis > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_mechanical_shock_properties.html#update-mechanical-shock-properties","title":"Run Mechanical Shock Analysis > Update Mechanical Shock Properties","text":"Update Mechanical Shock Properties\n\nConfigure properties for mechanical shock analysis.\n\n\n\nDownload Jupyter notebook: update_mechanical_shock_properties.ipynb\n\nDownload Python source code: update_mechanical_shock_properties.py\n\nDownload zipped: update_mechanical_shock_properties.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.rotation.html#rotation","title":"rotation","text":"rotation\n\n\n\nCircularShape.rotation: float\n\nfloat\n\nType\n\nRotation (in degrees)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.model_dump.html#model_dump","title":"model_dump","text":"model_dump\n\n\n\nPCBShape.model_dump(*, mode='python', include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump](../concepts/serialization.md#modelmodel_dump)\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nParameters\n\nmode (Union[Literal['json', 'python'], str]) – The mode in which to_python should run.\nIf mode is ‘json’, the output will only contain JSON serializable types.\nIf mode is ‘python’, the output may contain non-JSON-serializable Python objects.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to include in the output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to exclude from the output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to use the field’s alias in the dictionary key if defined.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nA dictionary representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.parse_file.html#parse_file","title":"parse_file","text":"parse_file\n\n\n\nclassmethod CsvExcelOutlineFile.parse_file(path, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.polarity.html#polarity","title":"polarity","text":"polarity\n\n\n\nCopperFile.polarity: Optional[int]\n\nIndicates whether the copper file uses positive or negative polarity.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.center_y.html#center_y","title":"center_y","text":"center_y\n\n\n\nCircularShape.center_y: float\n\nfloat\n\nType\n\nY coordinate of center\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.analysis.Analysis.update_random_vibe_props.html#update_random_vibe_props","title":"update_random_vibe_props","text":"update_random_vibe_props\n\n\n\nAnalysis.update_random_vibe_props(project, cca_name, random_vibe_damping=None, natural_freq_min=None, natural_freq_min_units=None, natural_freq_max=None, natural_freq_max_units=None, analysis_temp=None, analysis_temp_units=None, part_validation_enabled=None, force_model_rebuild=None, reuse_modal_analysis=None, perform_nf_freq_range_check=None, require_material_assignment_enabled=None, model_source=None, strain_map_natural_freqs=None)\n\nUpdate properties for a random vibe analysis.\n\nAvailable Since: 2024R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nrandom_vibe_damping: str, optional\n\nOne or more modal damping ratios. The default is None.\nSeparate multiple float values with commas.\n\nnatural_freq_min: float, optional\n\nMinimum frequency. The default is None.\nThis parameter is for NX Nastran analysis only.\n\nnatural_freq_min_units: str, optional\n\nMinimum frequency units. The default is None.\nOptions are \"HZ\", \"KHZ\", \"MHZ\", and \"GHZ\".\nThis parameter is for NX Nastran analysis only.\n\nnatural_freq_max: float, optional\n\nMaximum frequency. The default is None.\nThis parameter is for NX Nastran analysis only.\n\nnatural_freq_max_units: str, optional\n\nMaximum frequency units. The default is None.\nOptions are \"HZ\", \"KHZ\", \"MHZ\", and \"GHZ\".\nThis parameter is for NX Nastran analysis only.\n\nanalysis_temp: float, optional\n\nTemperature. The default is None.\n\nanalysis_temp_units: str, optional\n\nTemperature units. The default is None.\nOptions are \"C\", \"F\", and \"K\".\n\npart_validation_enabled: bool, optional\n\nWhether to enable part validation. The default is None.\n\nforce_model_rebuild: str, optional\n\nHow to handle rebuilding of the model. The default is None.\nOptions are \"FORCE\" and \"AUTO\".\n\nreuse_modal_analysis: bool, optional\n\nWhether to reuse the natural frequency for modal analysis. The\ndefault is None. This parameter is for NX Nastran analysis only.\n\nperform_nf_freq_range_check: bool, optional\n\nWhether to perform a frequency range check. The default is None.\nThis parameter is for NX Nastran analysis only.\n\nrequire_material_assignment_enabled: bool, optional\n\nWhether to require material assignment. The default is None.\n\nmodel_source: ModelSource, optional\n\nModel source. The default is None.\nThis parameter is required for strain map analysis.\n\nstrain_map_natural_freqs: str, optional\n\nComma-separated list of natural frequencies. The default is None.\nThis parameter is required for strain map analysis.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.analysis.update_random_vibe_props(\n    \"Test\",\n    \"Card\",\n    random_vibe_damping=\"0.01, 0.05\",\n    analysis_temp=20,\n    analysis_temp_units=\"C\",\n    model_source=ModelSource.STRAIN_MAP\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.model_extra.html#model_extra","title":"model_extra","text":"model_extra\n\n\n\nproperty GetICTFixturesPropertiesRequest.model_extra: dict[str, Any] | None\n\nGet extra fields set during validation.\n\nReturns\n\nA dictionary of extra fields, or None if config.extra is not set to “allow”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.model_computed_fields.html#model_computed_fields","title":"model_computed_fields","text":"model_computed_fields\n\n\n\nOutlineFile.model_computed_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.analysis.Analysis.run_strain_map_analysis.html#run_strain_map_analysis","title":"run_strain_map_analysis","text":"run_strain_map_analysis\n\n\n\nAnalysis.run_strain_map_analysis(project, cca_name, strain_map_analyses)\n\nRun one or more strain map analyses.\n\nAvailable Since: 2023R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the main CCA for the analysis.\n\nstrain_map_analyses: list[list[RunStrainMapAnalysisRequestAnalysisType | list[list[str]]]]\n\nAnalyses consisting of these properties:\n\nanalysis_type: RunStrainMapAnalysisRequestAnalysisType\n\nType of analysis to run.\n\nevent_strain_maps: list\n\nStrain maps assigned to the desired life cycle events for\na given PCB side. The list consists of these properties:\n\nphase_name: str\n\nLife cycle phase name for the strain map assignment.\n\nevent_name: str\n\nLife cycle event name for the strain map assignment.\n\npcb_side: str\n\nPCB side for the strain map. Options are \"TOP\" and \"BOTTOM\".\n\nstrain_map: str\n\nName of the strain map assigned to the life cycle event.\n\nsub_assembly_name: str, optional\n\nName of the subassembly CCA to assign the strain map to.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> from ansys.sherlock.core.types.analysis_types import (\n>>>     RunStrainMapAnalysisRequestAnalysisType\n>>> )\n>>> sherlock = launch_sherlock()\n>>> analysis_request = SherlockAnalysisService_pb2.RunStrainMapAnalysisRequest\n>>> sherlock.analysis.run_strain_map_analysis(\n        \"AssemblyTutorial\",\n        \"Main Board\",\n        [[\n            RunStrainMapAnalysisRequestAnalysisType.RANDOM_VIBE,\n            [[\"Phase 1\", \"Random Vibe\", \"TOP\", \"MainBoardStrain - Top\"],\n             [\"Phase 1\", \"Random Vibe\", \"BOTTOM\", \"MainBoardStrain - Bottom\"],\n             [\"Phase 1\", \"Random Vibe\", \"TOP\", \"MemoryCard1Strain\", \"Memory Card 1\"]],\n        ]]\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.center_y.html#center_y","title":"center_y","text":"center_y\n\n\n\nRectangularShape.center_y: float\n\nfloat\n\nType\n\nY coordinate of center\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_random_vibe_strain_map_analysis.html#run-random-vibration-analysis","title":"Run Random Vibration Analysis","text":"Run Random Vibration Analysis\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nadd strain maps, and run random vibration analysis."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_random_vibe_strain_map_analysis.html#description","title":"Run Random Vibration Analysis > Description","text":"Description\n\nSherlock allows you to perform random vibration analysis using strain maps.\nThis script performs the following steps:\n- Connect to the Sherlock service.\n- Import a project.\n- Add a strain map file to the project.\n- Configure the properties for random vibration analysis.\n- Execute random vibration analysis based on the configured properties."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_random_vibe_strain_map_analysis.html#connect-to-sherlock","title":"Run Random Vibration Analysis > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_random_vibe_strain_map_analysis.html#delete-project","title":"Run Random Vibration Analysis > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_random_vibe_strain_map_analysis.html#import-tutorial-project","title":"Run Random Vibration Analysis > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_random_vibe_strain_map_analysis.html#add-strain-map","title":"Run Random Vibration Analysis > Add Strain Map","text":"Add Strain Map\n\nAdd a strain map to the project."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_random_vibe_strain_map_analysis.html#update-random-vibration-properties","title":"Run Random Vibration Analysis > Update Random Vibration Properties","text":"Update Random Vibration Properties\n\nConfigure properties for random vibration analysis using strain maps."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_random_vibe_strain_map_analysis.html#run-random-vibration-analysis","title":"Run Random Vibration Analysis","text":"Run Random Vibration Analysis\n\nRun the random vibration analysis, including specified parameters.\n\n\n\nDownload Jupyter notebook: run_random_vibe_strain_map_analysis.ipynb\n\nDownload Python source code: run_random_vibe_strain_map_analysis.py\n\nDownload zipped: run_random_vibe_strain_map_analysis.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.analysis.Analysis.update_harmonic_vibe_props.html#update_harmonic_vibe_props","title":"update_harmonic_vibe_props","text":"update_harmonic_vibe_props\n\n\n\nAnalysis.update_harmonic_vibe_props(project, harmonic_vibe_properties)\n\nUpdate properties for a harmonic vibe analysis.\n\nAvailable Since: 2024R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\nharmonic_vibe_properties: list[dict[str, bool | int | float | str]]\n\nHarmonic vibe properties for a CCA consisting of these properties:\n\ncca_name: str\n\nName of the CCA.\n\nmodel_source: ModelSource\n\nModel source. The default is None.\n\nharmonic_vibe_count: int\n\nNumber of harmonic vibe result layers to generate. The default is None.\n\nharmonic_vibe_damping: str\n\nOne or more modal damping ratios. The default is None.\nSeparate multiple float values with commas.\n\npart_validation_enabled: bool\n\nWhether to enable part validation. The default is None.\n\nrequire_material_assignment_enabled: bool\n\nWhether to require material assignment. The default is None.\n\nanalysis_temp: float\n\nTemperature. The default is None.\n\nanalysis_temp_units: str\n\nTemperature units. The default is None.\nOptions are \"C\", \"F\", and \"K\".\n\nforce_model_rebuild: str\n\nHow to handle rebuilding of the model. The default is None.\nOptions are \"FORCE\" and \"AUTO\".\n\nfilter_by_event_frequency: bool\n\nIndicates if harmonic results outside analysis event range are included.\nThis parameter is not used for NX Nastran analysis.\n\nnatural_freq_min: int\n\nMinimum frequency. The default is None.\nThis parameter is for NX Nastran analysis only.\n\nnatural_freq_min_units: str\n\nMinimum frequency units. The default is None.\nOptions are \"HZ\", \"KHZ\", \"MHZ\", and \"GHZ\".\nThis parameter is for NX Nastran analysis only.\n\nnatural_freq_max: int\n\nMaximum frequency. The default is None.\nThis parameter is for NX Nastran analysis only.\n\nnatural_freq_max_units: str\n\nMaximum frequency units. The default is None.\nOptions are \"HZ\", \"KHZ\", \"MHZ\", and \"GHZ\".\nThis parameter is for NX Nastran analysis only.\n\nreuse_modal_analysis: bool\n\nWhether to reuse the natural frequency for modal analysis. The\ndefault is None. This parameter is for NX Nastran analysis only.\n\nstrain_map_natural_freq: double\n\nNatural frequency for strain map analysis.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.analysis.update_harmonic_vibe_props(\n    \"Test\",\n    [{\n        \"cca_name\": \"Card\",\n        \"model_source\": ModelSource.GENERATED,\n        \"harmonic_vibe_count\": 2,\n        \"harmonic_vibe_damping\": \"0.01, 0.05\",\n        \"part_validation_enabled\": False,\n        \"require_material_assignment_enabled\": False,\n        \"analysis_temp\": 20,\n        \"analysis_temp_units\": \"C\",\n        \"force_model_rebuild\": \"AUTO\",\n        \"filter_by_event_frequency\": False,\n        \"natural_freq_min\": 10,\n        \"natural_freq_min_units\": \"Hz\",\n        \"natural_freq_max\": 1000,\n        \"natural_freq_max_units\": \"KHz\",\n        \"reuse_modal_analysis\": True,\n        \"strain_map_natural_freq\": 100.13,\n    },\n    ]\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.model_fields_set.html#model_fields_set","title":"model_fields_set","text":"model_fields_set\n\n\n\nproperty GetTestPointPropertiesRequest.model_fields_set: set[str]\n\nReturns the set of fields that have been explicitly set on this model instance.\n\nReturns\n\nA set of strings representing the fields that have been set,\n\ni.e. that were not filled from defaults.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.model_extra.html#model_extra","title":"model_extra","text":"model_extra\n\n\n\nproperty PolygonalShape.model_extra: dict[str, Any] | None\n\nGet extra fields set during validation.\n\nReturns\n\nA dictionary of extra fields, or None if config.extra is not set to “allow”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.model_extra.html#model_extra","title":"model_extra","text":"model_extra\n\n\n\nproperty PCBShape.model_extra: dict[str, Any] | None\n\nGet extra fields set during validation.\n\nReturns\n\nA dictionary of extra fields, or None if config.extra is not set to “allow”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.model_fields_set.html#model_fields_set","title":"model_fields_set","text":"model_fields_set\n\n\n\nproperty SlotShape.model_fields_set: set[str]\n\nReturns the set of fields that have been explicitly set on this model instance.\n\nReturns\n\nA set of strings representing the fields that have been set,\n\ni.e. that were not filled from defaults.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.update_forward_refs.html#update_forward_refs","title":"update_forward_refs","text":"update_forward_refs\n\n\n\nclassmethod TestPointProperties.update_forward_refs(**localns)\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/index.html#running-analyses","title":"Running Analyses","text":"Running Analyses\n\nExamples on how to run analyses using PySherlock.\n\nsphx_glr_examples_gallery_examples_04-analyses_get_parts_list_analysis_props.py\n\nsphx_glr_examples_gallery_examples_04-analyses_get_random_vibe_inputs_fields.py\n\nsphx_glr_examples_gallery_examples_04-analyses_run_analysis.py\n\nsphx_glr_examples_gallery_examples_04-analyses_run_harmonic_vibe_strain_map_analysis.py\n\nsphx_glr_examples_gallery_examples_04-analyses_run_mechanical_shock_strain_map_analysis.py\n\nsphx_glr_examples_gallery_examples_04-analyses_run_random_vibe_strain_map_analysis.py\n\nsphx_glr_examples_gallery_examples_04-analyses_update_harmonic_vibe_properties.py\n\nsphx_glr_examples_gallery_examples_04-analyses_update_ict_properties.py\n\nsphx_glr_examples_gallery_examples_04-analyses_update_mechanical_shock_properties.py\n\nsphx_glr_examples_gallery_examples_04-analyses_update_part_validation_properties.py\n\nsphx_glr_examples_gallery_examples_04-analyses_update_pcb_modeling_properties.py\n\nsphx_glr_examples_gallery_examples_04-analyses_update_random_vibe_properties.py\n\nsphx_glr_examples_gallery_examples_04-analyses_update_solder_fatigue_properties.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.parse_raw.html#parse_raw","title":"parse_raw","text":"parse_raw\n\n\n\nclassmethod CopperImageFile.parse_raw(b, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.dict.html#dict","title":"dict","text":"dict\n\n\n\nPottingRegion.dict(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False)\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.model_copy.html#model_copy","title":"model_copy","text":"model_copy\n\n\n\nPCBShape.model_copy(*, update=None, deep=False)\n\n!!! abstract “Usage Documentation”\n\n[model_copy](../concepts/serialization.md#model_copy)\n\nReturns a copy of the model.\n\n!!! note\n\nThe underlying instance’s [__dict__][object.__dict__] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property]).\n\nParameters\n\nupdate (Mapping[str, Any] | None) – Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\n\ndeep (bool) – Set to True to make a deep copy of the model.\n\nReturn type\n\nSelf\n\nReturns\n\nNew model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.model_json_schema.html#model_json_schema","title":"model_json_schema","text":"model_json_schema\n\n\n\nclassmethod PottingRegionUpdateData.model_json_schema(by_alias=True, ref_template='#/$defs/{model}', schema_generator=<class 'pydantic.json_schema.GenerateJsonSchema'>, mode='validation')\n\nGenerates a JSON schema for a model class.\n\nParameters\n\nby_alias (bool) – Whether to use attribute aliases or not.\n\nref_template (str) – The reference template.\n\nschema_generator (type[GenerateJsonSchema]) – To override the logic used to generate the JSON schema, as a subclass of\nGenerateJsonSchema with your desired modifications\n\nmode (Literal['validation', 'serialization']) – The mode in which to generate the schema.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nThe JSON schema for the given model class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.update_forward_refs.html#update_forward_refs","title":"update_forward_refs","text":"update_forward_refs\n\n\n\nclassmethod PottingRegionUpdateData.update_forward_refs(**localns)\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.model_post_init.html#model_post_init","title":"model_post_init","text":"model_post_init\n\n\n\nCopperGerberFile.model_post_init(context, /)\n\nOverride this method to perform additional initialization after __init__ and model_construct.\nThis is useful if you want to do some validation that requires the entire model to be initialized.\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_parts_list_properties.html#update-and-export-parts-list-properties","title":"Update and Export Parts List Properties","text":"Update and Export Parts List Properties\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nupdate the parts list properties, export the parts list, and properly close the connection."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_parts_list_properties.html#description","title":"Update and Export Parts List Properties > Description","text":"Description\n\nSherlock’s gRPC API allows users to automate workflows such as updating the\nparts list properties and exporting the parts list for printed circuit boards (PCBs).\nThis script demonstrates how to:\n- Launch the Sherlock service.\n- Import a project.\n- Update the parts list properties.\n\nThe updated properties and exported list ensure consistency and provide\ndocumentation for further use."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_parts_list_properties.html#connect-to-sherlock","title":"Update and Export Parts List Properties > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_parts_list_properties.html#delete-project","title":"Update and Export Parts List Properties > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_parts_list_properties.html#import-tutorial-project","title":"Update and Export Parts List Properties > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/update_parts_list_properties.html#update-parts-list-properties","title":"Update and Export Parts List Properties > Update Parts List Properties","text":"Update Parts List Properties\n\nUpdate the parts list properties for the “Card” of the “Test” project.\n\n\n\nDownload Jupyter notebook: update_parts_list_properties.ipynb\n\nDownload Python source code: update_parts_list_properties.py\n\nDownload zipped: update_parts_list_properties.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.model_extra.html#model_extra","title":"model_extra","text":"model_extra\n\n\n\nproperty PottingRegion.model_extra: dict[str, Any] | None\n\nGet extra fields set during validation.\n\nReturns\n\nA dictionary of extra fields, or None if config.extra is not set to “allow”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.model_json_schema.html#model_json_schema","title":"model_json_schema","text":"model_json_schema\n\n\n\nclassmethod CopperImageFile.model_json_schema(by_alias=True, ref_template='#/$defs/{model}', schema_generator=<class 'pydantic.json_schema.GenerateJsonSchema'>, mode='validation')\n\nGenerates a JSON schema for a model class.\n\nParameters\n\nby_alias (bool) – Whether to use attribute aliases or not.\n\nref_template (str) – The reference template.\n\nschema_generator (type[GenerateJsonSchema]) – To override the logic used to generate the JSON schema, as a subclass of\nGenerateJsonSchema with your desired modifications\n\nmode (Literal['validation', 'serialization']) – The mode in which to generate the schema.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nThe JSON schema for the given model class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.model_parametrized_name.html#model_parametrized_name","title":"model_parametrized_name","text":"model_parametrized_name\n\n\n\nclassmethod PottingRegionDeleteData.model_parametrized_name(params)\n\nCompute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nParameters\n\nparams (tuple[type[Any], ...]) – Tuple of types of the class. Given a generic class\nModel with 2 type variables and a concrete model Model[str, int],\nthe value (str, int) would be passed to params.\n\nReturn type\n\nstr\n\nReturns\n\nString representing the new class where params are passed to cls as type variables.\n\nRaises\n\nTypeError – Raised when trying to generate concrete names for non-generic models.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.model_fields_set.html#model_fields_set","title":"model_fields_set","text":"model_fields_set\n\n\n\nproperty CsvExcelOutlineFile.model_fields_set: set[str]\n\nReturns the set of fields that have been explicitly set on this model instance.\n\nReturns\n\nA set of strings representing the fields that have been set,\n\ni.e. that were not filled from defaults.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/sg_execution_times.html#computation-times","title":"Computation times","text":"Computation times\n\n00:00.000 total execution time for 13 files from examplesgallery_examples04-analyses:\n\n\n\n\n\n\n\nExample\n\nTime\n\nMem (MB)\n\nsphx_glr_examples_gallery_examples_04-analyses_get_parts_list_analysis_props.py (get_parts_list_analysis_props.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_get_random_vibe_inputs_fields.py (get_random_vibe_inputs_fields.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_run_analysis.py (run_analysis.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_run_harmonic_vibe_strain_map_analysis.py (run_harmonic_vibe_strain_map_analysis.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_run_mechanical_shock_strain_map_analysis.py (run_mechanical_shock_strain_map_analysis.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_run_random_vibe_strain_map_analysis.py (run_random_vibe_strain_map_analysis.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_update_harmonic_vibe_properties.py (update_harmonic_vibe_properties.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_update_ict_properties.py (update_ict_properties.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_update_mechanical_shock_properties.py (update_mechanical_shock_properties.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_update_part_validation_properties.py (update_part_validation_properties.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_update_pcb_modeling_properties.py (update_pcb_modeling_properties.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_update_random_vibe_properties.py (update_random_vibe_properties.py)\n\n00:00.000\n\n0.0\n\nsphx_glr_examples_gallery_examples_04-analyses_update_solder_fatigue_properties.py (update_solder_fatigue_properties.py)\n\n00:00.000\n\n0.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.model_dump.html#model_dump","title":"model_dump","text":"model_dump\n\n\n\nUpdateTestPointsRequest.model_dump(*, mode='python', include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump](../concepts/serialization.md#modelmodel_dump)\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nParameters\n\nmode (Union[Literal['json', 'python'], str]) – The mode in which to_python should run.\nIf mode is ‘json’, the output will only contain JSON serializable types.\nIf mode is ‘python’, the output may contain non-JSON-serializable Python objects.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to include in the output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to exclude from the output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to use the field’s alias in the dictionary key if defined.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nA dictionary representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.model_parametrized_name.html#model_parametrized_name","title":"model_parametrized_name","text":"model_parametrized_name\n\n\n\nclassmethod SlotShape.model_parametrized_name(params)\n\nCompute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nParameters\n\nparams (tuple[type[Any], ...]) – Tuple of types of the class. Given a generic class\nModel with 2 type variables and a concrete model Model[str, int],\nthe value (str, int) would be passed to params.\n\nReturn type\n\nstr\n\nReturns\n\nString representing the new class where params are passed to cls as type variables.\n\nRaises\n\nTypeError – Raised when trying to generate concrete names for non-generic models.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.model_validate_json.html#model_validate_json","title":"model_validate_json","text":"model_validate_json\n\n\n\nclassmethod TestPointProperties.model_validate_json(json_data, *, strict=None, context=None, by_alias=None, by_name=None)\n\n!!! abstract “Usage Documentation”\n\n[JSON Parsing](../concepts/json.md#json-parsing)\n\nValidate the given JSON data against the Pydantic model.\n\nParameters\n\njson_data (str | bytes | bytearray) – The JSON data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\nRaises\n\nValidationError – If json_data is not a JSON string or the object could not be validated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.model_config.html#model_config","title":"model_config","text":"model_config\n\n\n\nCopperImageFile.model_config: ClassVar[ConfigDict] = {'arbitrary_types_allowed': True}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.parse_obj.html#parse_obj","title":"parse_obj","text":"parse_obj\n\n\n\nclassmethod PottingRegion.parse_obj(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.from_orm.html#from_orm","title":"from_orm","text":"from_orm\n\n\n\nclassmethod GetTestPointPropertiesRequest.from_orm(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.analysis.Analysis.run_analysis.html#run_analysis","title":"run_analysis","text":"run_analysis\n\n\n\nAnalysis.run_analysis(project, cca_name, analyses)\n\nRun one or more Sherlock analyses.\n\nAvailable Since: 2021R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nanalyses: list of ``elements``\n\nelements: list[tuple[RunAnalysisRequestAnalysisType, tuple[str, str]]]\n\nTuples (type, event)\n\nanalysis_type: RunAnalysisRequestAnalysisType\n\nType of analysis to run.\n\nevent: list[tuple[str, str]]\n\nTuples (phase_name, event_name)\n\nphase_name: str\n\nName of the life cycle phase.\n\nevent_name: str\n\nName of the life cycle event.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.analysis.run_analysis(\n    \"Test\",\n    \"Card\",\n    [\n        (RunAnalysisRequestAnalysisType.NATURAL_FREQ,\n        [\n            (\"Phase 1\", [\"Harmonic Event\"])\n        ]\n        )\n    ]\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.model_fields_set.html#model_fields_set","title":"model_fields_set","text":"model_fields_set\n\n\n\nproperty TestPointProperties.model_fields_set: set[str]\n\nReturns the set of fields that have been explicitly set on this model instance.\n\nReturns\n\nA set of strings representing the fields that have been set,\n\ni.e. that were not filled from defaults.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.model_extra.html#model_extra","title":"model_extra","text":"model_extra\n\n\n\nproperty TestPointProperties.model_extra: dict[str, Any] | None\n\nGet extra fields set during validation.\n\nReturns\n\nA dictionary of extra fields, or None if config.extra is not set to “allow”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.json.html#json","title":"json","text":"json\n\n\n\nCircularShape.json(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.model_validate_json.html#model_validate_json","title":"model_validate_json","text":"model_validate_json\n\n\n\nclassmethod UpdateTestPointsRequest.model_validate_json(json_data, *, strict=None, context=None, by_alias=None, by_name=None)\n\n!!! abstract “Usage Documentation”\n\n[JSON Parsing](../concepts/json.md#json-parsing)\n\nValidate the given JSON data against the Pydantic model.\n\nParameters\n\njson_data (str | bytes | bytearray) – The JSON data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\nRaises\n\nValidationError – If json_data is not a JSON string or the object could not be validated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.model_copy.html#model_copy","title":"model_copy","text":"model_copy\n\n\n\nPottingRegion.model_copy(*, update=None, deep=False)\n\n!!! abstract “Usage Documentation”\n\n[model_copy](../concepts/serialization.md#model_copy)\n\nReturns a copy of the model.\n\n!!! note\n\nThe underlying instance’s [__dict__][object.__dict__] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property]).\n\nParameters\n\nupdate (Mapping[str, Any] | None) – Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\n\ndeep (bool) – Set to True to make a deep copy of the model.\n\nReturn type\n\nSelf\n\nReturns\n\nNew model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.model_dump_json.html#model_dump_json","title":"model_dump_json","text":"model_dump_json\n\n\n\nPCBShape.model_dump_json(*, indent=None, include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump_json](../concepts/serialization.md#modelmodel_dump_json)\n\nGenerates a JSON representation of the model using Pydantic’s to_json method.\n\nParameters\n\nindent (int | None) – Indentation to use in the JSON output. If None is passed, the output will be compact.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to include in the JSON output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to exclude from the JSON output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to serialize using field aliases.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\nstr\n\nReturns\n\nA JSON string representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.model_validate.html#model_validate","title":"model_validate","text":"model_validate\n\n\n\nclassmethod RectangularShape.model_validate(obj, *, strict=None, from_attributes=None, context=None, by_alias=None, by_name=None)\n\nValidate a pydantic model instance.\n\nParameters\n\nobj (Any) – The object to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\nfrom_attributes (bool | None) – Whether to extract data from object attributes.\n\ncontext (Any | None) – Additional context to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nRaises\n\nValidationError – If the object could not be validated.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.model_parametrized_name.html#model_parametrized_name","title":"model_parametrized_name","text":"model_parametrized_name\n\n\n\nclassmethod CsvExcelOutlineFile.model_parametrized_name(params)\n\nCompute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nParameters\n\nparams (tuple[type[Any], ...]) – Tuple of types of the class. Given a generic class\nModel with 2 type variables and a concrete model Model[str, int],\nthe value (str, int) would be passed to params.\n\nReturn type\n\nstr\n\nReturns\n\nString representing the new class where params are passed to cls as type variables.\n\nRaises\n\nTypeError – Raised when trying to generate concrete names for non-generic models.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/index.html#exporting-projects-and-files","title":"Exporting Projects and Files","text":"Exporting Projects and Files\n\nExamples on how to export projects and files using PySherlock.\n\nsphx_glr_examples_gallery_examples_03-exporting_export_aedb.py\n\nsphx_glr_examples_gallery_examples_03-exporting_export_all_mount_points.py\n\nsphx_glr_examples_gallery_examples_03-exporting_export_all_test_fixtures.py\n\nsphx_glr_examples_gallery_examples_03-exporting_export_all_test_points.py\n\nsphx_glr_examples_gallery_examples_03-exporting_export_fea_model.py\n\nsphx_glr_examples_gallery_examples_03-exporting_export_net_list.py\n\nsphx_glr_examples_gallery_examples_03-exporting_export_part_list.py\n\nsphx_glr_examples_gallery_examples_03-exporting_export_project.py\n\nsphx_glr_examples_gallery_examples_03-exporting_export_trace_model.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.ImageFile.legend_orientation.html#legend_orientation","title":"legend_orientation","text":"legend_orientation\n\n\n\nImageFile.legend_orientation\n\nlegend_orientation\n\nType\n\nLegendOrientation\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.copy.html#copy","title":"copy","text":"copy\n\n\n\nTestPointProperties.copy(*, include=None, exclude=None, update=None, deep=False)\n\nReturns a copy of the model.\n\n!!! warning “Deprecated”\n\nThis method is now deprecated; use model_copy instead.\n\nIf you need include or exclude, use:\n\n`python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n`\n\nParameters\n\ninclude – Optional set or mapping specifying which fields to include in the copied model.\n\nexclude – Optional set or mapping specifying which fields to exclude in the copied model.\n\nupdate – Optional dictionary of field-value pairs to override field values in the copied model.\n\ndeep – If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns\n\nA copy of the model with included, excluded and updated fields as specified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.model_parametrized_name.html#model_parametrized_name","title":"model_parametrized_name","text":"model_parametrized_name\n\n\n\nclassmethod UpdatePottingRegionRequest.model_parametrized_name(params)\n\nCompute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nParameters\n\nparams (tuple[type[Any], ...]) – Tuple of types of the class. Given a generic class\nModel with 2 type variables and a concrete model Model[str, int],\nthe value (str, int) would be passed to params.\n\nReturn type\n\nstr\n\nReturns\n\nString representing the new class where params are passed to cls as type variables.\n\nRaises\n\nTypeError – Raised when trying to generate concrete names for non-generic models.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.copy.html#copy","title":"copy","text":"copy\n\n\n\nCopyPottingRegionRequest.copy(*, include=None, exclude=None, update=None, deep=False)\n\nReturns a copy of the model.\n\n!!! warning “Deprecated”\n\nThis method is now deprecated; use model_copy instead.\n\nIf you need include or exclude, use:\n\n`python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n`\n\nParameters\n\ninclude – Optional set or mapping specifying which fields to include in the copied model.\n\nexclude – Optional set or mapping specifying which fields to exclude in the copied model.\n\nupdate – Optional dictionary of field-value pairs to override field values in the copied model.\n\ndeep – If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns\n\nA copy of the model with included, excluded and updated fields as specified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.model_parametrized_name.html#model_parametrized_name","title":"model_parametrized_name","text":"model_parametrized_name\n\n\n\nclassmethod RectangularShape.model_parametrized_name(params)\n\nCompute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nParameters\n\nparams (tuple[type[Any], ...]) – Tuple of types of the class. Given a generic class\nModel with 2 type variables and a concrete model Model[str, int],\nthe value (str, int) would be passed to params.\n\nReturn type\n\nstr\n\nReturns\n\nString representing the new class where params are passed to cls as type variables.\n\nRaises\n\nTypeError – Raised when trying to generate concrete names for non-generic models.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.layer_snapshot_enabled.html#layer_snapshot_enabled","title":"layer_snapshot_enabled","text":"layer_snapshot_enabled\n\n\n\nCopperFile.layer_snapshot_enabled: Optional[bool]\n\nEnable or disable the generation of a layer snapshot for this copper file.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.model_extra.html#model_extra","title":"model_extra","text":"model_extra\n\n\n\nproperty CsvExcelOutlineFile.model_extra: dict[str, Any] | None\n\nGet extra fields set during validation.\n\nReturns\n\nA dictionary of extra fields, or None if config.extra is not set to “allow”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.parse_file.html#parse_file","title":"parse_file","text":"parse_file\n\n\n\nclassmethod RectangularShape.parse_file(path, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.model_fields.html#model_fields","title":"model_fields","text":"model_fields\n\n\n\nCsvExcelOutlineFile.model_fields = {'header_row_count': FieldInfo(annotation=int, required=True), 'location_units': FieldInfo(annotation=str, required=True), 'x_location_column': FieldInfo(annotation=str, required=True), 'y_location_column': FieldInfo(annotation=str, required=True)}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.json.html#json","title":"json","text":"json\n\n\n\nCopyPottingRegionRequest.json(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/99-teardown/index.html#teardown","title":"Teardown","text":"Teardown\n\nScripts to run after the examples.\n\nsphx_glr_examples_gallery_examples_99-teardown_teardown.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.schema.html#schema","title":"schema","text":"schema\n\n\n\nclassmethod CircularShape.schema(by_alias=True, ref_template='#/$defs/{model}')\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.html#ansyssherlockcoretypeslayer_typesictfixtureproperties","title":"ansys.sherlock.core.types.layer_types.ICTFixtureProperties","text":"ansys.sherlock.core.types.layer_types.ICTFixtureProperties\n\n\n\nclass ansys.sherlock.core.types.layer_types.ICTFixtureProperties(**data)\n\nContains the properties of an ict fixture.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.model_validate_strings.html#model_validate_strings","title":"model_validate_strings","text":"model_validate_strings\n\n\n\nclassmethod CopperGerberFile.model_validate_strings(obj, *, strict=None, context=None, by_alias=None, by_name=None)\n\nValidate the given object with string data against the Pydantic model.\n\nParameters\n\nobj (Any) – The object containing string data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_harmonic_profile.html#add-harmonic-vibration-profiles","title":"Add Harmonic Vibration Profiles","text":"Add Harmonic Vibration Profiles\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\ncreate a lifecycle phase, add a harmonic event to the phase, and add harmonic\nvibration profiles."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_harmonic_profile.html#description","title":"Add Harmonic Vibration Profiles > Description","text":"Description\n\nSherlock’s gRPC API allows users to automate workflows such as adding harmonic vibration profiles\nto lifecycle phases.\nThis script demonstrates how to:\n- Connect to the Sherlock service.\n- Import a project.\n- Create a lifecycle phase.\n- Add a harmonic event to the lifecycle phase.\n- Add vibration profiles to the harmonic event.\n\nThe harmonic vibration profiles simulate the effects of vibration conditions on the board."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_harmonic_profile.html#connect-to-sherlock","title":"Add Harmonic Vibration Profiles > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_harmonic_profile.html#delete-project","title":"Add Harmonic Vibration Profiles > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_harmonic_profile.html#import-tutorial-project","title":"Add Harmonic Vibration Profiles > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_harmonic_profile.html#create-lifecycle-phase-and-add-harmonic-event","title":"Add Harmonic Vibration Profiles > Create Lifecycle Phase and Add Harmonic Event","text":"Create Lifecycle Phase and Add Harmonic Event\n\nCreate a new lifecycle phase and add a harmonic event to it.\n\n\n\nDownload Jupyter notebook: add_harmonic_profile.ipynb\n\nDownload Python source code: add_harmonic_profile.py\n\nDownload zipped: add_harmonic_profile.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.validate.html#validate","title":"validate","text":"validate\n\n\n\nclassmethod RectangularShape.validate(value)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_modeling_region.html#add-modeling-regions-for-pcb-analysis","title":"Add Modeling Regions for PCB Analysis","text":"Add Modeling Regions for PCB Analysis\n\nThis example demonstrates how to use the Sherlock gRPC service to:\n- Import a project.\n- Add modeling regions to a PCB model.\n- Define different region shapes like polygonal, rectangular, circular, and slot shapes.\n- Configure PCB and trace model properties for simulation."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_modeling_region.html#description","title":"Add Modeling Regions for PCB Analysis > Description","text":"Description\n\nConnect to the Sherlock gRPC service, import a project,\nand create modeling regions with different shapes for a PCB analysis. The script\nshows how to configure the modeling region shapes, PCB modeling properties, and trace\nmodeling properties for each region."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_modeling_region.html#connect-to-sherlock","title":"Add Modeling Regions for PCB Analysis > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_modeling_region.html#delete-project","title":"Add Modeling Regions for PCB Analysis > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_modeling_region.html#import-tutorial-project","title":"Add Modeling Regions for PCB Analysis > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_modeling_region.html#create-modeling-regions","title":"Add Modeling Regions for PCB Analysis > Create Modeling Regions","text":"Create Modeling Regions\n\nDefine different shapes (polygonal, rectangular, circular, and slot) for modeling regions.\n\n\n\nDownload Jupyter notebook: add_modeling_region.ipynb\n\nDownload Python source code: add_modeling_region.py\n\nDownload zipped: add_modeling_region.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.schema_json.html#schema_json","title":"schema_json","text":"schema_json\n\n\n\nclassmethod UpdateTestPointsRequest.schema_json(*, by_alias=True, ref_template='#/$defs/{model}', **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.construct.html#construct","title":"construct","text":"construct\n\n\n\nclassmethod UpdateICTFixturesRequest.construct(_fields_set=None, **values)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.parse_raw.html#parse_raw","title":"parse_raw","text":"parse_raw\n\n\n\nclassmethod DeletePottingRegionRequest.parse_raw(b, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.LegendBounds.html#ansyssherlockcoretypesproject_typeslegendbounds","title":"ansys.sherlock.core.types.project_types.LegendBounds","text":"ansys.sherlock.core.types.project_types.LegendBounds\n\n\n\nclass ansys.sherlock.core.types.project_types.LegendBounds(legend_x, legend_y, height, width)\n\nContains the properties of the legend bounds.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.update_forward_refs.html#update_forward_refs","title":"update_forward_refs","text":"update_forward_refs\n\n\n\nclassmethod CopperGerberFile.update_forward_refs(**localns)\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.model_config.html#model_config","title":"model_config","text":"model_config\n\n\n\nTestPointProperties.model_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.model_validate.html#model_validate","title":"model_validate","text":"model_validate\n\n\n\nclassmethod PottingRegionCopyData.model_validate(obj, *, strict=None, from_attributes=None, context=None, by_alias=None, by_name=None)\n\nValidate a pydantic model instance.\n\nParameters\n\nobj (Any) – The object to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\nfrom_attributes (bool | None) – Whether to extract data from object attributes.\n\ncontext (Any | None) – Additional context to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nRaises\n\nValidationError – If the object could not be validated.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.copy.html#copy","title":"copy","text":"copy\n\n\n\nDeletePottingRegionRequest.copy(*, include=None, exclude=None, update=None, deep=False)\n\nReturns a copy of the model.\n\n!!! warning “Deprecated”\n\nThis method is now deprecated; use model_copy instead.\n\nIf you need include or exclude, use:\n\n`python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n`\n\nParameters\n\ninclude – Optional set or mapping specifying which fields to include in the copied model.\n\nexclude – Optional set or mapping specifying which fields to exclude in the copied model.\n\nupdate – Optional dictionary of field-value pairs to override field values in the copied model.\n\ndeep – If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns\n\nA copy of the model with included, excluded and updated fields as specified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.model_json_schema.html#model_json_schema","title":"model_json_schema","text":"model_json_schema\n\n\n\nclassmethod CopperGerberFile.model_json_schema(by_alias=True, ref_template='#/$defs/{model}', schema_generator=<class 'pydantic.json_schema.GenerateJsonSchema'>, mode='validation')\n\nGenerates a JSON schema for a model class.\n\nParameters\n\nby_alias (bool) – Whether to use attribute aliases or not.\n\nref_template (str) – The reference template.\n\nschema_generator (type[GenerateJsonSchema]) – To override the logic used to generate the JSON schema, as a subclass of\nGenerateJsonSchema with your desired modifications\n\nmode (Literal['validation', 'serialization']) – The mode in which to generate the schema.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nThe JSON schema for the given model class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.stackup.Stackup.list_laminate_layers.html#list_laminate_layers","title":"list_laminate_layers","text":"list_laminate_layers\n\n\n\nStackup.list_laminate_layers(project)\n\nList all laminate layers and their properties.\n\nAvailable Since: 2021R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\nReturns\n\n:\n\n\n\npython:list[SherlockStackupService_pb2.ListLaminatesResponse.CCALaminateProp]\n\nThe laminate layers of all CCAs in the project.\n\nReturn type\n\nlist[CCALaminateProp]\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> laminateLayers = sherlock.stackup.list_laminate_layers(project=\"Tutorial\")\n>>> for layer in laminateLayers:\n>>>     properties = layer.laminateProps\n>>>     for prop in properties:\n>>>     print(f\"{prop}\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.from_orm.html#from_orm","title":"from_orm","text":"from_orm\n\n\n\nclassmethod PottingRegion.from_orm(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.schema_json.html#schema_json","title":"schema_json","text":"schema_json\n\n\n\nclassmethod ICTFixtureProperties.schema_json(*, by_alias=True, ref_template='#/$defs/{model}', **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.analysis.Analysis.get_solder_fatigue_input_fields.html#get_solder_fatigue_input_fields","title":"get_solder_fatigue_input_fields","text":"get_solder_fatigue_input_fields\n\n\n\nAnalysis.get_solder_fatigue_input_fields()\n\nGet solder fatigue property fields based on the user configuration.\n\nAvailable Since: 2024R1\n\nReturns\n\n:\n\n\n\npython:list[python:str]\n\nSolder fatigue property fields based on the user configuration.\n\nReturn type\n\nlist[str]\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.analysis.get_solder_fatigue_input_fields()\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.analysis.Analysis.update_natural_frequency_props.html#update_natural_frequency_props","title":"update_natural_frequency_props","text":"update_natural_frequency_props\n\n\n\nAnalysis.update_natural_frequency_props(project, cca_name, natural_freq_count, natural_freq_min, natural_freq_min_units, natural_freq_max, natural_freq_max_units, part_validation_enabled, require_material_assignment_enabled, analysis_temp=None, analysis_temp_units=None)\n\nUpdate properties for a natural frequency analysis.\n\nAvailable Since:2023R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nnatural_freq_count: int\n\nNatural frequency result count.\n\nnatural_freq_min: int, optional\n\nMinimum frequency. This parameter is for NX Nastran analysis only.\n\nnatural_freq_min_units: str, optional\n\nMinimum frequency units. Options are \"HZ\", \"KHZ\", \"MHZ\", and \"GHZ\".\nThis parameter is for NX Nastran analysis only.\n\nnatural_freq_max: int, optional\n\nMaximum frequency. This parameter is for NX Nastran analysis only.\n\nnatural_freq_max_units: str, optional\n\nMaximum frequency units. Options are \"HZ\", \"KHZ\", \"MHZ\", and \"GHZ\".\nThis parameter is for NX Nastran analysis only.\n\npart_validation_enabled: bool\n\nWhether part validation is enabled.\n\nrequire_material_assignment_enabled: bool\n\nWhether to require material assignment.\n\nanalysis_temp: float, optional\n\nTemperature.\n\nanalysis_temp_units: str, optional\n\nTemperature units. Options are \"C\", \"F\", and \"K\".\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n>>>     \"ODB++ Tutorial.tgz\",\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     project=\"Test\",\n>>>     cca_name=\"Card\"\n>>> )\n>>> sherlock.analysis.update_natural_frequency_props(\n>>>     \"Test\",\n>>>     \"Card\",\n>>>     natural_freq_count=2,\n>>>     natural_freq_min=10,\n>>>     natural_freq_min_units=\"HZ\",\n>>>     natural_freq_max=100,\n>>>     natural_freq_max_units=\"HZ\",\n>>>     part_validation_enabled=True,\n>>>     require_material_assignment_enabled=False,\n>>>     analysis_temp=25,\n>>>     analysis_temp_units=\"C\"\n>>> )\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.model.Model.export_trace_reinforcement_model.html#export_trace_reinforcement_model","title":"export_trace_reinforcement_model","text":"export_trace_reinforcement_model\n\n\n\nModel.export_trace_reinforcement_model(project_name, cca_name, export_file, overwrite=True, display_model=False, generate_models_for_all_layers=False, coordinate_units='mm', trace_param_diameter_threshold_val=2, trace_param_diameter_threshold_unit='mm', trace_param_min_hole_diameter_val=0.25, trace_param_min_hole_diameter_unit='mm', trace_drill_hole_modeling='DISABLED', trace_drill_hole_min_diameter_val=2, trace_drill_hole_min_diameter_unit='mm', trace_drill_hole_max_edge_val=1, trace_drill_hole_max_edge_unit='mm')\n\nExport a trace reinforcement model.\n\nAvailable Since: 2023R1\n\nParameters\n\nproject_name: str\n\nName of the Sherlock project to generate the trace reinforcement model for.\n\ncca_name: str\n\nName of the CCA to generate the trace reinforcement model from.\n\nexport_file: str\n\nPath for saving exported files to. The file extension must be .wbjn.\n\noverwrite: bool, optional\n\nWhether to overwrite an existing file having the same file name.\nThe default is True.\n\ndisplay_model: bool, optional\n\nWhether to launch and display the exported model in Ansys Workbench\nMechanical once the export finishes. The default is False.\n\ngenerate_models_for_all_layers:  bool, optional\n\nWhether to generate and export trace models for not only the generated trace\nreinforcement layers but also all other layers. The default is False, in\nwhich case only trace reinforcement layers are generated and exported.\n\ncoordinate_units: str, optional\n\nUnits of the model coordinates to use when exporting a model.\nThe default is \"mm\".\n\ntrace_param_diameter_threshold_val: float, optional\n\nThreshold value that determines whether a hole is modeled with shell\nreinforcement elements or beam elements. The default is 2, with the\ndefault units being \"mm\" as specified by the next parameter. Holes with\ndiameters equal to or greater than this threshold value are modeled with shell\nreinforcement elements. Holes with diameters less than this threshold value\nare modeled with beam elements. Holes buried inside the board are always modeled\nwith beam elements.\n\ntrace_param_diameter_threshold_unit: str, optional\n\nUnits associated with the threshold value for the trace parameter diameter.\nThe default is \"mm\".\n\ntrace_param_min_hole_diameter_val: float, optional\n\nMinimum trace parameter diameter for determining whether a via is exported.\nThe default is 0.25, with the default units being \"mm\" as specified\nby the next parameter. Vias with diameters smaller than this diameter\nare not exported. Setting the value to 0 exports all vias.\n\ntrace_param_min_hole_diameter_unit: str, optional\n\nUnits associated with the value for the minimum trace parameter diameter.\nThe default is \"mm\".\n\ntrace_drill_hole_modeling: str, optional\n\nWhether to enable or disable the modeling of trace drill holes. Options are\n\"ENABLED\" and \"DISABLED\". The default is \"DISABLED\", in which\ncase the trace_drill_hole_min_diameter and trace_drill_hole_max_edge\nparameters are not used.\n\ntrace_drill_hole_min_diameter_val: float, optional\n\nMinimimun diameter value for determining whether a trace drill hole is\nexported. The default is 2, with the default units being \"mm\"\nas specified by the next parameter. Trace drill holes with diameters smaller\nthan this diameter are not exported. Setting the value to 0 exports all\ntrace drill holes.\n\ntrace_drill_hole_min_diameter_unit: str, optional\n\nUnits associated with the value for the minimum trace drill hole diameter.\nThe default is \"mm\".\n\ntrace_drill_hole_max_edge_val: float, optional\n\nMaximum segment size for representing round drill holes by a polygon.\nThe default is 1, with the default units being \"mm\" as specified\nby the next parameter.\n\ntrace_drill_hole_max_edge_unit: str, optional\n\nUnits associated with the maximum segment for representing round drill holes\nby a polygon. The default is \"mm\".\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core import launcher\n>>> from ansys.sherlock.core import model\n>>> sherlock = launcher.launch_sherlock()\n>>> sherlock.model.export_trace_reinforcement_model(\n    'Tutorial Project', 'Main Board', 'c:\\Temp\\export.wbjn',\n    True, False, False)\n\n>>> from ansys.sherlock.core import launcher\n>>> from ansys.sherlock.core import model\n>>> sherlock = launcher.launch_sherlock()\n>>> sherlock.model.export_trace_reinforcement_model(\n    'Tutorial Project', 'Main Board', 'c:\\Temp\\export.wbjn',\n    True, False, False, \"mm\", 1.5, \"mm\", 0, \"mm\", \"ENABLED\", 1.5, \"mm\", 1, \"mm\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.model_dump_json.html#model_dump_json","title":"model_dump_json","text":"model_dump_json\n\n\n\nGetTestPointPropertiesRequest.model_dump_json(*, indent=None, include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump_json](../concepts/serialization.md#modelmodel_dump_json)\n\nGenerates a JSON representation of the model using Pydantic’s to_json method.\n\nParameters\n\nindent (int | None) – Indentation to use in the JSON output. If None is passed, the output will be compact.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to include in the JSON output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to exclude from the JSON output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to serialize using field aliases.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\nstr\n\nReturns\n\nA JSON string representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.validate.html#validate","title":"validate","text":"validate\n\n\n\nclassmethod PottingRegion.validate(value)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.model_rebuild.html#model_rebuild","title":"model_rebuild","text":"model_rebuild\n\n\n\nclassmethod PottingRegionUpdateData.model_rebuild(*, force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace=None)\n\nTry to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nParameters\n\nforce (bool) – Whether to force the rebuilding of the model schema, defaults to False.\n\nraise_errors (bool) – Whether to raise errors, defaults to True.\n\n_parent_namespace_depth (int) – The depth level of the parent namespace, defaults to 2.\n\n_types_namespace (Mapping[str, Any] | None) – The types namespace, defaults to None.\n\nReturn type\n\nbool | None\n\nReturns\n\nReturns None if the schema is already “complete” and rebuilding was not required.\nIf rebuilding _was_ required, returns True if rebuilding was successful, otherwise False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.layer.Layer.export_layer_image.html#export_layer_image","title":"export_layer_image","text":"export_layer_image\n\n\n\nLayer.export_layer_image(project, cca_name, export_layers)\n\nExport one or more 2D Layer Viewer images from a project CCA.\n\nParameters\n\nproject\n\npython:str\n\nName of the Sherlock project.\n\ncca_name\n\npython:str\n\nName of the CCA.\n\nexport_layers\n\nexport_layer_image_info\n\nList of parameters for the export image specified.\nEach dictionary should contain:\n\ncomponents_enabled: bool, optional\n\nDisplays the components in the export image. Default to true when not provided.\n\nlabels_enabled: bool, optional\n\nDisplays the component reference designators in the export image. Default to true\nwhen not provided.\n\nleads_enabled\n\nbool, optional\n\nDisplays the component leads and solder balls in the export image. Default to true\nwhen not provided.\n\naxes_enabled\n\nbool\n\nDisplays the x and y axes in the export image.\n\ngrid_enabled\n\nbool\n\nDisplays a grid in the export image.\n\nlayer_infos: list[dict[enum, list]]\n\nThe layers as seen in the Layer Viewer for the given project CCA.\nEach dictionary should contain:\n\n“layer_folder”: enum, layer_folder enum.\n\n“layers”: list, list of names of layers under this folder\n\nfile_path\n\nstr\n\nFull file path of the export image.\n\nimage_height\n\nint\n\nThe export image height.\n\nimage_width\n\nint\n\nThe export image width.\n\noverwrite_existing_file\n\nbool\n\nIf the file path already exists, overwrite the file if this is set to true.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n>>>     \"ODB++ Tutorial.tgz\",\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     project=\"Tutorial Project\",\n>>>     cca_name=\"Card\"\n>>> )\n>>> layer_infos = [\n>>> { \"layer_folder\": \"Components\",\n>>>   \"layers\": [\"comp-top\"]},\n>>> { \"layer_folder\": \"Harmonic_Vibe\",\n>>>   \"layers\":[\"HV Disp @ 203.39 Hz\"]}\n>>> ]\n>>> export_layers = [\n>>> {\n>>>     \"components_enabled\": True,\n>>>     \"labels_enabled\": True,\n>>>     \"leads_enabled\": True,\n>>>     \"axes_enabled\": True,\n>>>     \"grid_enabled\": True,\n>>>     \"layer_infos\": layer_infos,\n>>>     \"file_path\": \"C:\\\\Users\\\\user_id\\\\Downloads\\\\SH-image.jpg\",\n>>>     \"image_height\": 600,\n>>>     \"image_width\": 800,\n>>>     \"overwrite_existing_file\": True\n>>> }\n>>> ]\n>>> sherlock.layer.export_layer_image(\"Tutorial Project\", \"Card\", export_layers)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.model_dump.html#model_dump","title":"model_dump","text":"model_dump\n\n\n\nPottingRegionCopyData.model_dump(*, mode='python', include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump](../concepts/serialization.md#modelmodel_dump)\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nParameters\n\nmode (Union[Literal['json', 'python'], str]) – The mode in which to_python should run.\nIf mode is ‘json’, the output will only contain JSON serializable types.\nIf mode is ‘python’, the output may contain non-JSON-serializable Python objects.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to include in the output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to exclude from the output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to use the field’s alias in the dictionary key if defined.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nA dictionary representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.model_copy.html#model_copy","title":"model_copy","text":"model_copy\n\n\n\nSlotShape.model_copy(*, update=None, deep=False)\n\n!!! abstract “Usage Documentation”\n\n[model_copy](../concepts/serialization.md#model_copy)\n\nReturns a copy of the model.\n\n!!! note\n\nThe underlying instance’s [__dict__][object.__dict__] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property]).\n\nParameters\n\nupdate (Mapping[str, Any] | None) – Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\n\ndeep (bool) – Set to True to make a deep copy of the model.\n\nReturn type\n\nSelf\n\nReturns\n\nNew model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelFile.html#ansyssherlockcoretypesproject_typescsvexcelfile","title":"ansys.sherlock.core.types.project_types.CsvExcelFile","text":"ansys.sherlock.core.types.project_types.CsvExcelFile\n\n\n\nclass ansys.sherlock.core.types.project_types.CsvExcelFile(header_row_count, numeric_format, reference_id_column, temperature_column, temperature_units)\n\nContains the properties for a thermal map, CSV, or Excel file.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.dict.html#dict","title":"dict","text":"dict\n\n\n\nCircularShape.dict(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False)\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.model_validate_json.html#model_validate_json","title":"model_validate_json","text":"model_validate_json\n\n\n\nclassmethod CopperGerberFile.model_validate_json(json_data, *, strict=None, context=None, by_alias=None, by_name=None)\n\n!!! abstract “Usage Documentation”\n\n[JSON Parsing](../concepts/json.md#json-parsing)\n\nValidate the given JSON data against the Pydantic model.\n\nParameters\n\njson_data (str | bytes | bytearray) – The JSON data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\nRaises\n\nValidationError – If json_data is not a JSON string or the object could not be validated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.model_dump.html#model_dump","title":"model_dump","text":"model_dump\n\n\n\nCircularShape.model_dump(*, mode='python', include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump](../concepts/serialization.md#modelmodel_dump)\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nParameters\n\nmode (Union[Literal['json', 'python'], str]) – The mode in which to_python should run.\nIf mode is ‘json’, the output will only contain JSON serializable types.\nIf mode is ‘python’, the output may contain non-JSON-serializable Python objects.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to include in the output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to exclude from the output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to use the field’s alias in the dictionary key if defined.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nA dictionary representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.schema.html#schema","title":"schema","text":"schema\n\n\n\nclassmethod PCBShape.schema(by_alias=True, ref_template='#/$defs/{model}')\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.model_construct.html#model_construct","title":"model_construct","text":"model_construct\n\n\n\nclassmethod PottingRegionUpdateData.model_construct(_fields_set=None, **values)\n\nCreates a new instance of the Model class with validated data.\n\nCreates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n\nmodel_construct() generally respects the model_config.extra setting on the provided model.\nThat is, if model_config.extra == ‘allow’, then all extra passed values are added to the model instance’s __dict__\nand __pydantic_extra__ fields. If model_config.extra == ‘ignore’ (the default), then all extra passed values are ignored.\nBecause no validation is performed with a call to model_construct(), having model_config.extra == ‘forbid’ does not result in\nan error if extra values are passed, but they will be ignored.\n\nParameters\n\n_fields_set (set[str] | None) – A set of field names that were originally explicitly set during instantiation. If provided,\nthis is directly used for the [model_fields_set][pydantic.BaseModel.model_fields_set] attribute.\nOtherwise, the field names from the values argument will be used.\n\nvalues (Any) – Trusted or pre-validated data dictionary.\n\nReturn type\n\nSelf\n\nReturns\n\nA new instance of the Model class with validated data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"getting_started/installation.html#install-packages","title":"Install packages","text":"Install packages\n\nThe ansys-sherlock-core package supports Python 3.10 through Python 3.13 on Windows and Linux.\n\nTo use PySherlock, you must download and install both the ansys-api-sherlock\nand ansys-sherlock-core packages. By using pip, ansys-api-sherlock is\ninstalled as part of ansys-sherlock-core.\nRun the following to install the latest publicly distributed version of the package.\n\nThe following table shows the version of PySherlock to use for each release of Sherlock:\n\n\n\n\n\nPySherlock\n\nSherlock\n\n0.4\n\n2024 R1\n\n0.6\n\n2024 R2\n\n0.8\n\n2025 R1\n\n0.9\n\n2025 R2\n\nTo install a specific version of PySherlock, use the following command, where the <version> is one\nof the values in the table preceding:\n\nIf you want to install the ansys-api-sherlock and ansys-sherlock-core packages\nfrom its source code directly, follow these instructions.\n\nDownload the latest ansys-api-sherlock package by running this\ngit clone command:\n\nAlternatively, you can download the ZIP file from the Release area of the\nansys-api-sherlock GitHub\nrepository and unzip it before proceeding with the installation.\n\nAfter the package is downloaded, execute these commands to install it:\n\nDownload the latest ansys-sherlock-core package by running this\ngit clone command:\n\nAlternatively, you can download the ZIP file from the Release area of the\npysherlock GitHub repository\nand unzip it before proceeding with the installation.\n\nAfter the package is downloaded, execute these commands to install it:\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.project.Project.add_cca.html#add_cca","title":"add_cca","text":"add_cca\n\n\n\nProject.add_cca(project, cca_properties)\n\nAdd one or more CCAs to a project.\n\nAvailable Since: 2023R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_properties: list[dict[str, bool | float | str]]\n\nList of CCAs to be added consisting of these properties:\n\ncca_name: str\n\nName of the CCA.\n\ndescription: str\n\nDescription of the CCA. The default is None.\n\ndefault_solder_type: str\n\nThe default solder type. The default is None.\n\ndefault_stencil_thickness: float\n\nThe default stencil thickness. The default is None.\n\ndefault_stencil_thickness_units: str\n\nUnits for default stencil thickness. The default is None.\n\ndefault_part_temp_rise: float\n\nDefault part temp rise. The default is None.\n\ndefault_part_temp_rise_units: str\n\nUnits for default part temp rise. The default is None.\nOptions are \"C\", \"F\", and \"K\".\n\nguess_part_properties_enabled: bool\n\nWhether to enable guess part properties. The default is None.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.project.add_cca(\n    \"Test\",\n    [{\n        'cca_name': 'Card 2',\n        'description': 'Second CCA',\n        'default_solder_type': 'SAC305',\n        'default_stencil_thickness': 10,\n        'default_stencil_thickness_units': 'mm',\n        'default_part_temp_rise': 20,\n        'default_part_temp_rise_units': 'C',\n        'guess_part_properties_enabled': False,\n    },\n    ]\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.copy.html#copy","title":"copy","text":"copy\n\n\n\nGetICTFixturesPropertiesRequest.copy(*, include=None, exclude=None, update=None, deep=False)\n\nReturns a copy of the model.\n\n!!! warning “Deprecated”\n\nThis method is now deprecated; use model_copy instead.\n\nIf you need include or exclude, use:\n\n`python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n`\n\nParameters\n\ninclude – Optional set or mapping specifying which fields to include in the copied model.\n\nexclude – Optional set or mapping specifying which fields to exclude in the copied model.\n\nupdate – Optional dictionary of field-value pairs to override field values in the copied model.\n\ndeep – If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns\n\nA copy of the model with included, excluded and updated fields as specified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.layer.Layer.get_ict_fixtures_props.html#get_ict_fixtures_props","title":"get_ict_fixtures_props","text":"get_ict_fixtures_props\n\n\n\nLayer.get_ict_fixtures_props(request)\n\nReturn the properties for each ICT fixture given a comma-separated list of fixture IDs.\n\nAvailable Since: 2026R1\n\nParameters\n\nrequest: GetICTFixturesPropertiesRequest\n\nContains all the information needed to return the properties for one or more ICT\nfixtures.\n\nReturns\n\n:\n\n\n\nSherlockCommonService_pb2.GetICTFixturesPropertiesResponse\n\nProperties for each ICT fixture that correspond to the reference designators.\n\nReturn type\n\nGetICTFixturesPropertiesResponse\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> from ansys.sherlock.core.types.layer_types import GetICTFixturesPropertiesRequest\n>>> sherlock = launch_sherlock()\n>>> request = layer_types.GetICTFixturesPropertiesRequest(\n>>>    project = \"Tutorial Project\"\n>>>    cca_name = \"Main Board\"\n>>>    ict_fixtures_ids = \"F1,F2\"\n>>> )\n>>> response = layer.get_ict_fixtures_props(request)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.model_post_init.html#model_post_init","title":"model_post_init","text":"model_post_init\n\n\n\nCopperFile.model_post_init(context, /)\n\nOverride this method to perform additional initialization after __init__ and model_construct.\nThis is useful if you want to do some validation that requires the entire model to be initialized.\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.json.html#json","title":"json","text":"json\n\n\n\nRectangularShape.json(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.project.Project.create_cca_from_modeling_region.html#create_cca_from_modeling_region","title":"create_cca_from_modeling_region","text":"create_cca_from_modeling_region\n\n\n\nProject.create_cca_from_modeling_region(project, cca_from_mr_properties)\n\nCreate one or more CCAs from modeling regions in a given project.\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_from_mr_properties: list[dict[str, bool | float | str]]\n\nCCAs to be created from modeling regions consisting of these properties:\n\ncca_name: str\n\nName of the CCA.\n\nmodeling_region_id: str\n\nName of the modeling region.\n\ndescription: str\n\nDescription of the CCA.\n\ndefault_solder_type: str\n\nThe default solder type. The default is None.\n\ndefault_stencil_thickness: float\n\nThe default stencil thickness. The default is None.\n\ndefault_stencil_thickness_units: str\n\nUnits for default stencil thickness. The default is None.\n\ndefault_part_temp_rise: float\n\nDefault part temp rise. The default is None.\n\ndefault_part_temp_rise_units: str\n\nUnits for default part temp rise. The default is None.\nOptions are \"C\", \"F\", and \"K\".\n\nguess_part_properties: bool\n\nWhether to enable guess part properties. The default is None.\n\ngenerate_image_layers: bool\n\nWhether to generate image layers or not.  The default is None.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.project.create_cca_from_modeling_region(\n    \"Test\",\n    [{\n        'cca_name': 'Card',\n        'modeling_region_id': 'MR1'\n        'description': 'Test',\n        'default_solder_type': 'SAC305',\n        'default_stencil_thickness': 10,\n        'default_stencil_thickness_units': 'mm',\n        'default_part_temp_rise': 20,\n        'default_part_temp_rise_units': 'C',\n        'guess_part_properties': False,\n        'generate_image_layers': False,\n    },\n    ]\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.model_validate.html#model_validate","title":"model_validate","text":"model_validate\n\n\n\nclassmethod CopperImageFile.model_validate(obj, *, strict=None, from_attributes=None, context=None, by_alias=None, by_name=None)\n\nValidate a pydantic model instance.\n\nParameters\n\nobj (Any) – The object to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\nfrom_attributes (bool | None) – Whether to extract data from object attributes.\n\ncontext (Any | None) – Additional context to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nRaises\n\nValidationError – If the object could not be validated.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_ict_properties.html#run-ict-analysis","title":"Run ICT Analysis","text":"Run ICT Analysis\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nand configure ICT analysis properties."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_ict_properties.html#description","title":"Run ICT Analysis > Description","text":"Description\n\nSherlock allows you to perform ICT (In-Circuit Test) analysis.\nThis script performs the following steps:\n- Connect to the Sherlock service.\n- Import a project.\n- Configure the properties for ICT analysis.\n\nFor further details, refer to the official documentation on ICT analysis in Sherlock."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_ict_properties.html#connect-to-sherlock","title":"Run ICT Analysis > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_ict_properties.html#delete-project","title":"Run ICT Analysis > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_ict_properties.html#import-tutorial-project","title":"Run ICT Analysis > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_ict_properties.html#update-ict-analysis-properties","title":"Run ICT Analysis > Update ICT Analysis Properties","text":"Update ICT Analysis Properties\n\nConfigure properties for ICT analysis.\n\n\n\nDownload Jupyter notebook: update_ict_properties.ipynb\n\nDownload Python source code: update_ict_properties.py\n\nDownload zipped: update_ict_properties.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.model_json_schema.html#model_json_schema","title":"model_json_schema","text":"model_json_schema\n\n\n\nclassmethod GetICTFixturesPropertiesRequest.model_json_schema(by_alias=True, ref_template='#/$defs/{model}', schema_generator=<class 'pydantic.json_schema.GenerateJsonSchema'>, mode='validation')\n\nGenerates a JSON schema for a model class.\n\nParameters\n\nby_alias (bool) – Whether to use attribute aliases or not.\n\nref_template (str) – The reference template.\n\nschema_generator (type[GenerateJsonSchema]) – To override the logic used to generate the JSON schema, as a subclass of\nGenerateJsonSchema with your desired modifications\n\nmode (Literal['validation', 'serialization']) – The mode in which to generate the schema.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nThe JSON schema for the given model class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.model_validate.html#model_validate","title":"model_validate","text":"model_validate\n\n\n\nclassmethod GetTestPointPropertiesRequest.model_validate(obj, *, strict=None, from_attributes=None, context=None, by_alias=None, by_name=None)\n\nValidate a pydantic model instance.\n\nParameters\n\nobj (Any) – The object to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\nfrom_attributes (bool | None) – Whether to extract data from object attributes.\n\ncontext (Any | None) – Additional context to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nRaises\n\nValidationError – If the object could not be validated.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.stackup.Stackup.update_laminate_layer.html#update_laminate_layer","title":"update_laminate_layer","text":"update_laminate_layer\n\n\n\nStackup.update_laminate_layer(project, cca_name, layer, manufacturer='', grade='', material='', thickness=0, thickness_unit='', construction_style='', glass_construction=None, fiber_material='', conductor_material='', conductor_percent='')\n\nUpdate a laminate layer with given properties.\n\nAvailable Since: 2021R1\n\nParameters\n\nproject\n\npython:str\n\nName of the Sherlock project.\n\ncca_name\n\npython:str\n\nName of the CCA.\n\nlayer\n\npython:str\n\nLayer ID associated with the laminate layer.\n\nmanufacturer\n\npython:str, optional\n\nManufacturer of the material for the laminate layer.\nThe default is \"\". To update the material, the\nmanufacturer, grade, and material parameters\nmust be specified. When the manufacturer is specified,\nthere are checks to ensure that the corresponding parameters\nare provided.\n\ngrade\n\npython:str, optional\n\nMaterial grade. The default is \"\".\n\nmaterial\n\npython:str, optional\n\nMaterial name. The default is \"\".\n\nthickness\n\npython:float, optional\n\nLaminate thickness. The default is 0.\n\nthickness_unit\n\npython:str, optional\n\nUnits for the laminate thickness. The default is \"\".\n\nconstruction_style\n\npython:str, optional\n\nConstruction style. The default is \"\".\n\nglass_construction\n\npython:list[python:tuple[python:str, python:float, python:float, python:str]], optional\n\nList representing a glass construction. This list consists\nof objects with these properties:\n\nstyle\n\nstr\n\nStyle of the glass construction.\n\nresinPercentage\n\nfloat\n\nResin percentage.\n\nthickness: float\n\nThickness.\n\nthicknessUnit: str\n\nUnits for the thickness.\n\nfiber_material\n\npython:str, optional\n\nFiber material. The default is \"\". This parameter is only\nupdated for a glass construction.\n\nconductor_material\n\npython:str, optional\n\nConductor material. The default is \"\".\n\nconductor_percent\n\npython:str, optional\n\nConductor percentage. The default is \"\".\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.stackup.update_laminate_layer(\n    \"Test\",\n    \"Card\",\n    \"2\",\n    \"Generic\",\n    \"FR-4\",\n    \"Generic FR-4\",\n    0.015,\n    \"in\",\n    \"106\",\n    [\n        (\"106\", 68.0, 0.015, \"in\")\n    ],\n    \"E-GLASS\",\n    \"COPPER\",\n    \"0.0\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.parse_obj.html#parse_obj","title":"parse_obj","text":"parse_obj\n\n\n\nclassmethod CsvExcelOutlineFile.parse_obj(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Oops","href":"404.html#oops","title":"Oops","text":"Oops\n\nThis is unexpected.\n\nThe page you are requesting does not exist.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.model_validate_strings.html#model_validate_strings","title":"model_validate_strings","text":"model_validate_strings\n\n\n\nclassmethod UpdateICTFixturesRequest.model_validate_strings(obj, *, strict=None, context=None, by_alias=None, by_name=None)\n\nValidate the given object with string data against the Pydantic model.\n\nParameters\n\nobj (Any) – The object containing string data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.model_parametrized_name.html#model_parametrized_name","title":"model_parametrized_name","text":"model_parametrized_name\n\n\n\nclassmethod GetICTFixturesPropertiesRequest.model_parametrized_name(params)\n\nCompute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nParameters\n\nparams (tuple[type[Any], ...]) – Tuple of types of the class. Given a generic class\nModel with 2 type variables and a concrete model Model[str, int],\nthe value (str, int) would be passed to params.\n\nReturn type\n\nstr\n\nReturns\n\nString representing the new class where params are passed to cls as type variables.\n\nRaises\n\nTypeError – Raised when trying to generate concrete names for non-generic models.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.validate.html#validate","title":"validate","text":"validate\n\n\n\nclassmethod GetICTFixturesPropertiesRequest.validate(value)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.model_fields_set.html#model_fields_set","title":"model_fields_set","text":"model_fields_set\n\n\n\nproperty CopperImageFile.model_fields_set: set[str]\n\nReturns the set of fields that have been explicitly set on this model instance.\n\nReturns\n\nA set of strings representing the fields that have been set,\n\ni.e. that were not filled from defaults.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.parts.Parts.update_parts_from_AVL.html#update_parts_from_avl","title":"update_parts_from_AVL","text":"update_parts_from_AVL\n\n\n\nParts.update_parts_from_AVL(project, cca_name, matching_mode, duplication_mode, avl_part_num, avl_description)\n\nUpdate the parts list from the Approved Vendor List (AVL).\n\nAvailable Since: 2024R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nmatching_mode: str\n\nDetermines how parts are matched against the AVL\n\nduplication_mode: PartsListSearchDuplicationMode\n\nDetermines how duplicate part matches are handled when found\n\navl_part_num: AVLPartNum\n\nDetermines what part number info in the parts list is updated from the AVL\n\navl_description: AVLDescription\n\nDetermines if the part description is updated or not\n\nReturns\n\n:\n\n\n\nUpdatePartsListFromAVLResponse\n\nreturnCode: ReturnCode\n\nvalue: int\n\nStatus code of the response. 0 for success.\n\nmessage: str\n\nIndicates general errors that occurred while attempting to update parts\n\nnumPartsUpdated: int\n\nNumber of parts updated\n\nupdateErrors: list<str>\n\nErrors found when updating part\n\nReturn type\n\nUpdatePartsListFromAVLResponse\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> from ansys.sherlock.core.types.parts_types import (\n    AVLDescription,\n    AVLPartNum,\n    PartsListSearchDuplicationMode,\n)\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"C:\\\\Program Files\\\\ANSYS Inc\\\\v241\\\\sherlock\\\\tutorial\\\\ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.parts.update_parts_from_AVL(\n    project=\"Test\",\n    cca_name=\"Card\",\n    matching_mode=\"Both\",\n    duplication=PartsListSearchDuplicationMode.FIRST,\n    avl_part_num=AVLPartNum.ASSIGN_INTERNAL_PART_NUM,\n    avl_description=AVLDescription.ASSIGN_APPROVED_DESCRIPTION\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.ImageFile.min_temperature.html#min_temperature","title":"min_temperature","text":"min_temperature\n\n\n\nImageFile.min_temperature\n\nmin_temperature\n\nType\n\nfloat\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.analysis.Analysis.update_part_list_validation_analysis_props.html#update_part_list_validation_analysis_props","title":"update_part_list_validation_analysis_props","text":"update_part_list_validation_analysis_props\n\n\n\nAnalysis.update_part_list_validation_analysis_props(project, properties_per_cca)\n\nUpdate properties for a Part List Validation analysis.\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\nproperties_per_cca: list[dict[str, bool | str]]\n\nPart List Validation analysis properties for each CCA consisting of these properties:\n\ncca_name: str\n\nName of the CCA.\n\nprocess_use_avl: bool\n\nWhether to use AVL.\n\nprocess_use_wizard: bool\n\nWhether to use the wizard.\n\nprocess_check_confirmed_properties: bool\n\nWhether to check confirmed properties.\n\nprocess_check_part_numbers: bool\n\nWhether to check part numbers.\n\nmatching_mode: str\n\nMatching type.\n\navl_require_internal_part_number: bool\n\nWhether to require an internal part number.\n\navl_require_approved_description: bool\n\nWhether to require an approved description.\n\navl_require_approved_manufacturer: bool\n\nWhether to require an approved manufacturer.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.analysis.update_part_list_validation_analysis_props(\n    \"Test\",\n    [{\n        \"cca_name\": \"Card\",\n        \"process_use_avl\": True,\n        \"process_use_wizard\": False,\n        \"process_check_confirmed_properties\": True,\n        \"process_check_part_numbers\": True,\n        \"matching_mode\": \"Part\",\n        \"avl_require_internal_part_number\": True,\n        \"avl_require_approved_description\": False,\n        \"avl_require_approved_manufacturer\": True,\n    },\n    ]\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.update_forward_refs.html#update_forward_refs","title":"update_forward_refs","text":"update_forward_refs\n\n\n\nclassmethod PottingRegion.update_forward_refs(**localns)\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.from_orm.html#from_orm","title":"from_orm","text":"from_orm\n\n\n\nclassmethod TestPointProperties.from_orm(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.model_computed_fields.html#model_computed_fields","title":"model_computed_fields","text":"model_computed_fields\n\n\n\nGerberOutlineFile.model_computed_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.model_post_init.html#model_post_init","title":"model_post_init","text":"model_post_init\n\n\n\nCircularShape.model_post_init(context, /)\n\nOverride this method to perform additional initialization after __init__ and model_construct.\nThis is useful if you want to do some validation that requires the entire model to be initialized.\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_harmonic_vibe_strain_map_analysis.html#run-strain-map-analysis","title":"Run Strain Map Analysis","text":"Run Strain Map Analysis\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nadd strain maps, and run strain map analysis, including harmonic vibration analysis."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_harmonic_vibe_strain_map_analysis.html#description","title":"Run Strain Map Analysis > Description","text":"Description\n\nSherlock allows you to perform strain map analysis, which can be applied in various contexts,\nsuch as harmonic vibration analysis on PCB strain maps.\nThis script performs the following steps:\n- Connect to the Sherlock service.\n- Import a project.\n- Add a strain map file to the project.\n- Configure the analysis properties for harmonic vibration.\n- Execute strain map analysis based on the configured properties.\n\nFor further details, refer to the official documentation on strain map analysis in Sherlock."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_harmonic_vibe_strain_map_analysis.html#connect-to-sherlock","title":"Run Strain Map Analysis > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_harmonic_vibe_strain_map_analysis.html#delete-project","title":"Run Strain Map Analysis > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_harmonic_vibe_strain_map_analysis.html#import-tutorial-project","title":"Run Strain Map Analysis > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_harmonic_vibe_strain_map_analysis.html#add-strain-map","title":"Run Strain Map Analysis > Add Strain Map","text":"Add Strain Map\n\nAdd a strain map to the project."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_harmonic_vibe_strain_map_analysis.html#update-harmonic-vibration-properties","title":"Run Strain Map Analysis > Update Harmonic Vibration Properties","text":"Update Harmonic Vibration Properties\n\nConfigure properties for harmonic vibration analysis using strain maps."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_harmonic_vibe_strain_map_analysis.html#run-strain-map-analysis","title":"Run Strain Map Analysis","text":"Run Strain Map Analysis\n\nRun the strain map analysis, including harmonic vibration and other analysis types.\n\n\n\nDownload Jupyter notebook: run_harmonic_vibe_strain_map_analysis.ipynb\n\nDownload Python source code: run_harmonic_vibe_strain_map_analysis.py\n\nDownload zipped: run_harmonic_vibe_strain_map_analysis.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.model_validate.html#model_validate","title":"model_validate","text":"model_validate\n\n\n\nclassmethod PCBShape.model_validate(obj, *, strict=None, from_attributes=None, context=None, by_alias=None, by_name=None)\n\nValidate a pydantic model instance.\n\nParameters\n\nobj (Any) – The object to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\nfrom_attributes (bool | None) – Whether to extract data from object attributes.\n\ncontext (Any | None) – Additional context to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nRaises\n\nValidationError – If the object could not be validated.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.common.Common.list_solder_materials.html#list_solder_materials","title":"list_solder_materials","text":"list_solder_materials\n\n\n\nCommon.list_solder_materials()\n\nList valid solders.\n\nAvailable Since: 2024R1\n\nReturns\n\n:\n\n\n\npython:list[python:str]\n\nValid solder names.\n\nReturn type\n\nlist[str]\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.common.list_solder_materials()\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.validate.html#validate","title":"validate","text":"validate\n\n\n\nclassmethod PottingRegionUpdateData.validate(value)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.update_forward_refs.html#update_forward_refs","title":"update_forward_refs","text":"update_forward_refs\n\n\n\nclassmethod CopyPottingRegionRequest.update_forward_refs(**localns)\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.dict.html#dict","title":"dict","text":"dict\n\n\n\nTestPointProperties.dict(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False)\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.model_config.html#model_config","title":"model_config","text":"model_config\n\n\n\nCsvExcelOutlineFile.model_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.schema.html#schema","title":"schema","text":"schema\n\n\n\nclassmethod CopyPottingRegionRequest.schema(by_alias=True, ref_template='#/$defs/{model}')\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.model_dump.html#model_dump","title":"model_dump","text":"model_dump\n\n\n\nCopperGerberFile.model_dump(*, mode='python', include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump](../concepts/serialization.md#modelmodel_dump)\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nParameters\n\nmode (Union[Literal['json', 'python'], str]) – The mode in which to_python should run.\nIf mode is ‘json’, the output will only contain JSON serializable types.\nIf mode is ‘python’, the output may contain non-JSON-serializable Python objects.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to include in the output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to exclude from the output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to use the field’s alias in the dictionary key if defined.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nA dictionary representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.construct.html#construct","title":"construct","text":"construct\n\n\n\nclassmethod PottingRegion.construct(_fields_set=None, **values)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.project.html#project","title":"project","text":"project\n\n\n\nUpdateTestPointsRequest.project: str\n\nName of the Sherlock project.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.model_parametrized_name.html#model_parametrized_name","title":"model_parametrized_name","text":"model_parametrized_name\n\n\n\nclassmethod CopperGerberFile.model_parametrized_name(params)\n\nCompute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nParameters\n\nparams (tuple[type[Any], ...]) – Tuple of types of the class. Given a generic class\nModel with 2 type variables and a concrete model Model[str, int],\nthe value (str, int) would be passed to params.\n\nReturn type\n\nstr\n\nReturns\n\nString representing the new class where params are passed to cls as type variables.\n\nRaises\n\nTypeError – Raised when trying to generate concrete names for non-generic models.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.model_validate.html#model_validate","title":"model_validate","text":"model_validate\n\n\n\nclassmethod CopperGerberFile.model_validate(obj, *, strict=None, from_attributes=None, context=None, by_alias=None, by_name=None)\n\nValidate a pydantic model instance.\n\nParameters\n\nobj (Any) – The object to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\nfrom_attributes (bool | None) – Whether to extract data from object attributes.\n\ncontext (Any | None) – Additional context to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nRaises\n\nValidationError – If the object could not be validated.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_part_list.html#export-parts-list","title":"Export Parts List","text":"Export Parts List\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nand export the parts list associated with the imported project.\n\nDescription\nSherlock’s gRPC API enables automation of various workflows, including parts list export.\nThis script demonstrates how to:\n- Connect to the Sherlock service.\n- Import a project.\n- Exporting the parts list from the project."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_part_list.html#connect-to-sherlock","title":"Export Parts List > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_part_list.html#delete-project","title":"Export Parts List > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_part_list.html#import-tutorial-project","title":"Export Parts List > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_part_list.html#export-parts-list","title":"Export Parts List","text":"Export Parts List\n\nExport the parts list from the imported project.\n\n\n\nDownload Jupyter notebook: export_part_list.ipynb\n\nDownload Python source code: export_part_list.py\n\nDownload zipped: export_part_list.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/common_types.html#common-types","title":"Common Types","text":"Common Types\n\n\n\nModule containing types for the Common Service."},{"objectID":"Home","href":"api/common_types.html#constants","title":"Common Types > Constants","text":"Constants\n\n\n\nclass ansys.sherlock.core.types.common_types.ListUnitsRequestUnitType\n\nConstants for Unit Type in the List Units request.\n\n\n\nACCELERATION = 2\n\nACCELERATION\n\n\n\nACCEL_DENSITY = 1\n\nACCEL_DENSITY\n\n\n\nAREA = 3\n\nAREA\n\n\n\nBANDWIDTH = 4\n\nBANDWIDTH\n\n\n\nCAPACITANCE = 5\n\nCAPACITANCE\n\n\n\nCTE = 6\n\nCTE\n\n\n\nCURRENT = 7\n\nCURRENT\n\n\n\nDENSITY = 8\n\nDENSITY\n\n\n\nDISP_DENSITY = 9\n\nDISP_DENSITY\n\n\n\nFORCE = 10\n\nFORCE\n\n\n\nFREQUENCY = 11\n\nFREQUENCY\n\n\n\nINDUCTANCE = 12\n\nINDUCTANCE\n\n\n\nLENGTH = 13\n\nLENGTH\n\n\n\nPOWER = 14\n\nPOWER\n\n\n\nRESISTANCE = 15\n\nRESISTANCE\n\n\n\nSIZE = 16\n\nSIZE\n\n\n\nSPECIFIC_HEAT = 17\n\nSPECIFIC_HEAT\n\n\n\nSTRAIN = 18\n\nSTRAIN\n\n\n\nSTRESS = 19\n\nSTRESS\n\n\n\nTEMPERATURE = 20\n\nTEMPERATURE\n\n\n\nTHERMAL_CONDUCTIVITY = 21\n\nTHERMAL_CONDUCTIVITY\n\n\n\nTHERMAL_RESISTANCE = 22\n\nTHERMAL_RESISTANCE\n\n\n\nTIME = 23\n\nTIME\n\n\n\nVELOCITY = 24\n\nVELOCITY\n\n\n\nVELOCITY_DENSITY = 25\n\nVELOCITY_DENSITY\n\n\n\nVOLTAGE = 26\n\nVOLTAGE\n\n\n\nVOLUME = 27\n\nVOLUME\n\n\n\nWEIGHT = 28\n\nWEIGHT\n\n\n\nclass ansys.sherlock.core.types.common_types.TableDelimiter\n\nTypes of delimiters that can be used for exporting tables.\n\n\n\nCOMMA = 0\n\nCOMMA\n\n\n\nSEMICOLON = 3\n\nSEMICOLON\n\n\n\nSPACE = 1\n\nSPACE\n\n\n\nTAB = 2\n\nTAB\n\n\n\nclass ansys.sherlock.core.types.common_types.Measurement(value, unit)\n\nContains the properties of the measurement.\n\n\n\nunit\n\nMeasurement units\n\nType\n\nstr\n\n\n\nvalue\n\nMeasurement value\n\nType\n\nfloat\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.load_value.html#load_value","title":"load_value","text":"load_value\n\n\n\nTestPointProperties.load_value: float\n\nLoad value\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_random_vibe_properties.html#update-random-vibration-properties","title":"Update Random Vibration Properties","text":"Update Random Vibration Properties\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nand update random vibration properties."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_random_vibe_properties.html#description","title":"Update Random Vibration Properties > Description","text":"Description\n\nSherlock allows you to configure random vibration properties for specific PCBs.\nThis script performs the following steps:\n- Connect to the Sherlock service.\n- Import a project.\n- Update random vibration properties.\n\nFor further details, refer to the official documentation on random vibration properties in Sherlock."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_random_vibe_properties.html#connect-to-sherlock","title":"Update Random Vibration Properties > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_random_vibe_properties.html#delete-project","title":"Update Random Vibration Properties > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_random_vibe_properties.html#import-tutorial-project","title":"Update Random Vibration Properties > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_random_vibe_properties.html#update-random-vibration-properties","title":"Update Random Vibration Properties","text":"Update Random Vibration Properties\n\nConfigure random vibration properties for the PCB.\n\n\n\nDownload Jupyter notebook: update_random_vibe_properties.ipynb\n\nDownload Python source code: update_random_vibe_properties.py\n\nDownload zipped: update_random_vibe_properties.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.model_copy.html#model_copy","title":"model_copy","text":"model_copy\n\n\n\nCopyPottingRegionRequest.model_copy(*, update=None, deep=False)\n\n!!! abstract “Usage Documentation”\n\n[model_copy](../concepts/serialization.md#model_copy)\n\nReturns a copy of the model.\n\n!!! note\n\nThe underlying instance’s [__dict__][object.__dict__] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property]).\n\nParameters\n\nupdate (Mapping[str, Any] | None) – Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\n\ndeep (bool) – Set to True to make a deep copy of the model.\n\nReturn type\n\nSelf\n\nReturns\n\nNew model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_fea_model.html#export-fea-model","title":"Export FEA Model","text":"Export FEA Model\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nand export a Finite Element Analysis (FEA) model.\n\nDescription\nSherlock’s gRPC API enables automation of various workflows, including exporting FEA models.\nThis script demonstrates how to:\n- Connect to the Sherlock service.\n- Import a tutorial project.\n- Export an FEA model with specific parameters."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_fea_model.html#connect-to-sherlock","title":"Export FEA Model > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_fea_model.html#delete-project","title":"Export FEA Model > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_fea_model.html#import-tutorial-project","title":"Export FEA Model > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive provided with the Sherlock installation."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_fea_model.html#export-fea-model","title":"Export FEA Model","text":"Export FEA Model\n\nExport the FEA model with customized parameters.\n\n\n\nDownload Jupyter notebook: export_fea_model.ipynb\n\nDownload Python source code: export_fea_model.py\n\nDownload zipped: export_fea_model.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.parse_obj.html#parse_obj","title":"parse_obj","text":"parse_obj\n\n\n\nclassmethod DeletePottingRegionRequest.parse_obj(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.rotation.html#rotation","title":"rotation","text":"rotation\n\n\n\nRectangularShape.rotation: float\n\nfloat\n\nType\n\nRotation (in degrees)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.ImageFile.html#ansyssherlockcoretypesproject_typesimagefile","title":"ansys.sherlock.core.types.project_types.ImageFile","text":"ansys.sherlock.core.types.project_types.ImageFile\n\n\n\nclass ansys.sherlock.core.types.project_types.ImageFile(board_bounds, coordinate_units, image_bounds, legend_bounds, legend_orientation, max_temperature, max_temperature_units, min_temperature, min_temperature_units)\n\nContains the properties for a thermal map image file.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.layer.Layer.delete_all_mount_points.html#delete_all_mount_points","title":"delete_all_mount_points","text":"delete_all_mount_points\n\n\n\nLayer.delete_all_mount_points(project, cca_name)\n\nDelete all mount points for a CCA.\n\nAvailable Since: 2022R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n>>>     \"ODB++ Tutorial.tgz\",\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     project=\"Test\",\n>>>     cca_name=\"Card\",\n>>> )\n>>> sherlock.layer.update_mount_points_by_file(\n>>>     \"Test\",\n>>>     \"Card\",\n>>>     \"MountPointImport.csv\",\n>>> )\n>>> sherlock.layer.delete_all_mount_points(\"Test\", \"Card\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.project.Project.import_ipc2581_archive.html#import_ipc2581_archive","title":"import_ipc2581_archive","text":"import_ipc2581_archive\n\n\n\nProject.import_ipc2581_archive(archive_file, include_other_layers, guess_part_properties, project=None, cca_name=None, polyline_simplification=False, polyline_tolerance=0.1, polyline_tolerance_units='mm')\n\nImport an IPC-2581 archive file.\n\nAvailable Since: 2021R1\n\nParameters\n\narchive_file: str\n\nFull path to the IPC-2581 archive file.\n\ninclude_other_layers: bool\n\nWhether to include other layers.\n\nguess_part_properties: bool\n\nWhether to guess part properties\n\nproject: str, optional\n\nName of the Sherlock project. The default is None, in which case\nthe name of the IPC-2581 archive file is used for the project name.\n\ncca_name: str, optional\n\nName of the CCA. The default is None, in which case the name of\nthe IPC-2581 archive file is used for the CCA name.\n\npolyline_simplification: bool, optional\n\nWhether to enable polyline simplification\n\npolyline_tolerance: float, optional\n\nPolyline simplification tolerance\n\npolyline_tolerance_units: str, optional\n\nPolyline simplification tolerance units\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_ipc2581_archive(\"Tutorial.zip\", True, True,\n                        project=\"Tutorial\",\n                        cca_name=\"Card\",\n                        polyline_simplification=True,\n                        polyline_tolerance=0.1,\n                        polyline_tolerance_units=\"mm\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.copy.html#copy","title":"copy","text":"copy\n\n\n\nRectangularShape.copy(*, include=None, exclude=None, update=None, deep=False)\n\nReturns a copy of the model.\n\n!!! warning “Deprecated”\n\nThis method is now deprecated; use model_copy instead.\n\nIf you need include or exclude, use:\n\n`python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n`\n\nParameters\n\ninclude – Optional set or mapping specifying which fields to include in the copied model.\n\nexclude – Optional set or mapping specifying which fields to exclude in the copied model.\n\nupdate – Optional dictionary of field-value pairs to override field values in the copied model.\n\ndeep – If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns\n\nA copy of the model with included, excluded and updated fields as specified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.model_parametrized_name.html#model_parametrized_name","title":"model_parametrized_name","text":"model_parametrized_name\n\n\n\nclassmethod TestPointProperties.model_parametrized_name(params)\n\nCompute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nParameters\n\nparams (tuple[type[Any], ...]) – Tuple of types of the class. Given a generic class\nModel with 2 type variables and a concrete model Model[str, int],\nthe value (str, int) would be passed to params.\n\nReturn type\n\nstr\n\nReturns\n\nString representing the new class where params are passed to cls as type variables.\n\nRaises\n\nTypeError – Raised when trying to generate concrete names for non-generic models.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.potting_id.html#potting_id","title":"potting_id","text":"potting_id\n\n\n\nPottingRegionDeleteData.potting_id: str\n\nId of the potting region(s) to delete.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.model_rebuild.html#model_rebuild","title":"model_rebuild","text":"model_rebuild\n\n\n\nclassmethod TestPointProperties.model_rebuild(*, force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace=None)\n\nTry to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nParameters\n\nforce (bool) – Whether to force the rebuilding of the model schema, defaults to False.\n\nraise_errors (bool) – Whether to raise errors, defaults to True.\n\n_parent_namespace_depth (int) – The depth level of the parent namespace, defaults to 2.\n\n_types_namespace (Mapping[str, Any] | None) – The types namespace, defaults to None.\n\nReturn type\n\nbool | None\n\nReturns\n\nReturns None if the schema is already “complete” and rebuilding was not required.\nIf rebuilding _was_ required, returns True if rebuilding was successful, otherwise False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.stackup.Stackup.get_stackup_props.html#get_stackup_props","title":"get_stackup_props","text":"get_stackup_props\n\n\n\nStackup.get_stackup_props(project, cca_name)\n\nGet the stackup properties from a CCA.\n\nAvailable Since: 2021R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nReturns\n\n:\n\n\n\nStackupProperties\n\nObject containing the properties of the stackup.\n\nReturn type\n\nStackupProperties\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> stackup_props = sherlock.stackup.get_stackup_props(\n       project=\"Tutorial\",\n       cca_name=\"Main Board\"\n    )\n>>> print(f\"{stackup_props}\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.model_computed_fields.html#model_computed_fields","title":"model_computed_fields","text":"model_computed_fields\n\n\n\nPolygonalShape.model_computed_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.model_json_schema.html#model_json_schema","title":"model_json_schema","text":"model_json_schema\n\n\n\nclassmethod ICTFixtureProperties.model_json_schema(by_alias=True, ref_template='#/$defs/{model}', schema_generator=<class 'pydantic.json_schema.GenerateJsonSchema'>, mode='validation')\n\nGenerates a JSON schema for a model class.\n\nParameters\n\nby_alias (bool) – Whether to use attribute aliases or not.\n\nref_template (str) – The reference template.\n\nschema_generator (type[GenerateJsonSchema]) – To override the logic used to generate the JSON schema, as a subclass of\nGenerateJsonSchema with your desired modifications\n\nmode (Literal['validation', 'serialization']) – The mode in which to generate the schema.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nThe JSON schema for the given model class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.str_validation.html#str_validation","title":"str_validation","text":"str_validation\n\n\n\nclassmethod DeletePottingRegionRequest.str_validation(value, info)\n\nValidate string fields listed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.validate.html#validate","title":"validate","text":"validate\n\n\n\nclassmethod GetTestPointPropertiesRequest.validate(value)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.parse_file.html#parse_file","title":"parse_file","text":"parse_file\n\n\n\nclassmethod ICTFixtureProperties.parse_file(path, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.cca_name.html#cca_name","title":"cca_name","text":"cca_name\n\n\n\nPottingRegion.cca_name: str\n\nThe name of the CCA.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.model_post_init.html#model_post_init","title":"model_post_init","text":"model_post_init\n\n\n\nPottingRegionCopyData.model_post_init(context, /)\n\nOverride this method to perform additional initialization after __init__ and model_construct.\nThis is useful if you want to do some validation that requires the entire model to be initialized.\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.model_validate_json.html#model_validate_json","title":"model_validate_json","text":"model_validate_json\n\n\n\nclassmethod CsvExcelOutlineFile.model_validate_json(json_data, *, strict=None, context=None, by_alias=None, by_name=None)\n\n!!! abstract “Usage Documentation”\n\n[JSON Parsing](../concepts/json.md#json-parsing)\n\nValidate the given JSON data against the Pydantic model.\n\nParameters\n\njson_data (str | bytes | bytearray) – The JSON data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\nRaises\n\nValidationError – If json_data is not a JSON string or the object could not be validated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.potting_region_copy_data.html#potting_region_copy_data","title":"potting_region_copy_data","text":"potting_region_copy_data\n\n\n\nCopyPottingRegionRequest.potting_region_copy_data: list[PottingRegionCopyData]\n\nData identifying which potting regions to copy and what potting regions to copy from.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.model_parametrized_name.html#model_parametrized_name","title":"model_parametrized_name","text":"model_parametrized_name\n\n\n\nclassmethod PolygonalShape.model_parametrized_name(params)\n\nCompute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nParameters\n\nparams (tuple[type[Any], ...]) – Tuple of types of the class. Given a generic class\nModel with 2 type variables and a concrete model Model[str, int],\nthe value (str, int) would be passed to params.\n\nReturn type\n\nstr\n\nReturns\n\nString representing the new class where params are passed to cls as type variables.\n\nRaises\n\nTypeError – Raised when trying to generate concrete names for non-generic models.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.model_validate_json.html#model_validate_json","title":"model_validate_json","text":"model_validate_json\n\n\n\nclassmethod ICTFixtureProperties.model_validate_json(json_data, *, strict=None, context=None, by_alias=None, by_name=None)\n\n!!! abstract “Usage Documentation”\n\n[JSON Parsing](../concepts/json.md#json-parsing)\n\nValidate the given JSON data against the Pydantic model.\n\nParameters\n\njson_data (str | bytes | bytearray) – The JSON data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\nRaises\n\nValidationError – If json_data is not a JSON string or the object could not be validated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.from_orm.html#from_orm","title":"from_orm","text":"from_orm\n\n\n\nclassmethod GetICTFixturesPropertiesRequest.from_orm(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.model_validate_json.html#model_validate_json","title":"model_validate_json","text":"model_validate_json\n\n\n\nclassmethod PottingRegionDeleteData.model_validate_json(json_data, *, strict=None, context=None, by_alias=None, by_name=None)\n\n!!! abstract “Usage Documentation”\n\n[JSON Parsing](../concepts/json.md#json-parsing)\n\nValidate the given JSON data against the Pydantic model.\n\nParameters\n\njson_data (str | bytes | bytearray) – The JSON data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\nRaises\n\nValidationError – If json_data is not a JSON string or the object could not be validated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.from_orm.html#from_orm","title":"from_orm","text":"from_orm\n\n\n\nclassmethod DeletePottingRegionRequest.from_orm(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.update_forward_refs.html#update_forward_refs","title":"update_forward_refs","text":"update_forward_refs\n\n\n\nclassmethod GetICTFixturesPropertiesRequest.update_forward_refs(**localns)\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.dict.html#dict","title":"dict","text":"dict\n\n\n\nCopperImageFile.dict(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False)\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.model_parametrized_name.html#model_parametrized_name","title":"model_parametrized_name","text":"model_parametrized_name\n\n\n\nclassmethod UpdateICTFixturesRequest.model_parametrized_name(params)\n\nCompute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nParameters\n\nparams (tuple[type[Any], ...]) – Tuple of types of the class. Given a generic class\nModel with 2 type variables and a concrete model Model[str, int],\nthe value (str, int) would be passed to params.\n\nReturn type\n\nstr\n\nReturns\n\nString representing the new class where params are passed to cls as type variables.\n\nRaises\n\nTypeError – Raised when trying to generate concrete names for non-generic models.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.parse_raw.html#parse_raw","title":"parse_raw","text":"parse_raw\n\n\n\nclassmethod SlotShape.parse_raw(b, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.ImageBounds.image_x.html#image_x","title":"image_x","text":"image_x\n\n\n\nImageBounds.image_x\n\nx coordinate of the upper left corner\n\nType\n\nfloat\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.parse_obj.html#parse_obj","title":"parse_obj","text":"parse_obj\n\n\n\nclassmethod CopyPottingRegionRequest.parse_obj(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.analysis.Analysis.get_harmonic_vibe_input_fields.html#get_harmonic_vibe_input_fields","title":"get_harmonic_vibe_input_fields","text":"get_harmonic_vibe_input_fields\n\n\n\nAnalysis.get_harmonic_vibe_input_fields(model_source=None)\n\nGet harmonic vibe property fields based on the user configuration.\n\nAvailable Since: 2024R1\n\nParameters\n\nmodel_source: ModelSource, optional\n\nModel source to get the harmonic vibe property fields from.\nThe default is None.\n\nReturns\n\n:\n\n\n\npython:list[python:str]\n\nHarmonic vibe property fields based on the user configuration.\n\nReturn type\n\nlist[str]\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.analysis.get_harmonic_vibe_input_fields(ModelSource.GENERATED)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.update_forward_refs.html#update_forward_refs","title":"update_forward_refs","text":"update_forward_refs\n\n\n\nclassmethod ICTFixtureProperties.update_forward_refs(**localns)\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.model_construct.html#model_construct","title":"model_construct","text":"model_construct\n\n\n\nclassmethod PCBShape.model_construct(_fields_set=None, **values)\n\nCreates a new instance of the Model class with validated data.\n\nCreates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n\nmodel_construct() generally respects the model_config.extra setting on the provided model.\nThat is, if model_config.extra == ‘allow’, then all extra passed values are added to the model instance’s __dict__\nand __pydantic_extra__ fields. If model_config.extra == ‘ignore’ (the default), then all extra passed values are ignored.\nBecause no validation is performed with a call to model_construct(), having model_config.extra == ‘forbid’ does not result in\nan error if extra values are passed, but they will be ignored.\n\nParameters\n\n_fields_set (set[str] | None) – A set of field names that were originally explicitly set during instantiation. If provided,\nthis is directly used for the [model_fields_set][pydantic.BaseModel.model_fields_set] attribute.\nOtherwise, the field names from the values argument will be used.\n\nvalues (Any) – Trusted or pre-validated data dictionary.\n\nReturn type\n\nSelf\n\nReturns\n\nA new instance of the Model class with validated data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.parse_obj.html#parse_obj","title":"parse_obj","text":"parse_obj\n\n\n\nclassmethod PottingRegionDeleteData.parse_obj(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.model_rebuild.html#model_rebuild","title":"model_rebuild","text":"model_rebuild\n\n\n\nclassmethod RectangularShape.model_rebuild(*, force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace=None)\n\nTry to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nParameters\n\nforce (bool) – Whether to force the rebuilding of the model schema, defaults to False.\n\nraise_errors (bool) – Whether to raise errors, defaults to True.\n\n_parent_namespace_depth (int) – The depth level of the parent namespace, defaults to 2.\n\n_types_namespace (Mapping[str, Any] | None) – The types namespace, defaults to None.\n\nReturn type\n\nbool | None\n\nReturns\n\nReturns None if the schema is already “complete” and rebuilding was not required.\nIf rebuilding _was_ required, returns True if rebuilding was successful, otherwise False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.from_orm.html#from_orm","title":"from_orm","text":"from_orm\n\n\n\nclassmethod UpdateICTFixturesRequest.from_orm(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.model_validate_json.html#model_validate_json","title":"model_validate_json","text":"model_validate_json\n\n\n\nclassmethod UpdateICTFixturesRequest.model_validate_json(json_data, *, strict=None, context=None, by_alias=None, by_name=None)\n\n!!! abstract “Usage Documentation”\n\n[JSON Parsing](../concepts/json.md#json-parsing)\n\nValidate the given JSON data against the Pydantic model.\n\nParameters\n\njson_data (str | bytes | bytearray) – The JSON data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\nRaises\n\nValidationError – If json_data is not a JSON string or the object could not be validated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.dict.html#dict","title":"dict","text":"dict\n\n\n\nCopyPottingRegionRequest.dict(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False)\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.copy.html#copy","title":"copy","text":"copy\n\n\n\nPolygonalShape.copy(*, include=None, exclude=None, update=None, deep=False)\n\nReturns a copy of the model.\n\n!!! warning “Deprecated”\n\nThis method is now deprecated; use model_copy instead.\n\nIf you need include or exclude, use:\n\n`python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n`\n\nParameters\n\ninclude – Optional set or mapping specifying which fields to include in the copied model.\n\nexclude – Optional set or mapping specifying which fields to exclude in the copied model.\n\nupdate – Optional dictionary of field-value pairs to override field values in the copied model.\n\ndeep – If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns\n\nA copy of the model with included, excluded and updated fields as specified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.model_rebuild.html#model_rebuild","title":"model_rebuild","text":"model_rebuild\n\n\n\nclassmethod UpdateTestPointsRequest.model_rebuild(*, force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace=None)\n\nTry to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nParameters\n\nforce (bool) – Whether to force the rebuilding of the model schema, defaults to False.\n\nraise_errors (bool) – Whether to raise errors, defaults to True.\n\n_parent_namespace_depth (int) – The depth level of the parent namespace, defaults to 2.\n\n_types_namespace (Mapping[str, Any] | None) – The types namespace, defaults to None.\n\nReturn type\n\nbool | None\n\nReturns\n\nReturns None if the schema is already “complete” and rebuilding was not required.\nIf rebuilding _was_ required, returns True if rebuilding was successful, otherwise False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.model_copy.html#model_copy","title":"model_copy","text":"model_copy\n\n\n\nPottingRegionUpdateData.model_copy(*, update=None, deep=False)\n\n!!! abstract “Usage Documentation”\n\n[model_copy](../concepts/serialization.md#model_copy)\n\nReturns a copy of the model.\n\n!!! note\n\nThe underlying instance’s [__dict__][object.__dict__] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property]).\n\nParameters\n\nupdate (Mapping[str, Any] | None) – Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\n\ndeep (bool) – Set to True to make a deep copy of the model.\n\nReturn type\n\nSelf\n\nReturns\n\nNew model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.center_x.html#center_x","title":"center_x","text":"center_x\n\n\n\nCircularShape.center_x: float\n\nfloat\n\nType\n\nX coordinate of center\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.model_extra.html#model_extra","title":"model_extra","text":"model_extra\n\n\n\nproperty RectangularShape.model_extra: dict[str, Any] | None\n\nGet extra fields set during validation.\n\nReturns\n\nA dictionary of extra fields, or None if config.extra is not set to “allow”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.analysis.Analysis.get_ict_analysis_input_fields.html#get_ict_analysis_input_fields","title":"get_ict_analysis_input_fields","text":"get_ict_analysis_input_fields\n\n\n\nAnalysis.get_ict_analysis_input_fields()\n\nGet ICT analysis property fields based on the user configuration.\n\nAvailable Since: 2024R1\n\nReturns\n\n:\n\n\n\npython:list[python:str]\n\nICT analysis property fields based on the user configuration.\nNone if not connected to Sherlock.\n\nReturn type\n\nlist[str]\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.analysis.get_ict_analysis_input_fields()\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.model_json_schema.html#model_json_schema","title":"model_json_schema","text":"model_json_schema\n\n\n\nclassmethod CircularShape.model_json_schema(by_alias=True, ref_template='#/$defs/{model}', schema_generator=<class 'pydantic.json_schema.GenerateJsonSchema'>, mode='validation')\n\nGenerates a JSON schema for a model class.\n\nParameters\n\nby_alias (bool) – Whether to use attribute aliases or not.\n\nref_template (str) – The reference template.\n\nschema_generator (type[GenerateJsonSchema]) – To override the logic used to generate the JSON schema, as a subclass of\nGenerateJsonSchema with your desired modifications\n\nmode (Literal['validation', 'serialization']) – The mode in which to generate the schema.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nThe JSON schema for the given model class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.parts.Parts.export_net_list.html#export_net_list","title":"export_net_list","text":"export_net_list\n\n\n\nParts.export_net_list(project, cca_name, output_file, col_delimiter=0, overwrite_existing=False, utf8_enabled=False)\n\nExport a net list to a delimited output file.\n\nAvailable Since: 2024R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\noutput_file: str\n\nFull path for the output file where the net list will be written.\n\ncol_delimiter: TableDelimiter, optional\n\nThe delimiter character to be used. Defaults to TableDelimiter.COMMA.\n\noverwrite_existing: bool, optional\n\nFlag to determine if existing .CSV files should be overwritten\nif they match the output_file. Defaults to False.\n\nutf8_enabled: bool, optional\n\nFlag that specifies if UTF-8 will be used for .CSV files. Defaults to False.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.parts.export_net_list(\n    \"Test\",\n    \"Card\",\n    \"Net List.csv\",\n    col_delimiter=TableDelimiter.TAB,\n    overwrite_existing=True,\n    utf8_enabled=True\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.project.html#project","title":"project","text":"project\n\n\n\nCopyPottingRegionRequest.project: str\n\nName of the project containing the potting region(s) to be copied.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.schema_json.html#schema_json","title":"schema_json","text":"schema_json\n\n\n\nclassmethod DeletePottingRegionRequest.schema_json(*, by_alias=True, ref_template='#/$defs/{model}', **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.polygon.html#polygon","title":"polygon","text":"polygon\n\n\n\nICTFixtureProperties.polygon: str\n\nCoordinates of points\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.model_fields_set.html#model_fields_set","title":"model_fields_set","text":"model_fields_set\n\n\n\nproperty PottingRegion.model_fields_set: set[str]\n\nReturns the set of fields that have been explicitly set on this model instance.\n\nReturns\n\nA set of strings representing the fields that have been set,\n\ni.e. that were not filled from defaults.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.layer.Layer.update_test_points_by_file.html#update_test_points_by_file","title":"update_test_points_by_file","text":"update_test_points_by_file\n\n\n\nLayer.update_test_points_by_file(project, cca_name, file_path)\n\nUpdate test point properties of a CCA from a CSV file.\n\nAvailable Since: 2023R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nfile_path: str\n\nPath for the CSV file with the test point properties.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n>>>     \"ODB++ Tutorial.tgz\",\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     project=\"Test\",\n>>>     cca_name=\"Card\",\n>>> )\n>>> sherlock.layer.update_test_points_by_file(\n>>>     \"Test\",\n>>>     \"Card\",\n>>>     \"TestPointsImport.csv\"\n>>> )\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.model_validate_strings.html#model_validate_strings","title":"model_validate_strings","text":"model_validate_strings\n\n\n\nclassmethod PCBShape.model_validate_strings(obj, *, strict=None, context=None, by_alias=None, by_name=None)\n\nValidate the given object with string data against the Pydantic model.\n\nParameters\n\nobj (Any) – The object containing string data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.project.html#project","title":"project","text":"project\n\n\n\nUpdatePottingRegionRequest.project: str\n\nName of the Sherlock project.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.project.Project.generate_project_report.html#generate_project_report","title":"generate_project_report","text":"generate_project_report\n\n\n\nProject.generate_project_report(project, author, company, report_file)\n\nGenerate a project report.\n\nAvailable Since: 2021R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\nauthor: str\n\nName of the author who is generating the report.\n\ncompany: str\n\nName of the author’s company.\n\nreport_file: str\n\nFull path to where to create the report.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\"ODB++ Tutorial.tgz\", True, True,\n                        True, True,\n                        project=\"Tutorial\",\n                        cca_name=\"Card\")\n>>> sherlock.project.generate_project_report(\n    \"Tutorial\",\n    \"John Doe\",\n    \"Example\",\n    \"Project Report.pdf\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.model_post_init.html#model_post_init","title":"model_post_init","text":"model_post_init\n\n\n\nPottingRegion.model_post_init(context, /)\n\nOverride this method to perform additional initialization after __init__ and model_construct.\nThis is useful if you want to do some validation that requires the entire model to be initialized.\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.parse_raw.html#parse_raw","title":"parse_raw","text":"parse_raw\n\n\n\nclassmethod TestPointProperties.parse_raw(b, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.model_post_init.html#model_post_init","title":"model_post_init","text":"model_post_init\n\n\n\nRectangularShape.model_post_init(context, /)\n\nOverride this method to perform additional initialization after __init__ and model_construct.\nThis is useful if you want to do some validation that requires the entire model to be initialized.\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.schema.html#schema","title":"schema","text":"schema\n\n\n\nclassmethod DeletePottingRegionRequest.schema(by_alias=True, ref_template='#/$defs/{model}')\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.dict.html#dict","title":"dict","text":"dict\n\n\n\nUpdatePottingRegionRequest.dict(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False)\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.from_orm.html#from_orm","title":"from_orm","text":"from_orm\n\n\n\nclassmethod CopperImageFile.from_orm(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.schema_json.html#schema_json","title":"schema_json","text":"schema_json\n\n\n\nclassmethod RectangularShape.schema_json(*, by_alias=True, ref_template='#/$defs/{model}', **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.y.html#y","title":"y","text":"y\n\n\n\nICTFixtureProperties.y: str\n\nCenter Y\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.model_dump.html#model_dump","title":"model_dump","text":"model_dump\n\n\n\nRectangularShape.model_dump(*, mode='python', include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump](../concepts/serialization.md#modelmodel_dump)\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nParameters\n\nmode (Union[Literal['json', 'python'], str]) – The mode in which to_python should run.\nIf mode is ‘json’, the output will only contain JSON serializable types.\nIf mode is ‘python’, the output may contain non-JSON-serializable Python objects.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to include in the output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to exclude from the output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to use the field’s alias in the dictionary key if defined.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nA dictionary representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.update_forward_refs.html#update_forward_refs","title":"update_forward_refs","text":"update_forward_refs\n\n\n\nclassmethod CsvExcelOutlineFile.update_forward_refs(**localns)\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_all_test_points.html#export-all-test-points","title":"Export All Test Points","text":"Export All Test Points\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nand export all test points for a CCA."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_all_test_points.html#description","title":"Export All Test Points > Description","text":"Description\n\nSherlock’s gRPC API enables users to automate various workflows, including exporting all\ntest points for a CCA.\nThis script demonstrates how to:\n\nConnect to the Sherlock service.\n\nImport a tutorial project.\n\nExport all test points to a CSV file."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_all_test_points.html#connect-to-sherlock","title":"Export All Test Points > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_all_test_points.html#delete-project","title":"Export All Test Points > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_all_test_points.html#import-tutorial-project","title":"Export All Test Points > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive provided with the Sherlock installation."},{"objectID":"Home","href":"examples/gallery_examples/03-exporting/export_all_test_points.html#export-all-test-points","title":"Export All Test Points","text":"Export All Test Points\n\nExport all test points for the “Main Board” to a CSV file.\n\n\n\nDownload Jupyter notebook: export_all_test_points.ipynb\n\nDownload Python source code: export_all_test_points.py\n\nDownload zipped: export_all_test_points.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.layer.Layer.get_test_point_props.html#get_test_point_props","title":"get_test_point_props","text":"get_test_point_props\n\n\n\nLayer.get_test_point_props(request)\n\nReturn the properties for each test point given a comma-separated list of test point IDs.\n\nAvailable Since: 2026R1\n\nParameters\n\nrequest: GetTestPointPropertiesRequest\n\nContains all the information needed to return the properties for one or more test\npoints.\n\nReturns\n\n:\n\n\n\npython:list[SherlockCommonService_pb2.GetTestPointPropertiesResponse]\n\nProperties for each test point that correspond to the reference designators.\n\nReturn type\n\nlist[GetTestPointPropertiesResponse]\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> from ansys.sherlock.core.types.layer_types import GetTestPointPropertiesRequest\n>>> sherlock = launch_sherlock()\n>>> request = layer_types.GetTestPointPropertiesRequest(\n>>>    project = \"Test Point Test Project\"\n>>>    cca_name = \"Main Board\"\n>>>    test_point_ids = \"TP1,TP2\"\n>>> )\n>>> responses = layer.get_test_point_props(request)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.validate.html#validate","title":"validate","text":"validate\n\n\n\nclassmethod ICTFixtureProperties.validate(value)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.load_units.html#load_units","title":"load_units","text":"load_units\n\n\n\nTestPointProperties.load_units: str\n\nLoad units\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.cca_name.html#cca_name","title":"cca_name","text":"cca_name\n\n\n\nPottingRegionCopyData.cca_name: str\n\nName of the cca.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.model_json_schema.html#model_json_schema","title":"model_json_schema","text":"model_json_schema\n\n\n\nclassmethod PolygonalShape.model_json_schema(by_alias=True, ref_template='#/$defs/{model}', schema_generator=<class 'pydantic.json_schema.GenerateJsonSchema'>, mode='validation')\n\nGenerates a JSON schema for a model class.\n\nParameters\n\nby_alias (bool) – Whether to use attribute aliases or not.\n\nref_template (str) – The reference template.\n\nschema_generator (type[GenerateJsonSchema]) – To override the logic used to generate the JSON schema, as a subclass of\nGenerateJsonSchema with your desired modifications\n\nmode (Literal['validation', 'serialization']) – The mode in which to generate the schema.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nThe JSON schema for the given model class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.update_forward_refs.html#update_forward_refs","title":"update_forward_refs","text":"update_forward_refs\n\n\n\nclassmethod PottingRegionCopyData.update_forward_refs(**localns)\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.model_fields.html#model_fields","title":"model_fields","text":"model_fields\n\n\n\nCopperFile.model_fields = {'cca': FieldInfo(annotation=List[str], required=False, default=[]), 'copper_layer': FieldInfo(annotation=str, required=True), 'file_comment': FieldInfo(annotation=Union[str, NoneType], required=False, default=''), 'file_name': FieldInfo(annotation=str, required=True), 'file_type': FieldInfo(annotation=Union[int, NoneType], required=False, default=0), 'gerber_file': FieldInfo(annotation=Union[CopperGerberFile, NoneType], required=False, default=None), 'image_file': FieldInfo(annotation=Union[CopperImageFile, NoneType], required=False, default=None), 'layer_snapshot_enabled': FieldInfo(annotation=Union[bool, NoneType], required=False, default=False), 'polarity': FieldInfo(annotation=Union[int, NoneType], required=False, default=0)}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.model.Model.export_aedb.html#export_aedb","title":"export_aedb","text":"export_aedb\n\n\n\nModel.export_aedb(project_name, cca_name, export_file, overwrite=True, display_model=False)\n\nExport an Electronics Desktop model.\n\nAvailable Since: 2024R2\n\nParameters\n\nproject_name: str\n\nName of the Sherlock project to generate the EDB model for.\n\ncca_name: str\n\nName of the CCA to generate the EDB model from.\n\nexport_file: str\n\nDirectory for saving exported model to.\n\noverwrite: bool, optional\n\nWhether to overwrite an existing file having the same file name.\nThe default is True.\n\ndisplay_model: bool, optional\n\nWhether to launch and display the exported model in Ansys Electronics\nDesktop once the export finishes. The default is False.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core import launcher\n>>> from ansys.sherlock.core import model\n>>> sherlock = launcher.launch_sherlock()\n>>> sherlock.model.export_aedb(\n    'Tutorial Project', 'Main Board', 'c:\\Temp\\export.aedb',\n    True, False)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.optional_str_validation.html#optional_str_validation","title":"optional_str_validation","text":"optional_str_validation\n\n\n\nclassmethod GetTestPointPropertiesRequest.optional_str_validation(value, info)\n\nAllow the test_point_ids to not be set, i.e., None.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.model_fields.html#model_fields","title":"model_fields","text":"model_fields\n\n\n\nGerberOutlineFile.model_fields = {'parse_decimal_first': FieldInfo(annotation=bool, required=False, default=False)}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.y_location_column.html#y_location_column","title":"y_location_column","text":"y_location_column\n\n\n\nCsvExcelOutlineFile.y_location_column: str\n\nY location column name\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.schema.html#schema","title":"schema","text":"schema\n\n\n\nclassmethod ICTFixtureProperties.schema(by_alias=True, ref_template='#/$defs/{model}')\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.model_extra.html#model_extra","title":"model_extra","text":"model_extra\n\n\n\nproperty UpdateICTFixturesRequest.model_extra: dict[str, Any] | None\n\nGet extra fields set during validation.\n\nReturns\n\nA dictionary of extra fields, or None if config.extra is not set to “allow”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/get_random_vibe_inputs_fields.html#get-random-vibration-analysis-inputs","title":"Get Random Vibration Analysis inputs","text":"Get Random Vibration Analysis inputs\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nand retrieve the analysis input fields."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/get_random_vibe_inputs_fields.html#description","title":"Get Random Vibration Analysis inputs > Description","text":"Description\n\nSherlock provides the ability to run a random vibration analysis using its gRPC interface.\nThis script demonstrates how to:\n- Connect to the Sherlock service.\n- Retrieve the input fields required for random vibration analysis.\n\nThis example assumes you have already set up Sherlock and the necessary environment.\n\nFor more details on vibration analysis in Sherlock, refer to the official documentation."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/get_random_vibe_inputs_fields.html#connect-to-sherlock","title":"Get Random Vibration Analysis inputs > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/get_random_vibe_inputs_fields.html#get-random-vibration-input-fields","title":"Get Random Vibration Analysis inputs > Get Random Vibration Input Fields","text":"Get Random Vibration Input Fields\n\nRetrieve the list of input fields for the random vibration analysis.\n\n\n\nDownload Jupyter notebook: get_random_vibe_inputs_fields.ipynb\n\nDownload Python source code: get_random_vibe_inputs_fields.py\n\nDownload zipped: get_random_vibe_inputs_fields.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.validate_non_empty_cca_names.html#validate_non_empty_cca_names","title":"validate_non_empty_cca_names","text":"validate_non_empty_cca_names\n\n\n\nclassmethod OutlineFile.validate_non_empty_cca_names(value, info)\n\nValidate cca_names contains at least one name and none are empty.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.parse_raw.html#parse_raw","title":"parse_raw","text":"parse_raw\n\n\n\nclassmethod PottingRegionCopyData.parse_raw(b, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.model_construct.html#model_construct","title":"model_construct","text":"model_construct\n\n\n\nclassmethod GetTestPointPropertiesRequest.model_construct(_fields_set=None, **values)\n\nCreates a new instance of the Model class with validated data.\n\nCreates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n\nmodel_construct() generally respects the model_config.extra setting on the provided model.\nThat is, if model_config.extra == ‘allow’, then all extra passed values are added to the model instance’s __dict__\nand __pydantic_extra__ fields. If model_config.extra == ‘ignore’ (the default), then all extra passed values are ignored.\nBecause no validation is performed with a call to model_construct(), having model_config.extra == ‘forbid’ does not result in\nan error if extra values are passed, but they will be ignored.\n\nParameters\n\n_fields_set (set[str] | None) – A set of field names that were originally explicitly set during instantiation. If provided,\nthis is directly used for the [model_fields_set][pydantic.BaseModel.model_fields_set] attribute.\nOtherwise, the field names from the values argument will be used.\n\nvalues (Any) – Trusted or pre-validated data dictionary.\n\nReturn type\n\nSelf\n\nReturns\n\nA new instance of the Model class with validated data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.copy.html#copy","title":"copy","text":"copy\n\n\n\nUpdateICTFixturesRequest.copy(*, include=None, exclude=None, update=None, deep=False)\n\nReturns a copy of the model.\n\n!!! warning “Deprecated”\n\nThis method is now deprecated; use model_copy instead.\n\nIf you need include or exclude, use:\n\n`python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n`\n\nParameters\n\ninclude – Optional set or mapping specifying which fields to include in the copied model.\n\nexclude – Optional set or mapping specifying which fields to exclude in the copied model.\n\nupdate – Optional dictionary of field-value pairs to override field values in the copied model.\n\ndeep – If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns\n\nA copy of the model with included, excluded and updated fields as specified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/get_parts_list_analysis_props.html#update-part-list-validation-analysis","title":"Update Part List Validation Analysis","text":"Update Part List Validation Analysis\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nupdate part list validation analysis properties, and retrieve those properties."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/get_parts_list_analysis_props.html#description","title":"Update Part List Validation Analysis > Description","text":"Description\n\nSherlock’s gRPC API allows users to automate workflows such as validating and updating part list\nanalysis properties for CCAs.\nThis script shows how to:\n- Connect to the Sherlock service.\n- Import a project.\n- Retrieve and print the updated part list validation analysis properties.\n\nThe retrieved analysis properties can be used for further validation or integration\nwith other software tools."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/get_parts_list_analysis_props.html#connect-to-sherlock","title":"Update Part List Validation Analysis > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/get_parts_list_analysis_props.html#delete-project","title":"Update Part List Validation Analysis > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/get_parts_list_analysis_props.html#import-tutorial-project","title":"Update Part List Validation Analysis > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/get_parts_list_analysis_props.html#get-part-list-validation-analysis-properties","title":"Update Part List Validation Analysis > Get Part List Validation Analysis Properties","text":"Get Part List Validation Analysis Properties\n\nRetrieve the updated part list validation analysis properties.\n\n\n\nDownload Jupyter notebook: get_parts_list_analysis_props.ipynb\n\nDownload Python source code: get_parts_list_analysis_props.py\n\nDownload zipped: get_parts_list_analysis_props.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.model_dump.html#model_dump","title":"model_dump","text":"model_dump\n\n\n\nUpdatePottingRegionRequest.model_dump(*, mode='python', include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump](../concepts/serialization.md#modelmodel_dump)\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nParameters\n\nmode (Union[Literal['json', 'python'], str]) – The mode in which to_python should run.\nIf mode is ‘json’, the output will only contain JSON serializable types.\nIf mode is ‘python’, the output may contain non-JSON-serializable Python objects.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to include in the output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to exclude from the output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to use the field’s alias in the dictionary key if defined.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nA dictionary representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.model_rebuild.html#model_rebuild","title":"model_rebuild","text":"model_rebuild\n\n\n\nclassmethod DeletePottingRegionRequest.model_rebuild(*, force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace=None)\n\nTry to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nParameters\n\nforce (bool) – Whether to force the rebuilding of the model schema, defaults to False.\n\nraise_errors (bool) – Whether to raise errors, defaults to True.\n\n_parent_namespace_depth (int) – The depth level of the parent namespace, defaults to 2.\n\n_types_namespace (Mapping[str, Any] | None) – The types namespace, defaults to None.\n\nReturn type\n\nbool | None\n\nReturns\n\nReturns None if the schema is already “complete” and rebuilding was not required.\nIf rebuilding _was_ required, returns True if rebuilding was successful, otherwise False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.model_copy.html#model_copy","title":"model_copy","text":"model_copy\n\n\n\nPottingRegionCopyData.model_copy(*, update=None, deep=False)\n\n!!! abstract “Usage Documentation”\n\n[model_copy](../concepts/serialization.md#model_copy)\n\nReturns a copy of the model.\n\n!!! note\n\nThe underlying instance’s [__dict__][object.__dict__] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property]).\n\nParameters\n\nupdate (Mapping[str, Any] | None) – Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\n\ndeep (bool) – Set to True to make a deep copy of the model.\n\nReturn type\n\nSelf\n\nReturns\n\nNew model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.copy.html#copy","title":"copy","text":"copy\n\n\n\nUpdatePottingRegionRequest.copy(*, include=None, exclude=None, update=None, deep=False)\n\nReturns a copy of the model.\n\n!!! warning “Deprecated”\n\nThis method is now deprecated; use model_copy instead.\n\nIf you need include or exclude, use:\n\n`python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n`\n\nParameters\n\ninclude – Optional set or mapping specifying which fields to include in the copied model.\n\nexclude – Optional set or mapping specifying which fields to exclude in the copied model.\n\nupdate – Optional dictionary of field-value pairs to override field values in the copied model.\n\ndeep – If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns\n\nA copy of the model with included, excluded and updated fields as specified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.from_orm.html#from_orm","title":"from_orm","text":"from_orm\n\n\n\nclassmethod OutlineFile.from_orm(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.json.html#json","title":"json","text":"json\n\n\n\nPCBShape.json(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.lifecycle.Lifecycle.add_harmonic_event.html#add_harmonic_event","title":"add_harmonic_event","text":"add_harmonic_event\n\n\n\nLifecycle.add_harmonic_event(project, phase_name, event_name, duration, duration_units, num_of_cycles, cycle_type, sweep_rate, orientation, profile_type, load_direction, description='')\n\nAdd a harmonic event to a life cycle phase.\n\nAvailable Since: 2021R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\nphase_name: str\n\nName of the life cycle phase to add the harmonic event to.\n\nevent_name: str\n\nName of the harmonic event.\n\nduration: float\n\nEvent duration length.\n\nduration_units: str\n\nEvent duration units. Options are \"ms\", \"sec\", \"min\",\n\"hr\", \"day\", and \"year\".\n\nnum_of_cycles: float\n\nNumber of cycles for the harmonic event.\n\ncycle_type: str\n\nCycle type. Options are \"COUNT\", \"DUTY_CYCLE\", \"PER_YEAR\",\n\"PER_DAY\", \"PER_HOUR\", \"PER_MIN\", and \"PER_SEC\".\n\nsweep_rate: float\n\nSweep rate for the harmonic event.\n\norientation: str\n\nPCB orientation in the format of \"azimuth, elevation\". For example,\n\"30,15\".\n\nprofile_type: str\n\nProfile type of the harmonic load. Options are \"Uniaxial\" and \"Triaxial\".\n\nload_direction: str\n\nLoad direction in the format of \"x,y,z\". For example, \"0,0,1\".\n\ndescription: str, optional\n\nDescription of the harmonic event. The default is \"\".\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\"\n)\n>>> sherlock.lifecycle.create_life_phase(\n    \"Test\",\n    \"Example\",\n    1.5,\n    \"year\",\n    4.0,\n    \"COUNT\",\n)\n>>> sherlock.lifecycle.add_harmonic_event(\n    \"Test\",\n    \"Example\",\n    \"Event1\",\n    1.5,\n    \"sec\",\n    4.0,\n    \"PER MIN\",\n    5,\n    \"45,45\",\n    \"Uniaxial\",\n    \"2,4,5\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.schema.html#schema","title":"schema","text":"schema\n\n\n\nclassmethod UpdateTestPointsRequest.schema(by_alias=True, ref_template='#/$defs/{model}')\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.model_rebuild.html#model_rebuild","title":"model_rebuild","text":"model_rebuild\n\n\n\nclassmethod UpdatePottingRegionRequest.model_rebuild(*, force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace=None)\n\nTry to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nParameters\n\nforce (bool) – Whether to force the rebuilding of the model schema, defaults to False.\n\nraise_errors (bool) – Whether to raise errors, defaults to True.\n\n_parent_namespace_depth (int) – The depth level of the parent namespace, defaults to 2.\n\n_types_namespace (Mapping[str, Any] | None) – The types namespace, defaults to None.\n\nReturn type\n\nbool | None\n\nReturns\n\nReturns None if the schema is already “complete” and rebuilding was not required.\nIf rebuilding _was_ required, returns True if rebuilding was successful, otherwise False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.parts.Parts.delete_parts_from_parts_list.html#delete_parts_from_parts_list","title":"delete_parts_from_parts_list","text":"delete_parts_from_parts_list\n\n\n\nParts.delete_parts_from_parts_list(request)\n\nDelete parts from the parts list for a given project’s CCA.\n\nParameters\n\nrequest: DeletePartsFromPartsListRequest\n\nContains all the information needed to delete parts from the\nparts list in a project’s CCA.\n\nReturns\n\n:\n\n\n\npython:list[SherlockPartsService_pb2.DeletePartsFromPartsListResponse]\n\nStatus of the delete operation and any error messages.\n\nReturn type\n\nlist[DeletePartsFromPartsListResponse]\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> from ansys.sherlock.core.types.parts_types import (\n        DeletePartsFromPartsListRequest,\n    )\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_project_zip_archive(\n        project=\"Assembly Tutorial\",\n        category=\"category\",\n        archive_file=\\\n            \"C:\\\\Program Files\\\\ANSYS Inc\\\\v252\\\\sherlock\\\\tutorial\\\\Assembly Tutorial.zip\",\n    )\n>>> request = DeletePartsFromPartsListRequest(\n        project=\"Assembly Tutorial\",\n        cca_name=\"Main Board\",\n        reference_designators=[\"U1\", \"R2\", \"C3\"],\n    )\n>>> response = sherlock.parts.delete_parts_from_parts_list(request)\n>>> for res in response:\n        print(f\"Return code: value={res.returnCode.value},\n        message={res.returnCode.message}, \"\n            f\"reference designator={res.reference_designators}\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.schema.html#schema","title":"schema","text":"schema\n\n\n\nclassmethod TestPointProperties.schema(by_alias=True, ref_template='#/$defs/{model}')\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.construct.html#construct","title":"construct","text":"construct\n\n\n\nclassmethod CopperImageFile.construct(_fields_set=None, **values)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.lifecycle.Lifecycle.import_thermal_signal.html#import_thermal_signal","title":"import_thermal_signal","text":"import_thermal_signal\n\n\n\nLifecycle.import_thermal_signal(request)\n\nImport a thermal signal to a life cycle phase.\n\nAvailable Since: 2026R1\n\nParameters\n\nrequest: ImportThermalSignalRequest\n\nRequest object containing the information needed to import a thermal signal.\n\nReturns\n\n:\n\n\n\nSherlockCommonService_pb2.ReturnCode\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nReturnCode\n\nExamples\n\n>>> from ansys.sherlock.core.types.lifecycle_types import ImportThermalSignalRequest\n>>> from ansys.sherlock.core.types.lifecycle_types import ThermalSignalFileProperties\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> response = sherlock.lifecycle.import_thermal_signal(\n>>> ImportThermalSignalRequest(\n>>>         file_name=\"/path/to/thermal_signal_file.csv\",\n>>>         project=\"TestProject\",\n>>>         thermal_signal_file_properties=ThermalSignalFileProperties(\n>>>             header_row_count=0,\n>>>             numeric_format=\"English\",\n>>>             column_delimiter=\",\",\n>>>             time_column=\"Time\",\n>>>             time_units=\"sec\",\n>>>             temperature_column=\"Temperature\",\n>>>             temperature_units=\"C\"\n>>>         ),\n>>>         phase_name=phaseName,\n>>>         time_removal= False,\n>>>         load_range_percentage=0.25,\n>>>         number_of_range_bins=0,\n>>>         number_of_mean_bins=0,\n>>>         number_of_dwell_bins=0,\n>>>         temperature_range_filtering_limit=0.0,\n>>>         time_filtering_limit=72.0,\n>>>         time_filtering_limit_units=\"hr\",\n>>>         generated_cycles_label=\"Second Generated Cycles from Python\",\n>>>     )\n>>> )\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.model.Model.exportTraceModel.html#exporttracemodel","title":"exportTraceModel","text":"exportTraceModel\n\n\n\nModel.exportTraceModel(layer_params)\n\nExport a trace model to a specified output file.\n\nAvailable Since: 2024R2\n\nParameters\n\nlayer_params\n\npython:list[bool | python:int | python:float | python:str]\n\nlist of parameters for export a trace model of a single copper layer.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.types.analysis_types import ElementOrder\n>>> from ansys.sherlock.core import launcher\n>>> from ansys.api.sherlock.v0 import SherlockModelService_pb2\n>>> sherlock, ansys_install_path = launcher.launch_and_connect()\n>>> list_of_params_for_layers = []\n>>> list_of_params_for_layers.append(\n>>>     sherlock.model.createExportTraceCopperLayerParams(\n>>>         project_name=\"Tutorial Project\",\n>>>         cca_name=\"Main Board\",\n>>>         output_file_path=\".\\\\outputfile_path.stp\",\n>>>         copper_layer=\"copper-01.odb\",\n>>>         overwrite=True,\n>>>         display_after=False,\n>>>         clear_FEA_database=False,\n>>>         use_FEA_model_ID=False,\n>>>         coord_units=\"mm\",\n>>>         mesh_type=SherlockModelService_pb2.MeshType.NONE,\n>>>         is_modeling_region_enabled=False,\n>>>         trace_output_type=SherlockModelService_pb2.TraceOutputType.ALL_REGIONS,\n>>>         element_order=ElementOrder.LINEAR,\n>>>         max_mesh_size=1.0,\n>>>         max_mesh_size_units=\"mm\",\n>>>         max_holes_per_trace=2,\n>>>         is_drill_hole_modeling_enabled=False,\n>>>         drill_hole_min_diameter=1.0,\n>>>         drill_hole_min_diameter_units=\"mm\",\n>>>         drill_hole_max_edge_length=1.0,\n>>>         drill_hole_max_edge_length_units=\"mm\",\n>>>     )\n>>> )\n>>> sherlock.model.exportTraceModel(list_of_params_for_layers)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.model_rebuild.html#model_rebuild","title":"model_rebuild","text":"model_rebuild\n\n\n\nclassmethod CircularShape.model_rebuild(*, force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace=None)\n\nTry to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nParameters\n\nforce (bool) – Whether to force the rebuilding of the model schema, defaults to False.\n\nraise_errors (bool) – Whether to raise errors, defaults to True.\n\n_parent_namespace_depth (int) – The depth level of the parent namespace, defaults to 2.\n\n_types_namespace (Mapping[str, Any] | None) – The types namespace, defaults to None.\n\nReturn type\n\nbool | None\n\nReturns\n\nReturns None if the schema is already “complete” and rebuilding was not required.\nIf rebuilding _was_ required, returns True if rebuilding was successful, otherwise False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.json.html#json","title":"json","text":"json\n\n\n\nPottingRegionDeleteData.json(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.lifecycle.Lifecycle.add_random_vibe_event.html#add_random_vibe_event","title":"add_random_vibe_event","text":"add_random_vibe_event\n\n\n\nLifecycle.add_random_vibe_event(project, phase_name, event_name, duration, duration_units, num_of_cycles, cycle_type, orientation, profile_type, load_direction, description='')\n\nAdd a random vibe event to a life cycle phase.\n\nAvailable Since: 2021R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\nphase_name: str\n\nName of the life cycle phase to add the random vibe event to.\n\nevent_name: str\n\nName of the random vibe event.\n\nduration: float\n\nEvent duration length.\n\nduration_units: str\n\nEvent duration units. Options are \"ms\", \"sec\", \"min\",\n\"hr\", \"day\", and \"year\".\n\nnum_of_cycles: float\n\nNumber of cycles for the random vibe event.\n\ncycle_type: str\n\nCycle type. Options are \"COUNT\", \"DUTY_CYCLE\", \"PER_YEAR\",\n\"PER_DAY\", \"PER_HOUR\", \"PER_MIN\", and \"PER_SEC\".\n\norientation: str\n\nPCB orientation in the format of \"azimuth, elevation\". For example,\n\"30,15\".\n\nprofile_type: str\n\nRandom load profile type. The only option is \"Uniaxial\".\n\nload_direction: str\n\nLoad direction in the format of \"x,y,z\". For example, \"0,0,1\".\n\ndescription: str, optional\n\nDescription of the random vibe event. The default is \"\".\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n)\n>>> sherlock.lifecycle.create_life_phase(\n    \"Test\",\n    \"Example\",\n    1.5,\n    \"sec\",\n    4.0,\n    \"COUNT\",\n)\n>>> sherlock.lifecycle.add_random_vibe_event(\n    \"Test\",\n    \"Example\",\n    \"Event1\",\n    1.5,\n    \"sec\",\n    4.0,\n    \"PER MIN\",\n    \"45,45\",\n    \"Uniaxial\",\n    \"2,4,5\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.model_dump_json.html#model_dump_json","title":"model_dump_json","text":"model_dump_json\n\n\n\nPottingRegionCopyData.model_dump_json(*, indent=None, include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump_json](../concepts/serialization.md#modelmodel_dump_json)\n\nGenerates a JSON representation of the model using Pydantic’s to_json method.\n\nParameters\n\nindent (int | None) – Indentation to use in the JSON output. If None is passed, the output will be compact.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to include in the JSON output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to exclude from the JSON output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to serialize using field aliases.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\nstr\n\nReturns\n\nA JSON string representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.model_fields.html#model_fields","title":"model_fields","text":"model_fields\n\n\n\nCopperImageFile.model_fields = {'image_color': FieldInfo(annotation=Union[str, NoneType], required=False, default=''), 'image_type': FieldInfo(annotation=Union[int, NoneType], required=False, default=0)}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.model_validate_strings.html#model_validate_strings","title":"model_validate_strings","text":"model_validate_strings\n\n\n\nclassmethod ICTFixtureProperties.model_validate_strings(obj, *, strict=None, context=None, by_alias=None, by_name=None)\n\nValidate the given object with string data against the Pydantic model.\n\nParameters\n\nobj (Any) – The object containing string data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.BoardBounds.bounds.html#bounds","title":"bounds","text":"bounds\n\n\n\nBoardBounds.bounds\n\nbounds (two tuples of the form (x, y)\n\nType\n\nlist[tuple[float, float]]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.update_forward_refs.html#update_forward_refs","title":"update_forward_refs","text":"update_forward_refs\n\n\n\nclassmethod PottingRegionDeleteData.update_forward_refs(**localns)\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.lifecycle.Lifecycle.create_life_phase.html#create_life_phase","title":"create_life_phase","text":"create_life_phase\n\n\n\nLifecycle.create_life_phase(project, phase_name, duration, duration_units, num_of_cycles, cycle_type, description='')\n\nCreate a life phase.\n\nAvailable Since: 2021R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\nphase_name: str\n\nName of the life phase.\n\nduration: float\n\nEvent duration length.\n\nduration_units: str\n\nUnits for the event duration length. Options are \"ms\",\n\"sec\", and \"min\".\n\nnum_of_cycles: float\n\nNumber of cycles for the life phase.\n\ncycle_type: str\n\nCycle type. Options include \"COUNT\", \"DUTY CYCLE\",\n\"PER YEAR\", and \"PER HOUR\".\n\ndescription: str, optional\n\nDescription of the life phase. The default is \"\".\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n)\n>>> sherlock.lifecycle.create_life_phase(\n    \"Test\",\n    \"Example\",\n    1.5,\n    \"sec\",\n    4.0,\n    \"COUNT\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.validate.html#validate","title":"validate","text":"validate\n\n\n\nclassmethod UpdateICTFixturesRequest.validate(value)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.model_validate_json.html#model_validate_json","title":"model_validate_json","text":"model_validate_json\n\n\n\nclassmethod GetICTFixturesPropertiesRequest.model_validate_json(json_data, *, strict=None, context=None, by_alias=None, by_name=None)\n\n!!! abstract “Usage Documentation”\n\n[JSON Parsing](../concepts/json.md#json-parsing)\n\nValidate the given JSON data against the Pydantic model.\n\nParameters\n\njson_data (str | bytes | bytearray) – The JSON data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\nRaises\n\nValidationError – If json_data is not a JSON string or the object could not be validated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.parse_file.html#parse_file","title":"parse_file","text":"parse_file\n\n\n\nclassmethod UpdateICTFixturesRequest.parse_file(path, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.potting_id.html#potting_id","title":"potting_id","text":"potting_id\n\n\n\nPottingRegionCopyData.potting_id: str\n\nID to assign to the new potting region.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.ImageFile.min_temperature_units.html#min_temperature_units","title":"min_temperature_units","text":"min_temperature_units\n\n\n\nImageFile.min_temperature_units\n\nmin_temperature_units\n\nType\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.copy.html#copy","title":"copy","text":"copy\n\n\n\nPottingRegionDeleteData.copy(*, include=None, exclude=None, update=None, deep=False)\n\nReturns a copy of the model.\n\n!!! warning “Deprecated”\n\nThis method is now deprecated; use model_copy instead.\n\nIf you need include or exclude, use:\n\n`python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n`\n\nParameters\n\ninclude – Optional set or mapping specifying which fields to include in the copied model.\n\nexclude – Optional set or mapping specifying which fields to exclude in the copied model.\n\nupdate – Optional dictionary of field-value pairs to override field values in the copied model.\n\ndeep – If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns\n\nA copy of the model with included, excluded and updated fields as specified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.model_construct.html#model_construct","title":"model_construct","text":"model_construct\n\n\n\nclassmethod TestPointProperties.model_construct(_fields_set=None, **values)\n\nCreates a new instance of the Model class with validated data.\n\nCreates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n\nmodel_construct() generally respects the model_config.extra setting on the provided model.\nThat is, if model_config.extra == ‘allow’, then all extra passed values are added to the model instance’s __dict__\nand __pydantic_extra__ fields. If model_config.extra == ‘ignore’ (the default), then all extra passed values are ignored.\nBecause no validation is performed with a call to model_construct(), having model_config.extra == ‘forbid’ does not result in\nan error if extra values are passed, but they will be ignored.\n\nParameters\n\n_fields_set (set[str] | None) – A set of field names that were originally explicitly set during instantiation. If provided,\nthis is directly used for the [model_fields_set][pydantic.BaseModel.model_fields_set] attribute.\nOtherwise, the field names from the values argument will be used.\n\nvalues (Any) – Trusted or pre-validated data dictionary.\n\nReturn type\n\nSelf\n\nReturns\n\nA new instance of the Model class with validated data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.parse_file.html#parse_file","title":"parse_file","text":"parse_file\n\n\n\nclassmethod GerberOutlineFile.parse_file(path, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.dict.html#dict","title":"dict","text":"dict\n\n\n\nUpdateICTFixturesRequest.dict(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False)\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.model_validate.html#model_validate","title":"model_validate","text":"model_validate\n\n\n\nclassmethod UpdatePottingRegionRequest.model_validate(obj, *, strict=None, from_attributes=None, context=None, by_alias=None, by_name=None)\n\nValidate a pydantic model instance.\n\nParameters\n\nobj (Any) – The object to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\nfrom_attributes (bool | None) – Whether to extract data from object attributes.\n\ncontext (Any | None) – Additional context to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nRaises\n\nValidationError – If the object could not be validated.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.html#ansyssherlockcoretypesproject_typesoutlinefile","title":"ansys.sherlock.core.types.project_types.OutlineFile","text":"ansys.sherlock.core.types.project_types.OutlineFile\n\n\n\nclass ansys.sherlock.core.types.project_types.OutlineFile(**data)\n\nContains the properties for an outline file.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.model_fields.html#model_fields","title":"model_fields","text":"model_fields\n\n\n\nPottingRegion.model_fields = {'cca_name': FieldInfo(annotation=str, required=True), 'potting_id': FieldInfo(annotation=str, required=True), 'potting_material': FieldInfo(annotation=str, required=True), 'potting_side': FieldInfo(annotation=str, required=True), 'potting_standoff': FieldInfo(annotation=float, required=True), 'potting_thickness': FieldInfo(annotation=float, required=True), 'potting_units': FieldInfo(annotation=str, required=True), 'shape': FieldInfo(annotation=Union[CircularShape, PCBShape, PolygonalShape, RectangularShape, SlotShape], required=True)}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.model_validate.html#model_validate","title":"model_validate","text":"model_validate\n\n\n\nclassmethod UpdateTestPointsRequest.model_validate(obj, *, strict=None, from_attributes=None, context=None, by_alias=None, by_name=None)\n\nValidate a pydantic model instance.\n\nParameters\n\nobj (Any) – The object to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\nfrom_attributes (bool | None) – Whether to extract data from object attributes.\n\ncontext (Any | None) – Additional context to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nRaises\n\nValidationError – If the object could not be validated.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.dict.html#dict","title":"dict","text":"dict\n\n\n\nUpdateTestPointsRequest.dict(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False)\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.model_copy.html#model_copy","title":"model_copy","text":"model_copy\n\n\n\nCopperImageFile.model_copy(*, update=None, deep=False)\n\n!!! abstract “Usage Documentation”\n\n[model_copy](../concepts/serialization.md#model_copy)\n\nReturns a copy of the model.\n\n!!! note\n\nThe underlying instance’s [__dict__][object.__dict__] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property]).\n\nParameters\n\nupdate (Mapping[str, Any] | None) – Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\n\ndeep (bool) – Set to True to make a deep copy of the model.\n\nReturn type\n\nSelf\n\nReturns\n\nNew model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.parse_raw.html#parse_raw","title":"parse_raw","text":"parse_raw\n\n\n\nclassmethod CircularShape.parse_raw(b, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.parse_raw.html#parse_raw","title":"parse_raw","text":"parse_raw\n\n\n\nclassmethod PottingRegion.parse_raw(b, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.model_dump_json.html#model_dump_json","title":"model_dump_json","text":"model_dump_json\n\n\n\nCopperImageFile.model_dump_json(*, indent=None, include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump_json](../concepts/serialization.md#modelmodel_dump_json)\n\nGenerates a JSON representation of the model using Pydantic’s to_json method.\n\nParameters\n\nindent (int | None) – Indentation to use in the JSON output. If None is passed, the output will be compact.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to include in the JSON output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to exclude from the JSON output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to serialize using field aliases.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\nstr\n\nReturns\n\nA JSON string representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/00-setup/index.html#setup","title":"Setup","text":"Setup\n\nScripts to run before the examples to prepare the tests.\n\nsphx_glr_examples_gallery_examples_00-setup_setup.py\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.model_validate.html#model_validate","title":"model_validate","text":"model_validate\n\n\n\nclassmethod GetICTFixturesPropertiesRequest.model_validate(obj, *, strict=None, from_attributes=None, context=None, by_alias=None, by_name=None)\n\nValidate a pydantic model instance.\n\nParameters\n\nobj (Any) – The object to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\nfrom_attributes (bool | None) – Whether to extract data from object attributes.\n\ncontext (Any | None) – Additional context to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nRaises\n\nValidationError – If the object could not be validated.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.id.html#id","title":"id","text":"id\n\n\n\nTestPointProperties.id: str\n\nID\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.model_extra.html#model_extra","title":"model_extra","text":"model_extra\n\n\n\nproperty UpdateTestPointsRequest.model_extra: dict[str, Any] | None\n\nGet extra fields set during validation.\n\nReturns\n\nA dictionary of extra fields, or None if config.extra is not set to “allow”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.parse_obj.html#parse_obj","title":"parse_obj","text":"parse_obj\n\n\n\nclassmethod PolygonalShape.parse_obj(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.model_dump.html#model_dump","title":"model_dump","text":"model_dump\n\n\n\nDeletePottingRegionRequest.model_dump(*, mode='python', include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump](../concepts/serialization.md#modelmodel_dump)\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nParameters\n\nmode (Union[Literal['json', 'python'], str]) – The mode in which to_python should run.\nIf mode is ‘json’, the output will only contain JSON serializable types.\nIf mode is ‘python’, the output may contain non-JSON-serializable Python objects.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to include in the output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to exclude from the output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to use the field’s alias in the dictionary key if defined.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nA dictionary representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.html#ansyssherlockcoretypesproject_typesgerberoutlinefile","title":"ansys.sherlock.core.types.project_types.GerberOutlineFile","text":"ansys.sherlock.core.types.project_types.GerberOutlineFile\n\n\n\nclass ansys.sherlock.core.types.project_types.GerberOutlineFile(**data)\n\nContains the properties for a Gerber outline file.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.model_construct.html#model_construct","title":"model_construct","text":"model_construct\n\n\n\nclassmethod CsvExcelOutlineFile.model_construct(_fields_set=None, **values)\n\nCreates a new instance of the Model class with validated data.\n\nCreates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n\nmodel_construct() generally respects the model_config.extra setting on the provided model.\nThat is, if model_config.extra == ‘allow’, then all extra passed values are added to the model instance’s __dict__\nand __pydantic_extra__ fields. If model_config.extra == ‘ignore’ (the default), then all extra passed values are ignored.\nBecause no validation is performed with a call to model_construct(), having model_config.extra == ‘forbid’ does not result in\nan error if extra values are passed, but they will be ignored.\n\nParameters\n\n_fields_set (set[str] | None) – A set of field names that were originally explicitly set during instantiation. If provided,\nthis is directly used for the [model_fields_set][pydantic.BaseModel.model_fields_set] attribute.\nOtherwise, the field names from the values argument will be used.\n\nvalues (Any) – Trusted or pre-validated data dictionary.\n\nReturn type\n\nSelf\n\nReturns\n\nA new instance of the Model class with validated data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.model_fields_set.html#model_fields_set","title":"model_fields_set","text":"model_fields_set\n\n\n\nproperty PottingRegionCopyData.model_fields_set: set[str]\n\nReturns the set of fields that have been explicitly set on this model instance.\n\nReturns\n\nA set of strings representing the fields that have been set,\n\ni.e. that were not filled from defaults.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.model_extra.html#model_extra","title":"model_extra","text":"model_extra\n\n\n\nproperty UpdatePottingRegionRequest.model_extra: dict[str, Any] | None\n\nGet extra fields set during validation.\n\nReturns\n\nA dictionary of extra fields, or None if config.extra is not set to “allow”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.from_orm.html#from_orm","title":"from_orm","text":"from_orm\n\n\n\nclassmethod RectangularShape.from_orm(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.model_post_init.html#model_post_init","title":"model_post_init","text":"model_post_init\n\n\n\nICTFixtureProperties.model_post_init(context, /)\n\nOverride this method to perform additional initialization after __init__ and model_construct.\nThis is useful if you want to do some validation that requires the entire model to be initialized.\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.model_extra.html#model_extra","title":"model_extra","text":"model_extra\n\n\n\nproperty CopperFile.model_extra: dict[str, Any] | None\n\nGet extra fields set during validation.\n\nReturns\n\nA dictionary of extra fields, or None if config.extra is not set to “allow”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.stackup.Stackup.get_layer_count.html#get_layer_count","title":"get_layer_count","text":"get_layer_count\n\n\n\nStackup.get_layer_count(project, cca_name)\n\nGet the number of CCA layers in a stackup.\n\nAvailable Since: 2021R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nReturns\n\n:\n\n\n\npython:int\n\nThe number of layers of the CCA in the project.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> conductor_layer_count = sherlock.stackup.get_layer_count(\n>>>    project=\"Test\",\n>>>    cca_name=\"Card\")\n>>> print(f\"{conductor_layer_count}\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.model_extra.html#model_extra","title":"model_extra","text":"model_extra\n\n\n\nproperty CopyPottingRegionRequest.model_extra: dict[str, Any] | None\n\nGet extra fields set during validation.\n\nReturns\n\nA dictionary of extra fields, or None if config.extra is not set to “allow”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.center_y.html#center_y","title":"center_y","text":"center_y\n\n\n\nSlotShape.center_y: float\n\nfloat\n\nType\n\nY coordinate of center\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.model_fields.html#model_fields","title":"model_fields","text":"model_fields\n\n\n\nPCBShape.model_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.dict.html#dict","title":"dict","text":"dict\n\n\n\nPottingRegionCopyData.dict(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False)\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.LegendBounds.legend_y.html#legend_y","title":"legend_y","text":"legend_y\n\n\n\nLegendBounds.legend_y\n\ny coordinate of the upper left corner\n\nType\n\nfloat\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.model_config.html#model_config","title":"model_config","text":"model_config\n\n\n\nUpdateTestPointsRequest.model_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.model_config.html#model_config","title":"model_config","text":"model_config\n\n\n\nGetTestPointPropertiesRequest.model_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.model_computed_fields.html#model_computed_fields","title":"model_computed_fields","text":"model_computed_fields\n\n\n\nUpdateICTFixturesRequest.model_computed_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.validate.html#validate","title":"validate","text":"validate\n\n\n\nclassmethod TestPointProperties.validate(value)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.parse_file.html#parse_file","title":"parse_file","text":"parse_file\n\n\n\nclassmethod CopperFile.parse_file(path, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.dict.html#dict","title":"dict","text":"dict\n\n\n\nGetICTFixturesPropertiesRequest.dict(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False)\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.schema_json.html#schema_json","title":"schema_json","text":"schema_json\n\n\n\nclassmethod PottingRegionDeleteData.schema_json(*, by_alias=True, ref_template='#/$defs/{model}', **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.json.html#json","title":"json","text":"json\n\n\n\nCsvExcelOutlineFile.json(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.lifecycle.Lifecycle.save_random_vibe_profile.html#save_random_vibe_profile","title":"save_random_vibe_profile","text":"save_random_vibe_profile\n\n\n\nLifecycle.save_random_vibe_profile(request)\n\nSave a random vibe life cycle event profile to a .dat or .csv file.\n\nAvailable Since: 2026R1\n\nParameters\n\nrequest\n\nSaveRandomVibeProfileRequest\n\nRequest object containing the information needed to save a random vibe profile.\n\nReturns\n\n:\n\n\n\nSherlockCommonService_pb2.ReturnCode\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nReturnCode\n\nExamples\n\n>>> from ansys.sherlock.core.types.lifecycle_types import SaveRandomVibeProfileRequest\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> response = sherlock.lifecycle.save_random_vibe_profile(\n>>>     SaveRandomVibeProfileRequest(\n>>>         project=\"MyProject\",\n>>>         phase_name=\"RandomVibePhase\",\n>>>         event_name=\"RV_Event_01\",\n>>>         file_path=\"/tmp/RV_Event_01.dat\",\n>>>     )\n>>> )\n>>> assert response.value == 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.update_forward_refs.html#update_forward_refs","title":"update_forward_refs","text":"update_forward_refs\n\n\n\nclassmethod DeletePottingRegionRequest.update_forward_refs(**localns)\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.common.Common.is_sherlock_client_loading.html#is_sherlock_client_loading","title":"is_sherlock_client_loading","text":"is_sherlock_client_loading\n\n\n\nCommon.is_sherlock_client_loading()\n\nCheck if the Sherlock client is opened and done initializing.\n\nAvailable Since: 2023R2\n\nReturns\n\n:\n\n\n\nbool\n\nWhether the Sherlock client is opened and done initializing.\n\nReturn type\n\nbool\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.html#ansyssherlockcoretypeslayer_typespottingregionupdatedata","title":"ansys.sherlock.core.types.layer_types.PottingRegionUpdateData","text":"ansys.sherlock.core.types.layer_types.PottingRegionUpdateData\n\n\n\nclass ansys.sherlock.core.types.layer_types.PottingRegionUpdateData(**data)\n\nContains the properties of a potting region update request.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.node_count.html#node_count","title":"node_count","text":"node_count\n\n\n\nSlotShape.node_count: int\n\nint\n\nType\n\nNode count\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.project.html#project","title":"project","text":"project\n\n\n\nUpdateICTFixturesRequest.project: str\n\nName of the Sherlock project.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.model_extra.html#model_extra","title":"model_extra","text":"model_extra\n\n\n\nproperty OutlineFile.model_extra: dict[str, Any] | None\n\nGet extra fields set during validation.\n\nReturns\n\nA dictionary of extra fields, or None if config.extra is not set to “allow”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.update_forward_refs.html#update_forward_refs","title":"update_forward_refs","text":"update_forward_refs\n\n\n\nclassmethod RectangularShape.update_forward_refs(**localns)\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.nodes.html#nodes","title":"nodes","text":"nodes\n\n\n\nICTFixtureProperties.nodes: str\n\nNumber of nodes\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.layer.Layer.update_test_points.html#update_test_points","title":"update_test_points","text":"update_test_points\n\n\n\nLayer.update_test_points(request)\n\nUpdate test point properties of a CCA from input parameters.\n\nAvailable Since: 2026R1\n\nParameters\n\nrequest: UpdateTestPointsRequest\n\nContains all the information needed to update the properties for one or more\ntest points.\n\nReturns\n\n:\n\n\n\nSherlockCommonService_pb2.UpdateTestPointsResponse\n\nA status code and message for the update test points request.\n\nReturn type\n\nUpdateTestPointsResponse\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> from ansys.sherlock.core.types.layer_types import UpdateTestPointsRequest,\n>>> TestPointProperties\n>>> from ansys.api.sherlock.v0 import SherlockLayerService_pb2\n>>> sherlock = connect()\n>>> test_point = TestPointProperties(\n>>> id=\"TP1\",\n>>> side=\"BOTTOM\",\n>>> units=\"in\",\n>>> center_x=1.0,\n>>> center_y=0.5,\n>>> radius=0.2,\n>>> load_type=SherlockLayerService_pb2.TestPointProperties.LoadType.Force,\n>>> load_value=3.0,\n>>> load_units=\"ozf\",\n>>> )\n>>> response = sherlock.layer.update_test_points(UpdateTestPointsRequest(\n>>> project=\"Tutorial Project\",\n>>> cca_name=\"Main Board\",\n>>> update_test_points=[test_point],\n>>> ))\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.model_json_schema.html#model_json_schema","title":"model_json_schema","text":"model_json_schema\n\n\n\nclassmethod PottingRegionDeleteData.model_json_schema(by_alias=True, ref_template='#/$defs/{model}', schema_generator=<class 'pydantic.json_schema.GenerateJsonSchema'>, mode='validation')\n\nGenerates a JSON schema for a model class.\n\nParameters\n\nby_alias (bool) – Whether to use attribute aliases or not.\n\nref_template (str) – The reference template.\n\nschema_generator (type[GenerateJsonSchema]) – To override the logic used to generate the JSON schema, as a subclass of\nGenerateJsonSchema with your desired modifications\n\nmode (Literal['validation', 'serialization']) – The mode in which to generate the schema.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nThe JSON schema for the given model class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.str_validation.html#str_validation","title":"str_validation","text":"str_validation\n\n\n\nclassmethod CsvExcelOutlineFile.str_validation(value, info)\n\nValidate string fields listed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.model_post_init.html#model_post_init","title":"model_post_init","text":"model_post_init\n\n\n\nUpdatePottingRegionRequest.model_post_init(context, /)\n\nOverride this method to perform additional initialization after __init__ and model_construct.\nThis is useful if you want to do some validation that requires the entire model to be initialized.\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.model_post_init.html#model_post_init","title":"model_post_init","text":"model_post_init\n\n\n\nCopperImageFile.model_post_init(context, /)\n\nOverride this method to perform additional initialization after __init__ and model_construct.\nThis is useful if you want to do some validation that requires the entire model to be initialized.\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.layer.Layer.export_all_mount_points.html#export_all_mount_points","title":"export_all_mount_points","text":"export_all_mount_points\n\n\n\nLayer.export_all_mount_points(project, cca_name, export_file, units='DEFAULT')\n\nExport the mount point properties for a CCA.\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nexport_file: str\n\nFull path for the CSV file to export the mount points list to.\n\nunits: str, optional\n\nUnits to use when exporting the mount points.\nThe default is DEFAULT.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n>>>     \"ODB++ Tutorial.tgz\",\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     project=\"Tutorial Project\",\n>>>     cca_name=\"Card\",\n>>> )\n>>> sherlock.layer.export_all_mount_points(\n>>>     \"Tutorial Project\",\n>>>     \"Card\",\n>>>     \"MountPointsExport.csv\",\n>>>     \"DEFAULT\"\n>>> )\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.model_config.html#model_config","title":"model_config","text":"model_config\n\n\n\nICTFixtureProperties.model_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.model_json_schema.html#model_json_schema","title":"model_json_schema","text":"model_json_schema\n\n\n\nclassmethod PottingRegion.model_json_schema(by_alias=True, ref_template='#/$defs/{model}', schema_generator=<class 'pydantic.json_schema.GenerateJsonSchema'>, mode='validation')\n\nGenerates a JSON schema for a model class.\n\nParameters\n\nby_alias (bool) – Whether to use attribute aliases or not.\n\nref_template (str) – The reference template.\n\nschema_generator (type[GenerateJsonSchema]) – To override the logic used to generate the JSON schema, as a subclass of\nGenerateJsonSchema with your desired modifications\n\nmode (Literal['validation', 'serialization']) – The mode in which to generate the schema.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nThe JSON schema for the given model class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.layer.Layer.delete_all_test_points.html#delete_all_test_points","title":"delete_all_test_points","text":"delete_all_test_points\n\n\n\nLayer.delete_all_test_points(project, cca_name)\n\nDelete all test points for a CCA.\n\nAvailable Since: 2023R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n>>>     \"ODB++ Tutorial.tgz\",\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     True,\n>>>     project=\"Test\",\n>>>     cca_name=\"Card\",\n>>> )\n>>> sherlock.layer.update_test_points_by_file(\n>>>     \"Test\",\n>>>     \"Card\",\n>>>     \"TestPointsImport.csv\",\n>>> )\n>>> sherlock.layer.delete_all_test_points(\"Test\", \"Card\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.parse_file.html#parse_file","title":"parse_file","text":"parse_file\n\n\n\nclassmethod CopperImageFile.parse_file(path, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.model_copy.html#model_copy","title":"model_copy","text":"model_copy\n\n\n\nUpdateTestPointsRequest.model_copy(*, update=None, deep=False)\n\n!!! abstract “Usage Documentation”\n\n[model_copy](../concepts/serialization.md#model_copy)\n\nReturns a copy of the model.\n\n!!! note\n\nThe underlying instance’s [__dict__][object.__dict__] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property]).\n\nParameters\n\nupdate (Mapping[str, Any] | None) – Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\n\ndeep (bool) – Set to True to make a deep copy of the model.\n\nReturn type\n\nSelf\n\nReturns\n\nNew model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.html#ansyssherlockcoretypeslayer_typesrectangularshape","title":"ansys.sherlock.core.types.layer_types.RectangularShape","text":"ansys.sherlock.core.types.layer_types.RectangularShape\n\n\n\nclass ansys.sherlock.core.types.layer_types.RectangularShape(**data)\n\nContains the properties for a rectangular shape.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/analysis.html#analysis","title":"Analysis","text":"Analysis\n\n\n\nModule containing all analysis capabilities.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.cca_names.html#cca_names","title":"cca_names","text":"cca_names\n\n\n\nOutlineFile.cca_names: list[str]\n\nThe list of CCA names for the outline file.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.model_rebuild.html#model_rebuild","title":"model_rebuild","text":"model_rebuild\n\n\n\nclassmethod PCBShape.model_rebuild(*, force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace=None)\n\nTry to rebuild the pydantic-core schema for the model.\n\nThis may be necessary when one of the annotations is a ForwardRef which could not be resolved during\nthe initial attempt to build the schema, and automatic rebuilding fails.\n\nParameters\n\nforce (bool) – Whether to force the rebuilding of the model schema, defaults to False.\n\nraise_errors (bool) – Whether to raise errors, defaults to True.\n\n_parent_namespace_depth (int) – The depth level of the parent namespace, defaults to 2.\n\n_types_namespace (Mapping[str, Any] | None) – The types namespace, defaults to None.\n\nReturn type\n\nbool | None\n\nReturns\n\nReturns None if the schema is already “complete” and rebuilding was not required.\nIf rebuilding _was_ required, returns True if rebuilding was successful, otherwise False.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_part_validation_properties.html#run-part-list-validation-analysis","title":"Run Part List Validation Analysis","text":"Run Part List Validation Analysis\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nand configure part list validation analysis properties."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_part_validation_properties.html#description","title":"Run Part List Validation Analysis > Description","text":"Description\n\nSherlock allows you to perform part list validation analysis.\nThis script performs the following steps:\n- Connect to the Sherlock service.\n- Import a project.\n- Configure the properties for part list validation analysis."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_part_validation_properties.html#connect-to-sherlock","title":"Run Part List Validation Analysis > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_part_validation_properties.html#delete-project","title":"Run Part List Validation Analysis > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_part_validation_properties.html#import-tutorial-project","title":"Run Part List Validation Analysis > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_part_validation_properties.html#update-part-list-validation-properties","title":"Run Part List Validation Analysis > Update Part List Validation Properties","text":"Update Part List Validation Properties\n\nConfigure properties for part list validation analysis.\n\n\n\nDownload Jupyter notebook: update_part_validation_properties.ipynb\n\nDownload Python source code: update_part_validation_properties.py\n\nDownload zipped: update_part_validation_properties.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.lifecycle.Lifecycle.load_random_vibe_profile.html#load_random_vibe_profile","title":"load_random_vibe_profile","text":"load_random_vibe_profile\n\n\n\nLifecycle.load_random_vibe_profile(project, phase_name, event_name, file_path)\n\nLoad random vibe profile from .csv or .dat file.\n\nAvailable Since: 2023R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project\n\nphase_name: str\n\nName of the lifecycle phase to add this event to.\n\nevent_name: str\n\nName of the random vibe event.\n\nfile_path: str\n\nFile path for thermal profile .dat or .csv file\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\"\n)\n\n>>> sherlock.lifecycle.load_random_vibe_profile(\n        project=\"Tutorial\",\n        phase_name=\"Phase 1\",\n        event_name=\"Random Event\",\n        file_path=\"TestProfile.dat\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.construct.html#construct","title":"construct","text":"construct\n\n\n\nclassmethod PolygonalShape.construct(_fields_set=None, **values)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.copy.html#copy","title":"copy","text":"copy\n\n\n\nPottingRegion.copy(*, include=None, exclude=None, update=None, deep=False)\n\nReturns a copy of the model.\n\n!!! warning “Deprecated”\n\nThis method is now deprecated; use model_copy instead.\n\nIf you need include or exclude, use:\n\n`python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n`\n\nParameters\n\ninclude – Optional set or mapping specifying which fields to include in the copied model.\n\nexclude – Optional set or mapping specifying which fields to exclude in the copied model.\n\nupdate – Optional dictionary of field-value pairs to override field values in the copied model.\n\ndeep – If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns\n\nA copy of the model with included, excluded and updated fields as specified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.model_fields_set.html#model_fields_set","title":"model_fields_set","text":"model_fields_set\n\n\n\nproperty OutlineFile.model_fields_set: set[str]\n\nReturns the set of fields that have been explicitly set on this model instance.\n\nReturns\n\nA set of strings representing the fields that have been set,\n\ni.e. that were not filled from defaults.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.parse_raw.html#parse_raw","title":"parse_raw","text":"parse_raw\n\n\n\nclassmethod PCBShape.parse_raw(b, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.stackup.Stackup.gen_stackup.html#gen_stackup","title":"gen_stackup","text":"gen_stackup\n\n\n\nStackup.gen_stackup(project, cca_name, board_thickness, board_thickness_unit, pcb_material_manufacturer, pcb_material_grade, pcb_material, conductor_layers_cnt, signal_layer_thickness, signal_layer_thickness_unit, min_laminate_thickness, min_laminate_thickness_unit, maintain_symmetry, power_layer_thickness, power_layer_thickness_unit)\n\nGenerate a new stackup from given properties.\n\nAvailable Since: 2021R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nboard_thickness: float\n\nBoard thickness.\n\nboard_thickness_unit: str\n\nUnits for the board thickness.\n\npcb_material_manufacturer: str\n\nManufacturer for the PCB material.\n\npcb_material_grade: str\n\nGrade for the PCB material.\n\npcb_material: str\n\nMaterial for the PCB.\n\nconductor_layers_cnt: int32\n\nNumber of conductor layers.\n\nsignal_layer_thickness: float\n\nSignal layer thickness.\n\nsignal_layer_thickness_unit: str\n\nUnits for the signal layer thickness.\n\nmin_laminate_thickness: float\n\nMinimum thickness of laminate layers.\n\nmin_laminate_thickness_unit: str\n\nUnits for the minimum thickness of laminate layers.\n\nmaintain_symmetry: bool\n\nWhether to maintain symmetry.\n\npower_layer_thickness: float\n\nPower layer thickness.\n\npower_layer_thickness_unit: str\n\nUnits for the power layer thickness.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.stackup.gen_stackup(\n    \"Test\",\n    \"Card\",\n    82.6,\n    \"mil\",\n    \"Generic\",\n    \"FR-4\",\n    \"Generic FR-4\",\n    6,\n    0.5,\n    \"oz\",\n    1.0,\n    \"mil\",\n    False,\n    1.0,\n    \"mil\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.model_extra.html#model_extra","title":"model_extra","text":"model_extra\n\n\n\nproperty CircularShape.model_extra: dict[str, Any] | None\n\nGet extra fields set during validation.\n\nReturns\n\nA dictionary of extra fields, or None if config.extra is not set to “allow”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.str_validation.html#str_validation","title":"str_validation","text":"str_validation\n\n\n\nclassmethod ICTFixtureProperties.str_validation(value, info)\n\nValidate string fields listed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.analysis.Analysis.update_component_failure_mechanism_analysis_props.html#update_component_failure_mechanism_analysis_props","title":"update_component_failure_mechanism_analysis_props","text":"update_component_failure_mechanism_analysis_props\n\n\n\nAnalysis.update_component_failure_mechanism_analysis_props(request)\n\nUpdate properties for one or more Component Failure Mechanism analysis.\n\nParameters\n\nrequest: UpdateComponentFailureMechanismPropsRequest\n\nContains all the information needed to update the properties for one or more component\nfailure mechanism analyses per project.\n\nReturns\n\n:\n\n\n\npython:list[SherlockCommonService_pb2.ReturnCode]\n\nReturn codes for each request.\n\nReturn type\n\nlist[ReturnCode]\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> from ansys.sherlock.core.types.analysis_types import (\n    ComponentFailureMechanism,\n    UpdateComponentFailureMechanismPropsRequest,\n)\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_project_zip_archive(\n    project=\"Assembly Tutorial\",\n    category=\"category\",\n    archive_file=\\\n        \"C:\\\\Program Files\\\\ANSYS Inc\\\\v252\\\\sherlock\\\\tutorial\\\\Assembly Tutorial.zip\",\n)\n>>> update_request1 = ComponentFailureMechanism(\n    cca_name=\"Main Board\",\n    default_part_temp_rise=1.5,\n    default_part_temp_rise_units=\"K\",\n    part_temp_rise_min_enabled=True,\n    part_validation_enabled=False,\n)\n>>> update_request2 = ComponentFailureMechanism(\n    cca_name=\"Memory Card 1\",\n    default_part_temp_rise=-3.25,\n    default_part_temp_rise_units=\"F\",\n    part_temp_rise_min_enabled=False,\n    part_validation_enabled=True,\n)\n>>> request = UpdateComponentFailureMechanismPropsRequest(\n    project=\"Test\",\n    component_failure_mechanism_properties_per_cca=[\n        update_request1,\n        update_request2\n    ]\n)\n>>> return_codes = sherlock.analysis.\\\n        update_component_failure_mechanism_analysis_props(request)\n>>> for return_code in return_codes:\n        print(f\"Return code: value={return_code.value}, message={return_code.message}\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.schema.html#schema","title":"schema","text":"schema\n\n\n\nclassmethod SlotShape.schema(by_alias=True, ref_template='#/$defs/{model}')\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_analysis.html#run-advanced-analysis","title":"Run Advanced Analysis","text":"Run Advanced Analysis\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nand run various analyses on a project, including part validation, natural frequency,\nthermal derating, and more."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_analysis.html#description","title":"Run Advanced Analysis > Description","text":"Description\n\nSherlock provides the ability to perform various types of analyses on a project.\nThis script demonstrates how to:\n- Connect to the Sherlock service.\n- Import a project into Sherlock.\n- Run several types of analyses, such as part validation, mechanical shock, harmonic vibration,\nand others."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_analysis.html#connect-to-sherlock","title":"Run Advanced Analysis > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_analysis.html#delete-project","title":"Run Advanced Analysis > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_analysis.html#import-tutorial-project","title":"Run Advanced Analysis > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/run_analysis.html#run-multiple-analyses","title":"Run Advanced Analysis > Run Multiple Analyses","text":"Run Multiple Analyses\n\nRun various types of analyses on the “Main Board” in the “Tutorial Project”.\n\n\n\nDownload Jupyter notebook: run_analysis.ipynb\n\nDownload Python source code: run_analysis.py\n\nDownload zipped: run_analysis.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.schema_json.html#schema_json","title":"schema_json","text":"schema_json\n\n\n\nclassmethod CopperGerberFile.schema_json(*, by_alias=True, ref_template='#/$defs/{model}', **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.json.html#json","title":"json","text":"json\n\n\n\nPottingRegionUpdateData.json(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_harmonic_vibe_properties.html#update-harmonic-vibration-analysis-properties","title":"Update Harmonic Vibration Analysis properties","text":"Update Harmonic Vibration Analysis properties\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nand configure harmonic vibration analysis properties."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_harmonic_vibe_properties.html#description","title":"Update Harmonic Vibration Analysis properties > Description","text":"Description\n\nSherlock allows you to perform harmonic vibration analysis.\nThis script performs the following steps:\n- Connect to the Sherlock service.\n- Import a project.\n- Configure the properties for harmonic vibration analysis."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_harmonic_vibe_properties.html#connect-to-sherlock","title":"Update Harmonic Vibration Analysis properties > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_harmonic_vibe_properties.html#delete-project","title":"Update Harmonic Vibration Analysis properties > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_harmonic_vibe_properties.html#import-tutorial-project","title":"Update Harmonic Vibration Analysis properties > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_harmonic_vibe_properties.html#update-harmonic-vibration-properties","title":"Update Harmonic Vibration Analysis properties > Update Harmonic Vibration Properties","text":"Update Harmonic Vibration Properties\n\nConfigure properties for harmonic vibration analysis.\n\n\n\nDownload Jupyter notebook: update_harmonic_vibe_properties.ipynb\n\nDownload Python source code: update_harmonic_vibe_properties.py\n\nDownload zipped: update_harmonic_vibe_properties.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.dict.html#dict","title":"dict","text":"dict\n\n\n\nPottingRegionUpdateData.dict(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False)\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.model_fields.html#model_fields","title":"model_fields","text":"model_fields\n\n\n\nDeletePottingRegionRequest.model_fields = {'potting_region_delete_data': FieldInfo(annotation=list[PottingRegionDeleteData], required=True), 'project': FieldInfo(annotation=str, required=True)}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.parse_file.html#parse_file","title":"parse_file","text":"parse_file\n\n\n\nclassmethod PottingRegionUpdateData.parse_file(path, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.parse_raw.html#parse_raw","title":"parse_raw","text":"parse_raw\n\n\n\nclassmethod PolygonalShape.parse_raw(b, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.model_config.html#model_config","title":"model_config","text":"model_config\n\n\n\nPottingRegionDeleteData.model_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.model_validate_json.html#model_validate_json","title":"model_validate_json","text":"model_validate_json\n\n\n\nclassmethod PottingRegionCopyData.model_validate_json(json_data, *, strict=None, context=None, by_alias=None, by_name=None)\n\n!!! abstract “Usage Documentation”\n\n[JSON Parsing](../concepts/json.md#json-parsing)\n\nValidate the given JSON data against the Pydantic model.\n\nParameters\n\njson_data (str | bytes | bytearray) – The JSON data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\nRaises\n\nValidationError – If json_data is not a JSON string or the object could not be validated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.json.html#json","title":"json","text":"json\n\n\n\nPolygonalShape.json(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.construct.html#construct","title":"construct","text":"construct\n\n\n\nclassmethod CopperFile.construct(_fields_set=None, **values)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.validate.html#validate","title":"validate","text":"validate\n\n\n\nclassmethod CopperFile.validate(value)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.file_name.html#file_name","title":"file_name","text":"file_name\n\n\n\nOutlineFile.file_name: str\n\nThe filename of the outline file.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.model_validate_json.html#model_validate_json","title":"model_validate_json","text":"model_validate_json\n\n\n\nclassmethod GetTestPointPropertiesRequest.model_validate_json(json_data, *, strict=None, context=None, by_alias=None, by_name=None)\n\n!!! abstract “Usage Documentation”\n\n[JSON Parsing](../concepts/json.md#json-parsing)\n\nValidate the given JSON data against the Pydantic model.\n\nParameters\n\njson_data (str | bytes | bytearray) – The JSON data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\nRaises\n\nValidationError – If json_data is not a JSON string or the object could not be validated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.parse_obj.html#parse_obj","title":"parse_obj","text":"parse_obj\n\n\n\nclassmethod GetICTFixturesPropertiesRequest.parse_obj(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.model_json_schema.html#model_json_schema","title":"model_json_schema","text":"model_json_schema\n\n\n\nclassmethod PCBShape.model_json_schema(by_alias=True, ref_template='#/$defs/{model}', schema_generator=<class 'pydantic.json_schema.GenerateJsonSchema'>, mode='validation')\n\nGenerates a JSON schema for a model class.\n\nParameters\n\nby_alias (bool) – Whether to use attribute aliases or not.\n\nref_template (str) – The reference template.\n\nschema_generator (type[GenerateJsonSchema]) – To override the logic used to generate the JSON schema, as a subclass of\nGenerateJsonSchema with your desired modifications\n\nmode (Literal['validation', 'serialization']) – The mode in which to generate the schema.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nThe JSON schema for the given model class.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_cca.html#add-circuit-card-assembly","title":"Add Circuit Card Assembly","text":"Add Circuit Card Assembly\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nand add a CCA (Circuit Card Assembly) to a project."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_cca.html#description","title":"Add Circuit Card Assembly > Description","text":"Description\n\nSherlock’s gRPC API allows users to automate workflows such as adding CCAs to a project\nand importing ODB++ archives.\nThis script demonstrates how to:\n- Connect to the Sherlock service.\n- Import a project.\n- Add CCAs to the project.\n\nThe added CCAs allow for proper circuit analysis and component tracking within the project."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_cca.html#connect-to-sherlock","title":"Add Circuit Card Assembly > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_cca.html#delete-project","title":"Add Circuit Card Assembly > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_cca.html#import-tutorial-project","title":"Add Circuit Card Assembly > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/01-project-configuration/add_cca.html#add-cca-to-project","title":"Add Circuit Card Assembly > Add CCA to Project","text":"Add CCA to Project\n\nAdd a CCA to a project.\n\n\n\nDownload Jupyter notebook: add_cca.ipynb\n\nDownload Python source code: add_cca.py\n\nDownload zipped: add_cca.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.model_construct.html#model_construct","title":"model_construct","text":"model_construct\n\n\n\nclassmethod CopperGerberFile.model_construct(_fields_set=None, **values)\n\nCreates a new instance of the Model class with validated data.\n\nCreates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n\nmodel_construct() generally respects the model_config.extra setting on the provided model.\nThat is, if model_config.extra == ‘allow’, then all extra passed values are added to the model instance’s __dict__\nand __pydantic_extra__ fields. If model_config.extra == ‘ignore’ (the default), then all extra passed values are ignored.\nBecause no validation is performed with a call to model_construct(), having model_config.extra == ‘forbid’ does not result in\nan error if extra values are passed, but they will be ignored.\n\nParameters\n\n_fields_set (set[str] | None) – A set of field names that were originally explicitly set during instantiation. If provided,\nthis is directly used for the [model_fields_set][pydantic.BaseModel.model_fields_set] attribute.\nOtherwise, the field names from the values argument will be used.\n\nvalues (Any) – Trusted or pre-validated data dictionary.\n\nReturn type\n\nSelf\n\nReturns\n\nA new instance of the Model class with validated data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.material.html#material","title":"material","text":"material\n\n\n\nICTFixtureProperties.material: str\n\nMaterial\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.model_config.html#model_config","title":"model_config","text":"model_config\n\n\n\nUpdateICTFixturesRequest.model_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.launcher.connect.html#connect","title":"connect","text":"connect\n\n\n\nansys.sherlock.core.launcher.connect(port=9090, timeout=120)\n\nConnect to a local instance of Sherlock.\n\nAvailable Since: 2025R2\n\nParameters\n\nport: int, optional\n\nPort number for the connection.\nDefault is 9090.\n\ntimeout: int, optional\n\nMaximum time (in seconds) to wait for the connection to Sherlock to be established.\nDefault is 120 seconds.\n\nReturns\n\n:\n\n\n\nSherlock\n\nThe instance of sherlock.\n\nReturn type\n\nSherlock\n\nExamples\n\n>>> from ansys.sherlock.core import launcher\n>>> sherlock = launcher.connect(port=9092)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.IcepakFile.temperature_offset_units.html#temperature_offset_units","title":"temperature_offset_units","text":"temperature_offset_units\n\n\n\nIcepakFile.temperature_offset_units\n\ntemperature_offset_units\n\nType\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.cca_name.html#cca_name","title":"cca_name","text":"cca_name\n\n\n\nPottingRegionDeleteData.cca_name: str\n\nName of the CCA containing the potting region(s) to delete.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.model_config.html#model_config","title":"model_config","text":"model_config\n\n\n\nPolygonalShape.model_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.html#ansyssherlockcoretypeslayer_typesslotshape","title":"ansys.sherlock.core.types.layer_types.SlotShape","text":"ansys.sherlock.core.types.layer_types.SlotShape\n\n\n\nclass ansys.sherlock.core.types.layer_types.SlotShape(**data)\n\nContains the properties for a slot shape.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.model_dump_json.html#model_dump_json","title":"model_dump_json","text":"model_dump_json\n\n\n\nCopyPottingRegionRequest.model_dump_json(*, indent=None, include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump_json](../concepts/serialization.md#modelmodel_dump_json)\n\nGenerates a JSON representation of the model using Pydantic’s to_json method.\n\nParameters\n\nindent (int | None) – Indentation to use in the JSON output. If None is passed, the output will be compact.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to include in the JSON output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to exclude from the JSON output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to serialize using field aliases.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\nstr\n\nReturns\n\nA JSON string representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.copy.html#copy","title":"copy","text":"copy\n\n\n\nPottingRegionUpdateData.copy(*, include=None, exclude=None, update=None, deep=False)\n\nReturns a copy of the model.\n\n!!! warning “Deprecated”\n\nThis method is now deprecated; use model_copy instead.\n\nIf you need include or exclude, use:\n\n`python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n`\n\nParameters\n\ninclude – Optional set or mapping specifying which fields to include in the copied model.\n\nexclude – Optional set or mapping specifying which fields to exclude in the copied model.\n\nupdate – Optional dictionary of field-value pairs to override field values in the copied model.\n\ndeep – If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns\n\nA copy of the model with included, excluded and updated fields as specified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_ipc_2581_archive.html#import-ipc-2581-archive","title":"Import IPC-2581 Archive","text":"Import IPC-2581 Archive\n\nThis example demonstrates how to connect to the Sherlock gRPC service and import an\nIPC-2581 project,"},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_ipc_2581_archive.html#description","title":"Import IPC-2581 Archive > Description","text":"Description\n\nSherlock’s gRPC API allows users to automate workflows such as importing IPC-2581 archives.\nThis script demonstrates how to:\n- Connect to the Sherlock service.\n- Import an IPC-2581 archive without specifying a project or CCA name.\n\nThis functionality is useful for initializing projects with IPC-2581 data for further\nanalysis and workflows."},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_ipc_2581_archive.html#connect-to-sherlock","title":"Import IPC-2581 Archive > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_ipc_2581_archive.html#delete-project","title":"Import IPC-2581 Archive > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_ipc_2581_archive.html#import-tutorial-project","title":"Import IPC-2581 Archive > Import Tutorial Project","text":"Import Tutorial Project\n\nImport a sample project ZIP archive provided with the Sherlock installation."},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_ipc_2581_archive.html#import-ipc-2581-archive","title":"Import IPC-2581 Archive","text":"Import IPC-2581 Archive\n\nImport an IPC-2581 archive without specifying a project or CCA name.\n\n\n\nDownload Jupyter notebook: import_ipc_2581_archive.ipynb\n\nDownload Python source code: import_ipc_2581_archive.py\n\nDownload zipped: import_ipc_2581_archive.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.constraints.html#constraints","title":"constraints","text":"constraints\n\n\n\nICTFixtureProperties.constraints: str\n\nFEA constraints\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.update_potting_regions.html#update_potting_regions","title":"update_potting_regions","text":"update_potting_regions\n\n\n\nUpdatePottingRegionRequest.update_potting_regions: list[PottingRegionUpdateData]\n\nList of potting region data to update.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.parse_obj.html#parse_obj","title":"parse_obj","text":"parse_obj\n\n\n\nclassmethod RectangularShape.parse_obj(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.project.Project.list_strain_maps.html#list_strain_maps","title":"list_strain_maps","text":"list_strain_maps\n\n\n\nProject.list_strain_maps(project, cca_names=None)\n\nList the strain maps assigned to each CCA or given CCAs.\n\nAvailable Since: 2023R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_names: list[str], optional\n\nCCA names to provide strain maps for. The default is None,\nin which case all CCAs in the project are returned.\n\nReturns\n\n:\n\n\n\npython:list[SherlockProjectService_pb2.ListStrainMapsResponse.CcaStrainMap]\n\nAll strain maps or strain maps for the specified CCAs.\n\nReturn type\n\nlist[CcaStrainMap]\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> strain_maps = sherlock.project.list_strain_maps(\n    \"AssemblyTutorial\",\n    [\"Main Board\",\"Power Module\"]\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.dict.html#dict","title":"dict","text":"dict\n\n\n\nGetTestPointPropertiesRequest.dict(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False)\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.schema_json.html#schema_json","title":"schema_json","text":"schema_json\n\n\n\nclassmethod GetICTFixturesPropertiesRequest.schema_json(*, by_alias=True, ref_template='#/$defs/{model}', **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.model_dump_json.html#model_dump_json","title":"model_dump_json","text":"model_dump_json\n\n\n\nSlotShape.model_dump_json(*, indent=None, include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump_json](../concepts/serialization.md#modelmodel_dump_json)\n\nGenerates a JSON representation of the model using Pydantic’s to_json method.\n\nParameters\n\nindent (int | None) – Indentation to use in the JSON output. If None is passed, the output will be compact.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to include in the JSON output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to exclude from the JSON output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to serialize using field aliases.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\nstr\n\nReturns\n\nA JSON string representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.model_computed_fields.html#model_computed_fields","title":"model_computed_fields","text":"model_computed_fields\n\n\n\nCsvExcelOutlineFile.model_computed_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.parse_obj.html#parse_obj","title":"parse_obj","text":"parse_obj\n\n\n\nclassmethod PottingRegionUpdateData.parse_obj(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.from_orm.html#from_orm","title":"from_orm","text":"from_orm\n\n\n\nclassmethod PottingRegionDeleteData.from_orm(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.schema_json.html#schema_json","title":"schema_json","text":"schema_json\n\n\n\nclassmethod PolygonalShape.schema_json(*, by_alias=True, ref_template='#/$defs/{model}', **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.model_post_init.html#model_post_init","title":"model_post_init","text":"model_post_init\n\n\n\nSlotShape.model_post_init(context, /)\n\nOverride this method to perform additional initialization after __init__ and model_construct.\nThis is useful if you want to do some validation that requires the entire model to be initialized.\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.model_validate_json.html#model_validate_json","title":"model_validate_json","text":"model_validate_json\n\n\n\nclassmethod RectangularShape.model_validate_json(json_data, *, strict=None, context=None, by_alias=None, by_name=None)\n\n!!! abstract “Usage Documentation”\n\n[JSON Parsing](../concepts/json.md#json-parsing)\n\nValidate the given JSON data against the Pydantic model.\n\nParameters\n\njson_data (str | bytes | bytearray) – The JSON data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\nRaises\n\nValidationError – If json_data is not a JSON string or the object could not be validated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.from_orm.html#from_orm","title":"from_orm","text":"from_orm\n\n\n\nclassmethod CircularShape.from_orm(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.html#ansyssherlockcoretypeslayer_typesupdatetestpointsrequest","title":"ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest","text":"ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest\n\n\n\nclass ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest(**data)\n\nContains the properties of a test points update per project.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.model_fields.html#model_fields","title":"model_fields","text":"model_fields\n\n\n\nCircularShape.model_fields = {'center_x': FieldInfo(annotation=float, required=True), 'center_y': FieldInfo(annotation=float, required=True), 'diameter': FieldInfo(annotation=float, required=True), 'node_count': FieldInfo(annotation=int, required=True), 'rotation': FieldInfo(annotation=float, required=True)}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.str_validation.html#str_validation","title":"str_validation","text":"str_validation\n\n\n\nclassmethod OutlineFile.str_validation(value, info)\n\nValidate string fields listed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.potting_side.html#potting_side","title":"potting_side","text":"potting_side\n\n\n\nPottingRegion.potting_side: str\n\nThe potting side, options are “TOP”, “BOT”, or “BOTTOM”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.model_parametrized_name.html#model_parametrized_name","title":"model_parametrized_name","text":"model_parametrized_name\n\n\n\nclassmethod PottingRegionUpdateData.model_parametrized_name(params)\n\nCompute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nParameters\n\nparams (tuple[type[Any], ...]) – Tuple of types of the class. Given a generic class\nModel with 2 type variables and a concrete model Model[str, int],\nthe value (str, int) would be passed to params.\n\nReturn type\n\nstr\n\nReturns\n\nString representing the new class where params are passed to cls as type variables.\n\nRaises\n\nTypeError – Raised when trying to generate concrete names for non-generic models.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.parse_obj.html#parse_obj","title":"parse_obj","text":"parse_obj\n\n\n\nclassmethod PCBShape.parse_obj(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.validate.html#validate","title":"validate","text":"validate\n\n\n\nclassmethod CopperGerberFile.validate(value)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.OutlineFile.model_parametrized_name.html#model_parametrized_name","title":"model_parametrized_name","text":"model_parametrized_name\n\n\n\nclassmethod OutlineFile.model_parametrized_name(params)\n\nCompute the class name for parametrizations of generic classes.\n\nThis method can be overridden to achieve a custom naming scheme for generic BaseModels.\n\nParameters\n\nparams (tuple[type[Any], ...]) – Tuple of types of the class. Given a generic class\nModel with 2 type variables and a concrete model Model[str, int],\nthe value (str, int) would be passed to params.\n\nReturn type\n\nstr\n\nReturns\n\nString representing the new class where params are passed to cls as type variables.\n\nRaises\n\nTypeError – Raised when trying to generate concrete names for non-generic models.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.parse_raw.html#parse_raw","title":"parse_raw","text":"parse_raw\n\n\n\nclassmethod UpdatePottingRegionRequest.parse_raw(b, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"getting_started/index.html#getting-started","title":"Getting started","text":"Getting started\n\nPySherlock provides a Pythonic interface to Sherlock functionalities.\n\nTo use PySherlock, you must have a licensed copy of Sherlock 2022 R2 or later installed.\n\nFor more information on Sherlock, see the\nAnsys Sherlock\npage on the Ansys website.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.schema_json.html#schema_json","title":"schema_json","text":"schema_json\n\n\n\nclassmethod CopyPottingRegionRequest.schema_json(*, by_alias=True, ref_template='#/$defs/{model}', **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.html#ansyssherlockcoretypeslayer_typesgetictfixturespropertiesrequest","title":"ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest","text":"ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest\n\n\n\nclass ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest(**data)\n\nReturn the properties for each ICT fixture given a comma-separated list of fixture ids.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.construct.html#construct","title":"construct","text":"construct\n\n\n\nclassmethod CopyPottingRegionRequest.construct(_fields_set=None, **values)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_solder_fatigue_properties.html#update-solder-fatigue-properties","title":"Update Solder Fatigue Properties","text":"Update Solder Fatigue Properties\n\nThis example demonstrates how to connect to the Sherlock gRPC service, import a project,\nand update solder fatigue properties."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_solder_fatigue_properties.html#description","title":"Update Solder Fatigue Properties > Description","text":"Description\n\nThis script shows how to configure solder fatigue properties for a PCB assembly.\nIt performs the following steps:\n- Connect to the Sherlock service.\n- Import a project.\n- Update solder fatigue properties.\n\nFor further details, refer to the official documentation on solder fatigue properties in Sherlock."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_solder_fatigue_properties.html#connect-to-sherlock","title":"Update Solder Fatigue Properties > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_solder_fatigue_properties.html#delete-project","title":"Update Solder Fatigue Properties > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_solder_fatigue_properties.html#import-tutorial-project","title":"Update Solder Fatigue Properties > Import Tutorial Project","text":"Import Tutorial Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory."},{"objectID":"Home","href":"examples/gallery_examples/04-analyses/update_solder_fatigue_properties.html#update-solder-fatigue-properties","title":"Update Solder Fatigue Properties","text":"Update Solder Fatigue Properties\n\nConfigure solder fatigue properties for the PCB assembly.\n\n\n\nDownload Jupyter notebook: update_solder_fatigue_properties.ipynb\n\nDownload Python source code: update_solder_fatigue_properties.py\n\nDownload zipped: update_solder_fatigue_properties.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.schema.html#schema","title":"schema","text":"schema\n\n\n\nclassmethod PottingRegionUpdateData.schema(by_alias=True, ref_template='#/$defs/{model}')\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.model_dump.html#model_dump","title":"model_dump","text":"model_dump\n\n\n\nCsvExcelOutlineFile.model_dump(*, mode='python', include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump](../concepts/serialization.md#modelmodel_dump)\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nParameters\n\nmode (Union[Literal['json', 'python'], str]) – The mode in which to_python should run.\nIf mode is ‘json’, the output will only contain JSON serializable types.\nIf mode is ‘python’, the output may contain non-JSON-serializable Python objects.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to include in the output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to exclude from the output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to use the field’s alias in the dictionary key if defined.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nA dictionary representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.model_dump.html#model_dump","title":"model_dump","text":"model_dump\n\n\n\nCopyPottingRegionRequest.model_dump(*, mode='python', include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump](../concepts/serialization.md#modelmodel_dump)\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nParameters\n\nmode (Union[Literal['json', 'python'], str]) – The mode in which to_python should run.\nIf mode is ‘json’, the output will only contain JSON serializable types.\nIf mode is ‘python’, the output may contain non-JSON-serializable Python objects.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to include in the output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to exclude from the output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to use the field’s alias in the dictionary key if defined.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nA dictionary representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.json.html#json","title":"json","text":"json\n\n\n\nPottingRegionCopyData.json(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.model_config.html#model_config","title":"model_config","text":"model_config\n\n\n\nPCBShape.model_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.analysis.Analysis.update_pcb_modeling_props.html#update_pcb_modeling_props","title":"update_pcb_modeling_props","text":"update_pcb_modeling_props\n\n\n\nAnalysis.update_pcb_modeling_props(project, cca_names, analyses)\n\nUpdate FEA PCB Modeling properties for one or more CCAs.\n\nAvailable Since: 2023R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_names: list\n\nNames of the CCAs to be used for the analysis.\n\nanalyses: list[tuple[bool | float | str | UpdatePcbModelingPropsRequestAnalysisType                | UpdatePcbModelingPropsRequestPcbModelType                | UpdatePcbModelingPropsRequestPcbMaterialModel                | ElementOrder, …]]\n\nElements consisting of the following properties:\n\nanalysis_type: UpdatePcbModelingPropsRequestAnalysisType\n\nType of analysis applied.\n\npcb_model_type: UpdatePcbModelingPropsRequestPcbModelType\n\nThe PCB modeling mesh type.\n\nmodeling_region_enabled: bool\n\nIndicates if modeling regions are enabled.\n\npcb_material_model: UpdatePcbModelingPropsRequestPcbMaterialModel\n\nThe PCB modeling PCB model type.\n\npcb_max_materials: Optional[int]\n\nThe number of PCB materials for Uniform Elements and Layered Elements PCB model\ntypes. Not applicable if PCB model is Uniform or Layered.\n\npcb_elem_order: ElementOrder\n\nThe element order for PCB elements.\n\npcb_max_edge_length: float\n\nThe maximum mesh size for PCB elements.\n\npcb_max_edge_length_units: str\n\nThe length units for the maximum mesh size.\n\npcb_max_vertical: float\n\nThe maximum vertical mesh size for PCB elements.\n\npcb_max_vertical_units: str\n\nThe length units for the maximum vertical mesh size.\n\nquads_preferred: bool\n\nIndicates that the meshing engine should attempt to generate quad-shaped elements\nwhen creating the mesh.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> update_request = SherlockAnalysisService_pb2.UpdatePcbModelingPropsRequest\n>>> sherlock.analysis.update_pcb_modeling_props(\n    \"Tutorial Project\",\n    [\"Main Board\"],\n    [\n        (\n            UpdatePcbModelingPropsRequestAnalysisType.HARMONIC_VIBE,\n            UpdatePcbModelingPropsRequestPcbModelType.BONDED,\n            True,\n            UpdatePcbModelingPropsRequestPcbMaterialModel.UNIFORM,\n            ElementOrder.SOLID_SHELL,\n            6,\n            \"mm\",\n            3,\n            \"mm\",\n            True,\n        )\n    ]\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.file_name.html#file_name","title":"file_name","text":"file_name\n\n\n\nCopperFile.file_name: str\n\nThe name of the file being imported.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperGerberFile.parse_raw.html#parse_raw","title":"parse_raw","text":"parse_raw\n\n\n\nclassmethod CopperGerberFile.parse_raw(b, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.ImageFile.coordinate_units.html#coordinate_units","title":"coordinate_units","text":"coordinate_units\n\n\n\nImageFile.coordinate_units\n\ncoordinate_units\n\nType\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.from_orm.html#from_orm","title":"from_orm","text":"from_orm\n\n\n\nclassmethod CopperFile.from_orm(obj)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/project.html#project","title":"Project","text":"Project\n\n\n\nModule containing all project management capabilities.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.model.Model.generate_trace_model.html#generate_trace_model","title":"generate_trace_model","text":"generate_trace_model\n\n\n\nModel.generate_trace_model(project_name, cca_name='', copper_layer_name='', max_arc_segment=0.0, max_arc_segment_units='mm', min_trace_area=0.0, min_trace_area_units='mm2', min_hole_area=0.0, min_hole_area_units='mm2', use_snapshot_for_non_image_layer=False)\n\nGenerate one or more trace models for a project.\n\nAvailable Since: 2023R2\n\nParameters\n\nproject_name: str\n\nName of the Sherlock project to generate one or more trace models for.\n\ncca_name: str, optional\n\nName of the CCA to generate one or more trace models from. The default is\n\"\", in which case trace models are generated for CCAs and\nall layers.\n\ncopper_layer_name: str, optional\n\nName of the copper layer to generate one or more trace models from. The default\nis \"\", in which case trace models are generated either for the given CCA\nor for all layers.\n\nmax_arc_segment: float, optional\n\nMaximum length of the segment to generate when Sherlock\nconverts EDA arc drawing commands to line segments. The default is\n0.0. Smaller values for the maximum arc segment result in smoother\narc representations on the FEA model. However, the cost of generating a\nlarger number of shorter segments is higher. Such short segments cause\nthe FEA tool to generate a larger number of smaller elements to represent\nthe curved solid.\n\nmax_arc_segment_units: str, optional\n\nUnits for the maximum arc segment. The default is \"mm\".\n\nmin_trace_area: float, optional\n\nMinimum area of any trace polygon to include in the trace model.\nThe default is 0.0, which turns off any area filtering.\n\nmin_trace_area_units: str, optional\n\nUnits for the minimum trace area. The default is \"mm2\".\n\nmin_hole_area: float, optional\n\nMinimum area of any trace hole to include in the trace model.\nThe default is 0.0, which turns off any hole filtering.\n\nmin_hole_area_units: str, optional\n\nUnits for the minimum hole area. The default is \"mm2\".\n\nuse_snapshot_for_non_image_layer: bool, optional\n\nWhether to use an image to generate the trace model for layers that are not\nimage layers. The default is False. If True and a snapshot image for\nthe layer exists, the snapshot image is used. Otherwise, an image is created\nin the same way as a snapshot image is created.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core import launcher\n>>> from ansys.sherlock.core import model\n>>> sherlock = launcher.launch_sherlock()\n>>> sherlock.model.generate_trace_model(\n    'Tutorial Project', 'Main Board', 0.05, 'mm'\n    0.0, 'mm2', 0.0, 'mm2')\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.model_validate_json.html#model_validate_json","title":"model_validate_json","text":"model_validate_json\n\n\n\nclassmethod CircularShape.model_validate_json(json_data, *, strict=None, context=None, by_alias=None, by_name=None)\n\n!!! abstract “Usage Documentation”\n\n[JSON Parsing](../concepts/json.md#json-parsing)\n\nValidate the given JSON data against the Pydantic model.\n\nParameters\n\njson_data (str | bytes | bytearray) – The JSON data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\nRaises\n\nValidationError – If json_data is not a JSON string or the object could not be validated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.model_validate.html#model_validate","title":"model_validate","text":"model_validate\n\n\n\nclassmethod SlotShape.model_validate(obj, *, strict=None, from_attributes=None, context=None, by_alias=None, by_name=None)\n\nValidate a pydantic model instance.\n\nParameters\n\nobj (Any) – The object to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\nfrom_attributes (bool | None) – Whether to extract data from object attributes.\n\ncontext (Any | None) – Additional context to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nRaises\n\nValidationError – If the object could not be validated.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.lifecycle.Lifecycle.add_shock_event.html#add_shock_event","title":"add_shock_event","text":"add_shock_event\n\n\n\nLifecycle.add_shock_event(project, phase_name, event_name, duration, duration_units, num_of_cycles, cycle_type, orientation, load_direction, description='')\n\nAdd a shock event to a life cycle phase.\n\nAvailable Since: 2021R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\nphase_name: str\n\nName of the life cycle phase to add this shock event to.\n\nevent_name: str\n\nName of the shock event.\n\nduration: float\n\nEvent duration length.\n\nduration_units: str\n\nEvent duration units. Options are \"ms\", \"sec\", \"min\", \"hr\",\n\"day\", and \"year\".\n\nnum_of_cycles: float\n\nNumber of cycles for the shock event.\n\ncycle_type: str\n\nCycle type. Options are \"COUNT\", \"DUTY CYCLE\",\n\"PER YEAR\", and \"PER HOUR\".\n\norientation: str\n\nPCB orientation in the format of \"azimuth, elevation\". For example,\n\"30,15\".\n\nload_direction: str\n\nLoad direction in the format of \"x,y,z\". For example, \"0,0,1\".\n\ndescription: str, optional\n\nDescription of the shock event. The default is \"\".\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n)\n>>> sherlock.lifecycle.create_life_phase(\n    \"Test\",\n    \"Example\",\n    1.5,\n    \"sec\",\n    4.0,\n    \"COUNT\",\n)\n>>> sherlock.lifecycle.add_shock_event(\n    \"Test\",\n    \"Example\",\n    \"Event1\",\n    1.5,\n    \"sec\",\n    4.0,\n    \"PER MIN\",\n    \"45,45\",\n    \"2,4,5\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.parse_file.html#parse_file","title":"parse_file","text":"parse_file\n\n\n\nclassmethod GetICTFixturesPropertiesRequest.parse_file(path, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.header_row_count.html#header_row_count","title":"header_row_count","text":"header_row_count\n\n\n\nCsvExcelOutlineFile.header_row_count: int\n\nNumber of rows before the column header in the file\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.model_validate.html#model_validate","title":"model_validate","text":"model_validate\n\n\n\nclassmethod TestPointProperties.model_validate(obj, *, strict=None, from_attributes=None, context=None, by_alias=None, by_name=None)\n\nValidate a pydantic model instance.\n\nParameters\n\nobj (Any) – The object to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\nfrom_attributes (bool | None) – Whether to extract data from object attributes.\n\ncontext (Any | None) – Additional context to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nRaises\n\nValidationError – If the object could not be validated.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.parse_raw.html#parse_raw","title":"parse_raw","text":"parse_raw\n\n\n\nclassmethod CopyPottingRegionRequest.parse_raw(b, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.model_post_init.html#model_post_init","title":"model_post_init","text":"model_post_init\n\n\n\nCsvExcelOutlineFile.model_post_init(context, /)\n\nOverride this method to perform additional initialization after __init__ and model_construct.\nThis is useful if you want to do some validation that requires the entire model to be initialized.\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.project.Project.add_strain_maps.html#add_strain_maps","title":"add_strain_maps","text":"add_strain_maps\n\n\n\nProject.add_strain_maps(project, strain_maps)\n\nAdd strain map files to CCAs in a Sherlock project.\n\nAvailable Since: 2023R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project to add strain maps to.\n\nstrain_maps: list\n\nStrain maps consisting of these properties:\n\nstrain_map_file: str\n\nFull path to the CSV file with the strain maps.\n\nfile_comment: str\n\nComment to associate with the file.\n\nfile_type: StrainMapsFileType\n\nStrain maps file type. Options are CSV, Excel, and Image.\n\nheader_row_count: int\n\nNumber of rows before the file’s column header.\n\nreference_id_column: str\n\nName of the column in the file with reference IDs.\n\nstrain_column: str\n\nName of the column in the file with strain values.\n\nstrain_units: str\n\nStrain units. Options are µε and ε.\n\nimage_file: StrainMapImageFile, optional\n\nThe properties of the strain map file to add.\n\nccas: list, optional\n\nList of CCA names to assign the file to. When no list is\nspecified, the file is assigned to all CCAs in the project.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> from ansys.sherlock.core.types.project_types import (\n    BoardBounds,\n    ImageBounds,\n    ImageFile,\n    LegendBounds,\n    LegendOrientation,\n    StrainMapsFileType,\n    StrainMapLegendOrientation,\n)\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.add_strain_maps(\n    \"Tutorial Project\",\n        [\n            (\n                \"StrainMap.csv\",\n                \"This is the strain map file for the project\",\n                StrainMapsFileType.CSV,\n                0,\n                \"refDes\",\n                \"strain\",\n                \"µε\",\n                [\"Main Board\"]\n            )\n        ]\n    )\n>>> properties = (\n        BoardBounds([\n            (1.0, 2.0),\n            (3.0, 4.0),\n            (1.0, 2.0),\n            (1.0, 2.0)\n        ]),\n        \"in\",\n        ImageBounds(0.0, 0.0, 10.0, 8.0),\n        LegendBounds(1.0, 2.0, 4.0, 2.0),\n        StrainMapLegendOrientation.VERTICAL,\n        20.0,\n        50.0,\n        \"µε\"\n    )\n>>> sherlock.project.add_strain_maps(\n    \"Tutorial Project\",\n        [\n            (\n                \"StrainMap.jpg\",\n                \"This is the strain map image for the project\",\n                StrainMapsFileType.IMAGE,\n                properties,\n                [\"Main Board\"]\n            )\n        ]\n    )\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.model_extra.html#model_extra","title":"model_extra","text":"model_extra\n\n\n\nproperty DeletePottingRegionRequest.model_extra: dict[str, Any] | None\n\nGet extra fields set during validation.\n\nReturns\n\nA dictionary of extra fields, or None if config.extra is not set to “allow”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.model_computed_fields.html#model_computed_fields","title":"model_computed_fields","text":"model_computed_fields\n\n\n\nUpdateTestPointsRequest.model_computed_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.model_construct.html#model_construct","title":"model_construct","text":"model_construct\n\n\n\nclassmethod CopperFile.model_construct(_fields_set=None, **values)\n\nCreates a new instance of the Model class with validated data.\n\nCreates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n\nmodel_construct() generally respects the model_config.extra setting on the provided model.\nThat is, if model_config.extra == ‘allow’, then all extra passed values are added to the model instance’s __dict__\nand __pydantic_extra__ fields. If model_config.extra == ‘ignore’ (the default), then all extra passed values are ignored.\nBecause no validation is performed with a call to model_construct(), having model_config.extra == ‘forbid’ does not result in\nan error if extra values are passed, but they will be ignored.\n\nParameters\n\n_fields_set (set[str] | None) – A set of field names that were originally explicitly set during instantiation. If provided,\nthis is directly used for the [model_fields_set][pydantic.BaseModel.model_fields_set] attribute.\nOtherwise, the field names from the values argument will be used.\n\nvalues (Any) – Trusted or pre-validated data dictionary.\n\nReturn type\n\nSelf\n\nReturns\n\nA new instance of the Model class with validated data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.lifecycle.Lifecycle.save_thermal_profile.html#save_thermal_profile","title":"save_thermal_profile","text":"save_thermal_profile\n\n\n\nLifecycle.save_thermal_profile(request)\n\nSave a thermal life cycle event profile to a .dat or .csv file.\n\nAvailable Since: 2026R1\n\nParameters\n\nrequest\n\nSaveThermalProfileRequest\n\nRequest object containing the information needed to save a thermal profile.\n\nReturns\n\n:\n\n\n\nSherlockCommonService_pb2.ReturnCode\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nReturnCode\n\nExamples\n\n>>> from ansys.sherlock.core.types.lifecycle_types import SaveThermalProfileRequest\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> response = sherlock.lifecycle.save_thermal_profile(\n>>>     SaveThermalProfileRequest(\n>>>         project=\"MyProject\",\n>>>         phase_name=\"ThermalPhase\",\n>>>         event_name=\"ThermalCycle_A\",\n>>>         file_path=\"/tmp/ThermalCycle_A.dat\",\n>>>     )\n>>> )\n>>> assert response.value == 0\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateTestPointsRequest.construct.html#construct","title":"construct","text":"construct\n\n\n\nclassmethod UpdateTestPointsRequest.construct(_fields_set=None, **values)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.schema.html#schema","title":"schema","text":"schema\n\n\n\nclassmethod CopperFile.schema(by_alias=True, ref_template='#/$defs/{model}')\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.model_copy.html#model_copy","title":"model_copy","text":"model_copy\n\n\n\nCsvExcelOutlineFile.model_copy(*, update=None, deep=False)\n\n!!! abstract “Usage Documentation”\n\n[model_copy](../concepts/serialization.md#model_copy)\n\nReturns a copy of the model.\n\n!!! note\n\nThe underlying instance’s [__dict__][object.__dict__] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property]).\n\nParameters\n\nupdate (Mapping[str, Any] | None) – Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\n\ndeep (bool) – Set to True to make a deep copy of the model.\n\nReturn type\n\nSelf\n\nReturns\n\nNew model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.validate.html#validate","title":"validate","text":"validate\n\n\n\nclassmethod PottingRegionCopyData.validate(value)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CircularShape.model_config.html#model_config","title":"model_config","text":"model_config\n\n\n\nCircularShape.model_config: ClassVar[ConfigDict] = {}\n\nConfiguration for the model, should be a dictionary conforming to [ConfigDict][pydantic.config.ConfigDict].\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdateICTFixturesRequest.model_fields.html#model_fields","title":"model_fields","text":"model_fields\n\n\n\nUpdateICTFixturesRequest.model_fields = {'cca_name': FieldInfo(annotation=str, required=True), 'project': FieldInfo(annotation=str, required=True), 'update_fixtures': FieldInfo(annotation=list[ICTFixtureProperties], required=True)}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.CopyPottingRegionRequest.model_validate_json.html#model_validate_json","title":"model_validate_json","text":"model_validate_json\n\n\n\nclassmethod CopyPottingRegionRequest.model_validate_json(json_data, *, strict=None, context=None, by_alias=None, by_name=None)\n\n!!! abstract “Usage Documentation”\n\n[JSON Parsing](../concepts/json.md#json-parsing)\n\nValidate the given JSON data against the Pydantic model.\n\nParameters\n\njson_data (str | bytes | bytearray) – The JSON data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\nRaises\n\nValidationError – If json_data is not a JSON string or the object could not be validated.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PolygonalShape.parse_file.html#parse_file","title":"parse_file","text":"parse_file\n\n\n\nclassmethod PolygonalShape.parse_file(path, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.parse_file.html#parse_file","title":"parse_file","text":"parse_file\n\n\n\nclassmethod DeletePottingRegionRequest.parse_file(path, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.diameter.html#diameter","title":"diameter","text":"diameter\n\n\n\nICTFixtureProperties.diameter: str\n\nDiameter\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.type.html#type","title":"type","text":"type\n\n\n\nICTFixtureProperties.type: str\n\nType\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_project_zip_file.html#sherlock-project-import-with-grpc","title":"Sherlock Project Import with gRPC","text":"Sherlock Project Import with gRPC\n\nThis example demonstrates how to launch the Sherlock gRPC service, import a\nproject archive, and handle common exceptions during the import process."},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_project_zip_file.html#description","title":"Sherlock Project Import with gRPC > Description","text":"Description\n\nSherlock’s gRPC API enables automation of various workflows, including project\nmanagement.\nThis script demonstrates how to:\n- Connect to the Sherlock service.\n- Import a sample project archive.\n- Handle import errors gracefully."},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_project_zip_file.html#connect-to-sherlock","title":"Sherlock Project Import with gRPC > Connect to Sherlock","text":"Connect to Sherlock\n\nConnect to the Sherlock service and ensure proper initialization."},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_project_zip_file.html#delete-project","title":"Sherlock Project Import with gRPC > Delete Project","text":"Delete Project\n\nDelete the project if it already exists."},{"objectID":"Home","href":"examples/gallery_examples/02-importing/import_project_zip_file.html#import-sherlock-project","title":"Sherlock Project Import with gRPC > Import Sherlock Project","text":"Import Sherlock Project\n\nImport the tutorial project zip archive from the Sherlock tutorial directory.\n\n\n\nDownload Jupyter notebook: import_project_zip_file.ipynb\n\nDownload Python source code: import_project_zip_file.py\n\nDownload zipped: import_project_zip_file.zip\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.parse_file.html#parse_file","title":"parse_file","text":"parse_file\n\n\n\nclassmethod UpdatePottingRegionRequest.parse_file(path, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.dict.html#dict","title":"dict","text":"dict\n\n\n\nICTFixtureProperties.dict(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False)\n\nReturn type\n\nDict[str, Any]\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.model_computed_fields.html#model_computed_fields","title":"model_computed_fields","text":"model_computed_fields\n\n\n\nGetTestPointPropertiesRequest.model_computed_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.parts.Parts.update_pad_properties.html#update_pad_properties","title":"update_pad_properties","text":"update_pad_properties\n\n\n\nParts.update_pad_properties(request)\n\nUpdate pad properties for one or more parts in a parts list.\n\nParameters\n\nrequest: UpdatePadPropertiesRequest\n\nContains all the information needed to update the pad properties for one or more parts\nin a project’s CCA.\n\nReturns\n\n:\n\n\n\npython:list[SherlockPartsService_pb2.UpdatePadPropertiesResponse]\n\nStatus of the pad properties update and any error messages.\n\nReturn type\n\nlist[UpdatePadPropertiesResponse]\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> from ansys.sherlock.core.types.parts_types import (\n    UpdatePadPropertiesRequest,\n)\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_project_zip_archive(\n    project=\"Assembly Tutorial\",\n    category=\"category\",\n    archive_file=\\\n        \"C:\\\\Program Files\\\\ANSYS Inc\\\\v252\\\\sherlock\\\\tutorial\\\\Assembly Tutorial.zip\",\n)\n>>> request = UpdatePadPropertiesRequest(\n    project=\"Assembly Tutorial\",\n    cca_name=\"Main Board\",\n    reference_designators=[\"U1\", \"R2\", \"C3\"]\n)\n>>> response = sherlock.parts.update_pad_properties(request)\n>>> for res in response:\n        print(f\"Return code: value={res.returnCode.value}, message={res.returnCode.message},\n        reference_designators={res.reference_designators}\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.layer.Layer.update_ict_fixtures.html#update_ict_fixtures","title":"update_ict_fixtures","text":"update_ict_fixtures\n\n\n\nLayer.update_ict_fixtures(request)\n\nUpdate ict fixture properties of a CCA from input parameters.\n\nAvailable Since: 2026R1\n\nParameters\n\nrequest: UpdateICTFixturesRequest\n\nContains all the information needed to update the properties for one or more\nict fixtures.\n\nReturns\n\n:\n\n\n\nSherlockCommonService_pb2.UpdateICTFixturesResponse\n\nA status code and message for the update ict fixtures request.\n\nReturn type\n\nUpdateICTFixturesResponse\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> from ansys.sherlock.core.types.layer_types import UpdateICTFixturesRequest,\n>>> ICTFixtureProperties\n>>> sherlock = connect()\n>>> fixture = ICTFixtureProperties(\n>>> id=\"F1\",\n>>> type=\"Mount Hole\",\n>>> units=\"in\",\n>>> side=\"TOP\",\n>>> height=\"0.0\",\n>>> material=\"GOLD\",\n>>> state=\"DISABLED\",\n>>> shape=\"Slot\",\n>>> x=\"0.3\",\n>>> y=\"-0.4\",\n>>> length=\"1.0\",\n>>> width=\"0.2\",\n>>> diameter=\"0.0\",\n>>> nodes=\"10\",\n>>> rotation=\"15\",\n>>> polygon=\"\",\n>>> boundary=\"Outline\",\n>>> constraints=\"X-axis translation|Z-axis translation\",\n>>> chassis_material=\"SILVER\",\n>>> )\n>>> response = sherlock.layer.update_ict_fixtures(UpdateICTFixturesRequest(\n>>> project=\"Tutorial Project\",\n>>> cca_name=\"Main Board\",\n>>> update_fixtures=[fixture],\n>>> ))\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.lifecycle.Lifecycle.add_shock_profiles.html#add_shock_profiles","title":"add_shock_profiles","text":"add_shock_profiles\n\n\n\nLifecycle.add_shock_profiles(project, shock_profiles)\n\nAdd shock profiles to a life cycle phase.\n\nAvailable Since: 2023R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project\n\nshock_profiles: list\n\nShock profiles consisting of these properties:\n\nphase_name: str\n\nName of the life cycle phase to add the shock profile to.\n\nevent_name: str\n\nName of the shock event.\n\nprofile_name: str\n\nName of the shock profile.\n\nduration: float\n\nPulse duration.\n\nduration_units: str\n\nPulse duration units. Options are \"ms\", \"sec\", \"min\", \"hr\",\n\"day\", and \"year\".\n\nsample_rate: float\n\nSample rate.\n\nsample_rate_units: str\n\nSample rate units. Options are \"ms\", \"sec\", \"min\", \"hr\",\n\"day\", and \"year\".\n\nload_units: str\n\nLoad units. Options are: \"G\", \"m/s2\", \"mm/s2\", \"in/s2\",\nand \"ft/s2\".\n\nfreq_units: str\n\nFrequency units. Options are \"HZ\", \"KHZ\", \"MHZ\", and \"GHZ\".\n\nshock_profile_entries: list\n\nShock profile entries consisting of these properties:\n\nshape: str\n\nShape of the shock profile entry. Options are \"FullSine\",\n\"HalfSine\", \"Haversine\", \"Triangle\", \"Sawtooth\",\n\"FullSquare\", and \"HalfSquare\".\n\nload: float\n\nLoad of the profile entry expressed in load units.\n\nfreq: float\n\nFrequency of the profile entry expressed in frequency units.\n\ndecay: float\n\nDecay value of the profile entry.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n)\n>>> sherlock.lifecycle.create_life_phase(\n    \"Test\",\n    \"Example\",\n    1.5,\n    \"sec\",\n    4.0,\n    \"COUNT\",\n)\n>>> sherlock.lifecycle.add_shock_event(\n    \"Test\",\n    \"Example\",\n    \"Event1\",\n    1.5,\n    \"sec\",\n    4.0,\n    \"PER MIN\",\n    \"45,45\",\n    \"2,4,5\",\n)\n>>> sherlock.lifecycle.add_shock_profiles(\n    \"Test\",\n    [(\n        \"Example\",\n        \"Event1\",\n        \"Profile1\",\n        10.0, \"ms\",\n        0.1, \"ms\",\n        \"G\",\n        \"HZ\",\n        [(\"HalfSine\", 100.0, 100.0, 0)],\n    )]\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.parts.Parts.enable_lead_modeling.html#enable_lead_modeling","title":"enable_lead_modeling","text":"enable_lead_modeling\n\n\n\nParts.enable_lead_modeling(project, cca_name)\n\nEnable lead modeling for leaded parts.\n\nAvailable Since: 2021R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.parts.enable_lead_modeling(\n    \"Test\",\n    \"Card\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PCBShape.model_computed_fields.html#model_computed_fields","title":"model_computed_fields","text":"model_computed_fields\n\n\n\nPCBShape.model_computed_fields = {}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperImageFile.update_forward_refs.html#update_forward_refs","title":"update_forward_refs","text":"update_forward_refs\n\n\n\nclassmethod CopperImageFile.update_forward_refs(**localns)\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.lifecycle.Lifecycle.load_thermal_profile.html#load_thermal_profile","title":"load_thermal_profile","text":"load_thermal_profile\n\n\n\nLifecycle.load_thermal_profile(project, phase_name, event_name, file_path)\n\nLoad a thermal profile from a .dat or .csv file.\n\nAvailable Since: 2021R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project\n\nphase_name: str\n\nName of the lifecycle phase to add this event to.\n\nevent_name: str\n\nName of the random vibe event.\n\nfile_path: str\n\nFile path for thermal profile .dat or .csv file\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n >>>loaded = sherlock.lifecycle.load_thermal_profile(\n        project=\"Tutorial\",\n        phase_name=\"Phase 1\",\n        event_name=\"Thermal Event\",\n        file_path=\"Tutorial_Profile.dat\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.center_x.html#center_x","title":"center_x","text":"center_x\n\n\n\nPottingRegionCopyData.center_x: float\n\nX coordinate for the center of the new potting region.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.project.Project.html#ansyssherlockcoreprojectproject","title":"ansys.sherlock.core.project.Project","text":"ansys.sherlock.core.project.Project\n\n\n\nclass ansys.sherlock.core.project.Project(channel, server_version)\n\nContains all project management capabilities.\n\nMethods\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.construct.html#construct","title":"construct","text":"construct\n\n\n\nclassmethod CsvExcelOutlineFile.construct(_fields_set=None, **values)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.str_validation.html#str_validation","title":"str_validation","text":"str_validation\n\n\n\nclassmethod PottingRegionCopyData.str_validation(value, info)\n\nValidate string fields listed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.center_y.html#center_y","title":"center_y","text":"center_y\n\n\n\nPottingRegionCopyData.center_y: float\n\nY coordinate for the center of the new potting region.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.project.Project.list_ccas.html#list_ccas","title":"list_ccas","text":"list_ccas\n\n\n\nProject.list_ccas(project, cca_names=None)\n\nList CCAs and subassembly CCAs assigned to each CCA or given CCAs.\n\nAvailable Since: 2023R2\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_names: list[str], optional\n\nCCA names. The default is None, in which case all CCAs\nin the project are returned.\n\nReturns\n\n:\n\n\n\npython:list\n\nCCAs and subassembly CCAs.\n\nReturn type\n\ndict[str, str | dict[str, str]]\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> ccas = sherlock.project.list_ccas(\"AssemblyTutorial\", [\"Main Board\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.parse_file.html#parse_file","title":"parse_file","text":"parse_file\n\n\n\nclassmethod PottingRegionCopyData.parse_file(path, *, content_type=None, encoding='utf8', proto=None, allow_pickle=False)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.parts.Parts.update_parts_locations_by_file.html#update_parts_locations_by_file","title":"update_parts_locations_by_file","text":"update_parts_locations_by_file\n\n\n\nParts.update_parts_locations_by_file(project, cca_name, file_path, numeric_format='')\n\nUpdate one or more part locations using a CSV file.\n\nAvailable Since: 2023R1\n\nParameters\n\nproject: str\n\nName of the Sherlock project.\n\ncca_name: str\n\nName of the CCA.\n\nfile_path: str\n\nFull path to the file with the components and location properties.\n\nnumeric_format: str, optional\n\nNumeric format for the file, which indicates whether commas or points\nare used as decimal markers. The default is \"\", in which case\n\"English (United States)\" is the numeric format. This\nindicates that points are used as decimal markers.\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\n    \"ODB++ Tutorial.tgz\",\n    True,\n    True,\n    True,\n    True,\n    project=\"Test\",\n    cca_name=\"Card\",\n)\n>>> sherlock.parts.update_parts_locations_by_file(\n    \"Test\",\n    \"Card\",\n    \"Parts Locations.csv\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.SlotShape.model_extra.html#model_extra","title":"model_extra","text":"model_extra\n\n\n\nproperty SlotShape.model_extra: dict[str, Any] | None\n\nGet extra fields set during validation.\n\nReturns\n\nA dictionary of extra fields, or None if config.extra is not set to “allow”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.model_dump.html#model_dump","title":"model_dump","text":"model_dump\n\n\n\nTestPointProperties.model_dump(*, mode='python', include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump](../concepts/serialization.md#modelmodel_dump)\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nParameters\n\nmode (Union[Literal['json', 'python'], str]) – The mode in which to_python should run.\nIf mode is ‘json’, the output will only contain JSON serializable types.\nIf mode is ‘python’, the output may contain non-JSON-serializable Python objects.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to include in the output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to exclude from the output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to use the field’s alias in the dictionary key if defined.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nA dictionary representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.model_dump.html#model_dump","title":"model_dump","text":"model_dump\n\n\n\nGetTestPointPropertiesRequest.model_dump(*, mode='python', include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump](../concepts/serialization.md#modelmodel_dump)\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nParameters\n\nmode (Union[Literal['json', 'python'], str]) – The mode in which to_python should run.\nIf mode is ‘json’, the output will only contain JSON serializable types.\nIf mode is ‘python’, the output may contain non-JSON-serializable Python objects.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to include in the output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to exclude from the output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to use the field’s alias in the dictionary key if defined.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nA dictionary representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionCopyData.validate_ids.html#validate_ids","title":"validate_ids","text":"validate_ids\n\n\n\nPottingRegionCopyData.validate_ids()\n\nValidate that the potting IDs are not the same between the original and copy.\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.ICTFixtureProperties.copy.html#copy","title":"copy","text":"copy\n\n\n\nICTFixtureProperties.copy(*, include=None, exclude=None, update=None, deep=False)\n\nReturns a copy of the model.\n\n!!! warning “Deprecated”\n\nThis method is now deprecated; use model_copy instead.\n\nIf you need include or exclude, use:\n\n`python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n`\n\nParameters\n\ninclude – Optional set or mapping specifying which fields to include in the copied model.\n\nexclude – Optional set or mapping specifying which fields to exclude in the copied model.\n\nupdate – Optional dictionary of field-value pairs to override field values in the copied model.\n\ndeep – If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns\n\nA copy of the model with included, excluded and updated fields as specified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.model_copy.html#model_copy","title":"model_copy","text":"model_copy\n\n\n\nUpdatePottingRegionRequest.model_copy(*, update=None, deep=False)\n\n!!! abstract “Usage Documentation”\n\n[model_copy](../concepts/serialization.md#model_copy)\n\nReturns a copy of the model.\n\n!!! note\n\nThe underlying instance’s [__dict__][object.__dict__] attribute is copied. This\nmight have unexpected side effects if you store anything in it, on top of the model\nfields (e.g. the value of [cached properties][functools.cached_property]).\n\nParameters\n\nupdate (Mapping[str, Any] | None) – Values to change/add in the new model. Note: the data is not validated\nbefore creating the new model. You should trust this data.\n\ndeep (bool) – Set to True to make a deep copy of the model.\n\nReturn type\n\nSelf\n\nReturns\n\nNew model instance.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.model_dump.html#model_dump","title":"model_dump","text":"model_dump\n\n\n\nCopperFile.model_dump(*, mode='python', include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump](../concepts/serialization.md#modelmodel_dump)\n\nGenerate a dictionary representation of the model, optionally specifying which fields to include or exclude.\n\nParameters\n\nmode (Union[Literal['json', 'python'], str]) – The mode in which to_python should run.\nIf mode is ‘json’, the output will only contain JSON serializable types.\nIf mode is ‘python’, the output may contain non-JSON-serializable Python objects.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to include in the output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – A set of fields to exclude from the output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to use the field’s alias in the dictionary key if defined.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\ndict[str, Any]\n\nReturns\n\nA dictionary representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.json.html#json","title":"json","text":"json\n\n\n\nUpdatePottingRegionRequest.json(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.json.html#json","title":"json","text":"json\n\n\n\nGerberOutlineFile.json(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.GerberOutlineFile.validate.html#validate","title":"validate","text":"validate\n\n\n\nclassmethod GerberOutlineFile.validate(value)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.UpdatePottingRegionRequest.model_dump_json.html#model_dump_json","title":"model_dump_json","text":"model_dump_json\n\n\n\nUpdatePottingRegionRequest.model_dump_json(*, indent=None, include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump_json](../concepts/serialization.md#modelmodel_dump_json)\n\nGenerates a JSON representation of the model using Pydantic’s to_json method.\n\nParameters\n\nindent (int | None) – Indentation to use in the JSON output. If None is passed, the output will be compact.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to include in the JSON output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to exclude from the JSON output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to serialize using field aliases.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\nstr\n\nReturns\n\nA JSON string representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.shape.html#shape","title":"shape","text":"shape\n\n\n\nPottingRegion.shape: Union[CircularShape, PCBShape, PolygonalShape, RectangularShape, SlotShape]\n\nThe shape of the potting region.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetTestPointPropertiesRequest.model_fields.html#model_fields","title":"model_fields","text":"model_fields\n\n\n\nGetTestPointPropertiesRequest.model_fields = {'cca_name': FieldInfo(annotation=str, required=True), 'project': FieldInfo(annotation=str, required=True), 'test_point_ids': FieldInfo(annotation=Union[str, NoneType], required=False, default=None)}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionUpdateData.model_post_init.html#model_post_init","title":"model_post_init","text":"model_post_init\n\n\n\nPottingRegionUpdateData.model_post_init(context, /)\n\nOverride this method to perform additional initialization after __init__ and model_construct.\nThis is useful if you want to do some validation that requires the entire model to be initialized.\n\nReturn type\n\nNone\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.model_fields.html#model_fields","title":"model_fields","text":"model_fields\n\n\n\nRectangularShape.model_fields = {'center_x': FieldInfo(annotation=float, required=True), 'center_y': FieldInfo(annotation=float, required=True), 'length': FieldInfo(annotation=float, required=True), 'rotation': FieldInfo(annotation=float, required=True), 'width': FieldInfo(annotation=float, required=True)}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.copy.html#copy","title":"copy","text":"copy\n\n\n\nCsvExcelOutlineFile.copy(*, include=None, exclude=None, update=None, deep=False)\n\nReturns a copy of the model.\n\n!!! warning “Deprecated”\n\nThis method is now deprecated; use model_copy instead.\n\nIf you need include or exclude, use:\n\n`python {test=\"skip\" lint=\"skip\"}\ndata = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n`\n\nParameters\n\ninclude – Optional set or mapping specifying which fields to include in the copied model.\n\nexclude – Optional set or mapping specifying which fields to exclude in the copied model.\n\nupdate – Optional dictionary of field-value pairs to override field values in the copied model.\n\ndeep – If True, the values of fields that are Pydantic models will be deep-copied.\n\nReturns\n\nA copy of the model with included, excluded and updated fields as specified.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.DeletePottingRegionRequest.model_fields_set.html#model_fields_set","title":"model_fields_set","text":"model_fields_set\n\n\n\nproperty DeletePottingRegionRequest.model_fields_set: set[str]\n\nReturns the set of fields that have been explicitly set on this model instance.\n\nReturns\n\nA set of strings representing the fields that have been set,\n\ni.e. that were not filled from defaults.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.GetICTFixturesPropertiesRequest.model_validate_strings.html#model_validate_strings","title":"model_validate_strings","text":"model_validate_strings\n\n\n\nclassmethod GetICTFixturesPropertiesRequest.model_validate_strings(obj, *, strict=None, context=None, by_alias=None, by_name=None)\n\nValidate the given object with string data against the Pydantic model.\n\nParameters\n\nobj (Any) – The object containing string data to validate.\n\nstrict (bool | None) – Whether to enforce types strictly.\n\ncontext (Any | None) – Extra variables to pass to the validator.\n\nby_alias (bool | None) – Whether to use the field’s alias when validating against the provided input data.\n\nby_name (bool | None) – Whether to use the field’s name when validating against the provided input data.\n\nReturn type\n\nSelf\n\nReturns\n\nThe validated Pydantic model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CopperFile.model_dump_json.html#model_dump_json","title":"model_dump_json","text":"model_dump_json\n\n\n\nCopperFile.model_dump_json(*, indent=None, include=None, exclude=None, context=None, by_alias=None, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True, fallback=None, serialize_as_any=False)\n\n!!! abstract “Usage Documentation”\n\n[model_dump_json](../concepts/serialization.md#modelmodel_dump_json)\n\nGenerates a JSON representation of the model using Pydantic’s to_json method.\n\nParameters\n\nindent (int | None) – Indentation to use in the JSON output. If None is passed, the output will be compact.\n\ninclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to include in the JSON output.\n\nexclude (Union[set[int], set[str], Mapping[int, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], Mapping[str, Union[set[int], set[str], Mapping[int, Union[IncEx, bool]], Mapping[str, Union[IncEx, bool]], bool]], None]) – Field(s) to exclude from the JSON output.\n\ncontext (Any | None) – Additional context to pass to the serializer.\n\nby_alias (bool | None) – Whether to serialize using field aliases.\n\nexclude_unset (bool) – Whether to exclude fields that have not been explicitly set.\n\nexclude_defaults (bool) – Whether to exclude fields that are set to their default value.\n\nexclude_none (bool) – Whether to exclude fields that have a value of None.\n\nround_trip (bool) – If True, dumped values should be valid as input for non-idempotent types such as Json[T].\n\nwarnings (Union[bool, Literal['none', 'warn', 'error']]) – How to handle serialization errors. False/”none” ignores them, True/”warn” logs errors,\n“error” raises a [PydanticSerializationError][pydantic_core.PydanticSerializationError].\n\nfallback (Optional[Callable[[Any], Any]]) – A function to call when an unknown value is encountered. If not provided,\na [PydanticSerializationError][pydantic_core.PydanticSerializationError] error is raised.\n\nserialize_as_any (bool) – Whether to serialize fields with duck-typing serialization behavior.\n\nReturn type\n\nstr\n\nReturns\n\nA JSON string representation of the model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.RectangularShape.center_x.html#center_x","title":"center_x","text":"center_x\n\n\n\nRectangularShape.center_x: float\n\nfloat\n\nType\n\nX coordinate of center\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegionDeleteData.validate.html#validate","title":"validate","text":"validate\n\n\n\nclassmethod PottingRegionDeleteData.validate(value)\n\nReturn type\n\nSelf\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.TestPointProperties.json.html#json","title":"json","text":"json\n\n\n\nTestPointProperties.json(*, include=None, exclude=None, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, **dumps_kwargs)\n\nReturn type\n\nstr\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.CsvExcelOutlineFile.html#ansyssherlockcoretypesproject_typescsvexceloutlinefile","title":"ansys.sherlock.core.types.project_types.CsvExcelOutlineFile","text":"ansys.sherlock.core.types.project_types.CsvExcelOutlineFile\n\n\n\nclass ansys.sherlock.core.types.project_types.CsvExcelOutlineFile(**data)\n\nContains the properties for a CSV or Excel outline file.\n\nMethods\n\n\n\nAttributes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.project_types.LegendBounds.height.html#height","title":"height","text":"height\n\n\n\nLegendBounds.height\n\nheight of the legend\n\nType\n\nfloat\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.project.Project.import_odb_archive.html#import_odb_archive","title":"import_odb_archive","text":"import_odb_archive\n\n\n\nProject.import_odb_archive(archive_file, process_layer_thickness, include_other_layers, process_cutout_file, guess_part_properties, ims_stackup=False, project=None, cca_name=None, polyline_simplification=False, polyline_tolerance=0.1, polyline_tolerance_units='mm')\n\nImport an ODB++ archive file.\n\nAvailable Since: 2021R1\n\nParameters\n\narchive_file: str\n\nFull path to the ODB++ archive file.\n\nprocess_layer_thickness: bool\n\nWhether to assign stackup thickness.\n\ninclude_other_layers: bool\n\nWhether to include other layers.\n\nprocess_cutout_file: bool\n\nWhether to process cutouts.\n\nguess_part_properties: bool\n\nWhether to guess part properties.\n\nims_stackup: bool, optional\n\nWhether to generate an IMS stackup\n\nproject: str, optional\n\nName of the Sherlock project. The default is None, in which\ncase the name of the ODB++ archive file is used for the project name.\n\ncca_name: str, optional\n\nName of the CCA name. The default is None, in which case the\nname of the ODB++ archive file is used for the CCA name.\n\npolyline_simplification: bool, optional\n\nWhether to enable polyline simplification\n\npolyline_tolerance: float, optional\n\nPolyline simplification tolerance\n\npolyline_tolerance_units: str, optional\n\nPolyline simplification tolerance units\n\nReturns\n\n:\n\n\n\npython:int\n\nStatus code of the response. 0 for success.\n\nReturn type\n\nint\n\nExamples\n\n>>> from ansys.sherlock.core.launcher import launch_sherlock\n>>> sherlock = launch_sherlock()\n>>> sherlock.project.import_odb_archive(\"ODB++ Tutorial.tgz\", True, True,\n                        True, True,\n                        ims_stackup=True,\n                        project=\"Tutorial\",\n                        cca_name=\"Card\",\n                        polyline_simplification=True,\n                        polyline_tolerance=0.1,\n                        polyline_tolerance_units=\"mm\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.sherlock.core.types.layer_types.PottingRegion.model_construct.html#model_construct","title":"model_construct","text":"model_construct\n\n\n\nclassmethod PottingRegion.model_construct(_fields_set=None, **values)\n\nCreates a new instance of the Model class with validated data.\n\nCreates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.\nDefault values are respected, but no other validation is performed.\n\n!!! note\n\nmodel_construct() generally respects the model_config.extra setting on the provided model.\nThat is, if model_config.extra == ‘allow’, then all extra passed values are added to the model instance’s __dict__\nand __pydantic_extra__ fields. If model_config.extra == ‘ignore’ (the default), then all extra passed values are ignored.\nBecause no validation is performed with a call to model_construct(), having model_config.extra == ‘forbid’ does not result in\nan error if extra values are passed, but they will be ignored.\n\nParameters\n\n_fields_set (set[str] | None) – A set of field names that were originally explicitly set during instantiation. If provided,\nthis is directly used for the [model_fields_set][pydantic.BaseModel.model_fields_set] attribute.\nOtherwise, the field names from the values argument will be used.\n\nvalues (Any) – Trusted or pre-validated data dictionary.\n\nReturn type\n\nSelf\n\nReturns\n\nA new instance of the Model class with validated data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}]